{
  "crossmobile.ios.foundation.NSBundle": {
    "bundlePath()": {
      "code": "- (NSString *) bundlePath\n{\n    NSString * re$ult = [self bundlePath__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "localizedStringForKey(java.lang.String,java.lang.String,java.lang.String)": {
      "code": "- (NSString *) localizedStringForKey:(NSString *) key value:(NSString *) value table:(NSString *) tableName\n{\n    NSString * re$ult = [self localizedStringForKey___java_lang_String_java_lang_String_java_lang_String:(key ? key : JAVA_NULL) :(value ? value : JAVA_NULL) :(tableName ? tableName : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "pathForResource(java.lang.String,java.lang.String)": {
      "code": "- (NSString *) pathForResource:(NSString *) name ofType:(NSString *) ext\n{\n    NSString * re$ult = [self pathForResource___java_lang_String_java_lang_String:(name ? name : JAVA_NULL) :(ext ? ext : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "pathForResource(java.lang.String,java.lang.String,java.lang.String)": {
      "code": "- (NSString *) pathForResource:(NSString *) name ofType:(NSString *) ext inDirectory:(NSString *) subpath\n{\n    NSString * re$ult = [self pathForResource___java_lang_String_java_lang_String_java_lang_String:(name ? name : JAVA_NULL) :(ext ? ext : JAVA_NULL) :(subpath ? subpath : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSCalendar": {
    "components(int,crossmobile.ios.foundation.NSDate)": {
      "code": "- (NSDateComponents *) components:(NSCalendarUnit) unitFlags fromDate:(NSDate *) date\n{\n    NSDateComponents * re$ult = [self components___int_crossmobile_ios_foundation_NSDate:unitFlags :(date ? date : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "components(int,crossmobile.ios.foundation.NSDate,crossmobile.ios.foundation.NSDate,int)": {
      "code": "- (NSDateComponents *) components:(NSCalendarUnit) unitFlags fromDate:(NSDate *) startingDate toDate:(NSDate *) resultDate options:(NSCalendarOptions) opts\n{\n    NSDateComponents * re$ult = [self components___int_crossmobile_ios_foundation_NSDate_crossmobile_ios_foundation_NSDate_int:unitFlags :(startingDate ? startingDate : JAVA_NULL) :(resultDate ? resultDate : JAVA_NULL) :opts];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "dateByAddingComponents(crossmobile.ios.foundation.NSDateComponents,crossmobile.ios.foundation.NSDate,int)": {
      "code": "- (NSDate *) dateByAddingComponents:(NSDateComponents *) comps toDate:(NSDate *) date options:(NSCalendarOptions) opts\n{\n    NSDate * re$ult = [self dateByAddingComponents___crossmobile_ios_foundation_NSDateComponents_crossmobile_ios_foundation_NSDate_int:(comps ? comps : JAVA_NULL) :(date ? date : JAVA_NULL) :opts];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "dateFromComponents(crossmobile.ios.foundation.NSDateComponents)": {
      "code": "- (NSDate *) dateFromComponents:(NSDateComponents *) comps\n{\n    NSDate * re$ult = [self dateFromComponents___crossmobile_ios_foundation_NSDateComponents:(comps ? comps : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSData": {
    "base64EncodedStringWithOptions(int)": {
      "code": "- (NSString *) base64EncodedStringWithOptions:(NSDataBase64EncodingOptions) options\n{\n    NSString * re$ult = [self base64EncodedStringWithOptions___int:options];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "bytes()": {
      "code": "- (void *) bytes\n{\n    return [XMLVMArray createSingleDimensionWithType:3/*byte*/ size:[self length] andData:(void*)[self bytes__]];\n}\n\n"
    },
    "length()": {
      "code": "- (NSUInteger) length\n{\n    return [self length__];\n}\n\n"
    },
    "writeToFile(java.lang.String,boolean)": {
      "code": "- (BOOL) writeToFile:(NSString *) path atomically:(BOOL) useAuxiliaryFile\n{\n    return [self writeToFile___java_lang_String_boolean:(path ? path : JAVA_NULL) :useAuxiliaryFile];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSDate": {
    "timeIntervalSince1970()": {
      "code": "- (NSTimeInterval) timeIntervalSince1970\n{\n    return [self timeIntervalSince1970__];\n}\n\n"
    },
    "timeIntervalSinceReferenceDate()": {
      "code": "- (NSTimeInterval) timeIntervalSinceReferenceDate\n{\n    return [self timeIntervalSinceReferenceDate__];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSDateComponents": {
    "day()": {
      "code": "- (NSInteger) day\n{\n    return [self day__];\n}\n\n"
    },
    "era()": {
      "code": "- (NSInteger) era\n{\n    return [self era__];\n}\n\n"
    },
    "hour()": {
      "code": "- (NSInteger) hour\n{\n    return [self hour__];\n}\n\n"
    },
    "minute()": {
      "code": "- (NSInteger) minute\n{\n    return [self minute__];\n}\n\n"
    },
    "month()": {
      "code": "- (NSInteger) month\n{\n    return [self month__];\n}\n\n"
    },
    "second()": {
      "code": "- (NSInteger) second\n{\n    return [self second__];\n}\n\n"
    },
    "setDay(int)": {
      "code": "- (void) setDay:(NSInteger) day\n{\n    [self setDay___int:day];\n}\n\n"
    },
    "setEra(int)": {
      "code": "- (void) setEra:(NSInteger) era\n{\n    [self setEra___int:era];\n}\n\n"
    },
    "setHour(int)": {
      "code": "- (void) setHour:(NSInteger) hour\n{\n    [self setHour___int:hour];\n}\n\n"
    },
    "setMinute(int)": {
      "code": "- (void) setMinute:(NSInteger) minute\n{\n    [self setMinute___int:minute];\n}\n\n"
    },
    "setMonth(int)": {
      "code": "- (void) setMonth:(NSInteger) month\n{\n    [self setMonth___int:month];\n}\n\n"
    },
    "setSecond(int)": {
      "code": "- (void) setSecond:(NSInteger) second\n{\n    [self setSecond___int:second];\n}\n\n"
    },
    "setWeek(int)": {
      "code": "- (void) setWeek:(NSInteger) v\n{\n    [self setWeek___int:v];\n}\n\n"
    },
    "setWeekday(int)": {
      "code": "- (void) setWeekday:(NSInteger) weekday\n{\n    [self setWeekday___int:weekday];\n}\n\n"
    },
    "setWeekdayOrdinal(int)": {
      "code": "- (void) setWeekdayOrdinal:(NSInteger) weekdayOrdinal\n{\n    [self setWeekdayOrdinal___int:weekdayOrdinal];\n}\n\n"
    },
    "setYear(int)": {
      "code": "- (void) setYear:(NSInteger) year\n{\n    [self setYear___int:year];\n}\n\n"
    },
    "week()": {
      "code": "- (NSInteger) week\n{\n    return [self week__];\n}\n\n"
    },
    "weekday()": {
      "code": "- (NSInteger) weekday\n{\n    return [self weekday__];\n}\n\n"
    },
    "weekdayOrdinal()": {
      "code": "- (NSInteger) weekdayOrdinal\n{\n    return [self weekdayOrdinal__];\n}\n\n"
    },
    "year()": {
      "code": "- (NSInteger) year\n{\n    return [self year__];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSError": {
    "code()": {
      "code": "- (NSInteger) code\n{\n    return [self code__];\n}\n\n"
    },
    "domain()": {
      "code": "- (NSString *) domain\n{\n    NSString * re$ult = [self domain__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "localizedDescription()": {
      "code": "- (NSString *) localizedDescription\n{\n    NSString * re$ult = [self localizedDescription__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "userInfo()": {
      "code": "- (NSDictionary *) userInfo\n{\n    NSDictionary * re$ult = [self userInfo__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSExtensionContext": {
    "cancelRequestWithError(crossmobile.ios.foundation.NSError)": {
      "code": "- (void) cancelRequestWithError:(NSError *) error\n{\n    [self cancelRequestWithError___crossmobile_ios_foundation_NSError:(error ? error : JAVA_NULL)];\n}\n\n"
    },
    "inputItems()": {
      "code": "- (NSArray *) inputItems\n{\n    NSArray * re$ult = [self inputItems__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSExtensionItem": {
    "attachments()": {
      "code": "- (NSArray *) attachments\n{\n    NSArray * re$ult = [self attachments__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "setAttachments(java.util.List)": {
      "code": "- (void) setAttachments:(NSArray *) attachments\n{\n    [self setAttachments___java_util_List:(attachments ? attachments : JAVA_NULL)];\n}\n\n"
    },
    "setUserInfo(java.util.Map)": {
      "code": "- (void) setUserInfo:(NSDictionary *) userInfo\n{\n    [self setUserInfo___java_util_Map:(userInfo ? userInfo : JAVA_NULL)];\n}\n\n"
    },
    "userInfo()": {
      "code": "- (NSDictionary *) userInfo\n{\n    NSDictionary * re$ult = [self userInfo__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSFileHandle": {
    "acceptConnectionInBackgroundAndNotify()": {
      "code": "- (void) acceptConnectionInBackgroundAndNotify\n{\n    [self acceptConnectionInBackgroundAndNotify__];\n}\n\n"
    },
    "acceptConnectionInBackgroundAndNotifyForModes(java.util.List)": {
      "code": "- (void) acceptConnectionInBackgroundAndNotifyForModes:(NSArray<NSString *> *) modes\n{\n    [self acceptConnectionInBackgroundAndNotifyForModes___java_util_List:(modes ? modes : JAVA_NULL)];\n}\n\n"
    },
    "availableData()": {
      "code": "- (NSData *) availableData\n{\n    NSData * re$ult = [self availableData__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "closeFile()": {
      "code": "- (void) closeFile\n{\n    [self closeFile__];\n}\n\n"
    },
    "fileDescriptor()": {
      "code": "- (int) fileDescriptor\n{\n    return [self fileDescriptor__];\n}\n\n"
    },
    "offsetInFile()": {
      "code": "- (long long) offsetInFile\n{\n    return [self offsetInFile__];\n}\n\n"
    },
    "readDataOfLength(int)": {
      "code": "- (NSData *) readDataOfLength:(NSUInteger) length\n{\n    NSData * re$ult = [self readDataOfLength___int:length];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "readDataToEndOfFile()": {
      "code": "- (NSData *) readDataToEndOfFile\n{\n    NSData * re$ult = [self readDataToEndOfFile__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "readInBackgroundAndNotify()": {
      "code": "- (void) readInBackgroundAndNotify\n{\n    [self readInBackgroundAndNotify__];\n}\n\n"
    },
    "readInBackgroundAndNotifyForModes(java.util.List)": {
      "code": "- (void) readInBackgroundAndNotifyForModes:(NSArray<NSString *> *) modes\n{\n    [self readInBackgroundAndNotifyForModes___java_util_List:(modes ? modes : JAVA_NULL)];\n}\n\n"
    },
    "readToEndOfFileInBackgroundAndNotify()": {
      "code": "- (void) readToEndOfFileInBackgroundAndNotify\n{\n    [self readToEndOfFileInBackgroundAndNotify__];\n}\n\n"
    },
    "readToEndOfFileInBackgroundAndNotifyForModes(java.util.List)": {
      "code": "- (void) readToEndOfFileInBackgroundAndNotifyForModes:(NSArray<NSString *> *) modes\n{\n    [self readToEndOfFileInBackgroundAndNotifyForModes___java_util_List:(modes ? modes : JAVA_NULL)];\n}\n\n"
    },
    "seekToEndOfFile()": {
      "code": "- (long long) seekToEndOfFile\n{\n    return [self seekToEndOfFile__];\n}\n\n"
    },
    "seekToFileOffset(long)": {
      "code": "- (void) seekToFileOffset:(long long) offset\n{\n    [self seekToFileOffset___long:offset];\n}\n\n"
    },
    "synchronizeFile()": {
      "code": "- (void) synchronizeFile\n{\n    [self synchronizeFile__];\n}\n\n"
    },
    "truncateFileAtOffset(long)": {
      "code": "- (void) truncateFileAtOffset:(long long) offset\n{\n    [self truncateFileAtOffset___long:offset];\n}\n\n"
    },
    "waitForDataInBackgroundAndNotify()": {
      "code": "- (void) waitForDataInBackgroundAndNotify\n{\n    [self waitForDataInBackgroundAndNotify__];\n}\n\n"
    },
    "waitForDataInBackgroundAndNotifyForModes(java.util.List)": {
      "code": "- (void) waitForDataInBackgroundAndNotifyForModes:(NSArray<NSString *> *) modes\n{\n    [self waitForDataInBackgroundAndNotifyForModes___java_util_List:(modes ? modes : JAVA_NULL)];\n}\n\n"
    },
    "writeData(crossmobile.ios.foundation.NSData)": {
      "code": "- (void) writeData:(NSData *) data\n{\n    [self writeData___crossmobile_ios_foundation_NSData:(data ? data : JAVA_NULL)];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSFileManager": {
    "contentsOfDirectoryAtPath(java.lang.String,crossmobile.rt.StrongReference)": {
      "code": "- (NSArray<NSString *> *) contentsOfDirectoryAtPath:(NSString *) path error:(NSError * _Nullable *) error\n{\n    crossmobile_rt_StrongReference* error$conv = error ? [[crossmobile_rt_StrongReference alloc] __init_crossmobile_ios_StrongReference___java_lang_Object:*error] : JAVA_NULL;\n    NSArray<NSString *> * re$ult = [self contentsOfDirectoryAtPath___java_lang_String_crossmobile_rt_StrongReference:(path ? path : JAVA_NULL) :error$conv];\n    [error$conv release];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "createDirectoryAtPath(java.lang.String,boolean,java.util.Map,crossmobile.rt.StrongReference)": {
      "code": "- (BOOL) createDirectoryAtPath:(NSString *) path withIntermediateDirectories:(BOOL) createIntermediates attributes:(NSDictionary<NSString *,id> *) attributes error:(NSError * _Nullable *) error\n{\n    crossmobile_rt_StrongReference* error$conv = error ? [[crossmobile_rt_StrongReference alloc] __init_crossmobile_ios_StrongReference___java_lang_Object:*error] : JAVA_NULL;\n    BOOL re$ult = [self createDirectoryAtPath___java_lang_String_boolean_java_util_Map_crossmobile_rt_StrongReference:(path ? path : JAVA_NULL) :createIntermediates :(attributes ? attributes : JAVA_NULL) :error$conv];\n    [error$conv release];\n    return re$ult;\n}\n\n"
    },
    "fileExistsAtPath(java.lang.String)": {
      "code": "- (BOOL) fileExistsAtPath:(NSString *) path\n{\n    return [self fileExistsAtPath___java_lang_String:(path ? path : JAVA_NULL)];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSHTTPCookie": {
    "comment()": {
      "code": "- (NSString *) comment\n{\n    NSString * re$ult = [self comment__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "commentURL()": {
      "code": "- (NSURL *) commentURL\n{\n    NSURL * re$ult = [self commentURL__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "domain()": {
      "code": "- (NSString *) domain\n{\n    NSString * re$ult = [self domain__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "expiresDate()": {
      "code": "- (NSDate *) expiresDate\n{\n    NSDate * re$ult = [self expiresDate__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "isHTTPOnly()": {
      "code": "- (BOOL) isHTTPOnly\n{\n    return [self isHTTPOnly__];\n}\n\n"
    },
    "isSecure()": {
      "code": "- (BOOL) isSecure\n{\n    return [self isSecure__];\n}\n\n"
    },
    "isSessionOnly()": {
      "code": "- (BOOL) isSessionOnly\n{\n    return [self isSessionOnly__];\n}\n\n"
    },
    "name()": {
      "code": "- (NSString *) name\n{\n    NSString * re$ult = [self name__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "path()": {
      "code": "- (NSString *) path\n{\n    NSString * re$ult = [self path__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "portList()": {
      "code": "- (NSArray<NSNumber *> *) portList\n{\n    NSArray<NSNumber *> * re$ult = [self portList__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "value()": {
      "code": "- (NSString *) value\n{\n    NSString * re$ult = [self value__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "version()": {
      "code": "- (NSUInteger) version\n{\n    return [self version__];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSHTTPCookieStorage": {
    "cookieAcceptPolicy()": {
      "code": "- (NSHTTPCookieAcceptPolicy) cookieAcceptPolicy\n{\n    return [self cookieAcceptPolicy__];\n}\n\n"
    },
    "cookies()": {
      "code": "- (NSArray<NSHTTPCookie *> *) cookies\n{\n    NSArray<NSHTTPCookie *> * re$ult = [self cookies__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "cookiesForURL(crossmobile.ios.foundation.NSURL)": {
      "code": "- (NSArray<NSHTTPCookie *> *) cookiesForURL:(NSURL *) URL\n{\n    NSArray<NSHTTPCookie *> * re$ult = [self cookiesForURL___crossmobile_ios_foundation_NSURL:(URL ? URL : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "deleteCookie(crossmobile.ios.foundation.NSHTTPCookie)": {
      "code": "- (void) deleteCookie:(NSHTTPCookie *) cookie\n{\n    [self deleteCookie___crossmobile_ios_foundation_NSHTTPCookie:(cookie ? cookie : JAVA_NULL)];\n}\n\n"
    },
    "setCookie(crossmobile.ios.foundation.NSHTTPCookie)": {
      "code": "- (void) setCookie:(NSHTTPCookie *) cookie\n{\n    [self setCookie___crossmobile_ios_foundation_NSHTTPCookie:(cookie ? cookie : JAVA_NULL)];\n}\n\n"
    },
    "setCookieAcceptPolicy(int)": {
      "code": "- (void) setCookieAcceptPolicy:(NSHTTPCookieAcceptPolicy) cookieAcceptPolicy\n{\n    [self setCookieAcceptPolicy___int:cookieAcceptPolicy];\n}\n\n"
    },
    "setCookies(java.util.List,crossmobile.ios.foundation.NSURL,crossmobile.ios.foundation.NSURL)": {
      "code": "- (void) setCookies:(NSArray<NSHTTPCookie *> *) cookies forURL:(NSURL *) URL mainDocumentURL:(NSURL *) mainDocumentURL\n{\n    [self setCookies___java_util_List_crossmobile_ios_foundation_NSURL_crossmobile_ios_foundation_NSURL:(cookies ? cookies : JAVA_NULL) :(URL ? URL : JAVA_NULL) :(mainDocumentURL ? mainDocumentURL : JAVA_NULL)];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSHTTPURLResponse": {
    "allHeaderFields()": {
      "code": "- (NSDictionary *) allHeaderFields\n{\n    NSDictionary * re$ult = [self allHeaderFields__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "statusCode()": {
      "code": "- (NSInteger) statusCode\n{\n    return [self statusCode__];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSIndexPath": {
    "row()": {
      "code": "- (NSInteger) row\n{\n    return [self row__];\n}\n\n"
    },
    "section()": {
      "code": "- (NSInteger) section\n{\n    return [self section__];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSItemProvider": {
    "hasItemConformingToTypeIdentifier(java.lang.String)": {
      "code": "- (BOOL) hasItemConformingToTypeIdentifier:(NSString *) typeIdentifier\n{\n    return [self hasItemConformingToTypeIdentifier___java_lang_String:(typeIdentifier ? typeIdentifier : JAVA_NULL)];\n}\n\n"
    },
    "registeredTypeIdentifiers()": {
      "code": "- (NSArray *) registeredTypeIdentifiers\n{\n    NSArray * re$ult = [self registeredTypeIdentifiers__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSLocale": {
    "countryCode()": {
      "code": "- (NSString *) countryCode\n{\n    NSString * re$ult = [self countryCode__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "languageCode()": {
      "code": "- (NSString *) languageCode\n{\n    NSString * re$ult = [self languageCode__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "localeIdentifier()": {
      "code": "- (NSString *) localeIdentifier\n{\n    NSString * re$ult = [self localeIdentifier__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "variantCode()": {
      "code": "- (NSString *) variantCode\n{\n    NSString * re$ult = [self variantCode__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSMutableData": {
    "appendBytes(byte[])": {
      "code": "- (void) appendBytes:(void *) bytes length:(NSUInteger) length\n{\n    [self appendBytes___byte_ARRAYTYPE:bytes :length];\n}\n\n"
    },
    "appendData(crossmobile.ios.foundation.NSData)": {
      "code": "- (void) appendData:(NSData *) other\n{\n    [self appendData___crossmobile_ios_foundation_NSData:(other ? other : JAVA_NULL)];\n}\n\n"
    },
    "setData(crossmobile.ios.foundation.NSData)": {
      "code": "- (void) setData:(NSData *) data\n{\n    [self setData___crossmobile_ios_foundation_NSData:(data ? data : JAVA_NULL)];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSMutableURLRequest": {
    "HTTPBody()": {
      "code": "- (NSData *) HTTPBody\n{\n    NSData * re$ult = [self HTTPBody__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "addValue(java.lang.String,java.lang.String)": {
      "code": "- (void) addValue:(NSString *) value forHTTPHeaderField:(NSString *) field\n{\n    [self addValue___java_lang_String_java_lang_String:(value ? value : JAVA_NULL) :(field ? field : JAVA_NULL)];\n}\n\n"
    },
    "allHTTPHeaderFields()": {
      "code": "- (NSDictionary <NSString *,NSString *> *) allHTTPHeaderFields\n{\n    NSDictionary <NSString *,NSString *> * re$ult = [self allHTTPHeaderFields__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "setHTTPBody(crossmobile.ios.foundation.NSData)": {
      "code": "- (void) setHTTPBody:(NSData *) HTTPBody\n{\n    [self setHTTPBody___crossmobile_ios_foundation_NSData:(HTTPBody ? HTTPBody : JAVA_NULL)];\n}\n\n"
    },
    "setHTTPMethod(java.lang.String)": {
      "code": "- (void) setHTTPMethod:(NSString *) HTTPMethod\n{\n    [self setHTTPMethod___java_lang_String:(HTTPMethod ? HTTPMethod : JAVA_NULL)];\n}\n\n"
    },
    "setHTTPShouldHandleCookies(boolean)": {
      "code": "- (void) setHTTPShouldHandleCookies:(BOOL) HTTPShouldHandleCookies\n{\n    [self setHTTPShouldHandleCookies___boolean:HTTPShouldHandleCookies];\n}\n\n"
    },
    "setTimeoutInterval(double)": {
      "code": "- (void) setTimeoutInterval:(NSTimeInterval) timeoutInterval\n{\n    [self setTimeoutInterval___double:timeoutInterval];\n}\n\n"
    },
    "setURL(crossmobile.ios.foundation.NSURL)": {
      "code": "- (void) setURL:(NSURL *) URL\n{\n    [self setURL___crossmobile_ios_foundation_NSURL:(URL ? URL : JAVA_NULL)];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSNotification": {
    "name()": {
      "code": "- (NSNotificationName) name\n{\n    NSNotificationName re$ult = [self name__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "object()": {
      "code": "- (id) object\n{\n    id re$ult = [self object__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "userInfo()": {
      "code": "- (NSDictionary *) userInfo\n{\n    NSDictionary * re$ult = [self userInfo__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSNotificationCenter": {
    "addObserver(crossmobile.ios.foundation.NSSelector,java.lang.String,java.lang.Object)": {
      "code": "- (void) addObserver:(id) observer selector:(SEL) aSelector name:(NSNotificationName) aName object:(id) anObject\n{\n    [self addObserver___crossmobile_ios_foundation_NSSelector_java_lang_String_java_lang_Object:(observer ? observer : JAVA_NULL) :aSelector :(aName ? aName : JAVA_NULL) :(anObject ? anObject : JAVA_NULL)];\n}\n\n"
    },
    "postNotification(crossmobile.ios.foundation.NSNotification)": {
      "code": "- (void) postNotification:(NSNotification *) notification\n{\n    [self postNotification___crossmobile_ios_foundation_NSNotification:(notification ? notification : JAVA_NULL)];\n}\n\n"
    },
    "postNotificationName(java.lang.String,java.lang.Object)": {
      "code": "- (void) postNotificationName:(NSNotificationName) aName object:(id) anObject\n{\n    [self postNotificationName___java_lang_String_java_lang_Object:(aName ? aName : JAVA_NULL) :(anObject ? anObject : JAVA_NULL)];\n}\n\n"
    },
    "postNotificationName(java.lang.String,java.lang.Object,java.util.Map)": {
      "code": "- (void) postNotificationName:(NSNotificationName) aName object:(id) anObject userInfo:(NSDictionary *) aUserInfo\n{\n    [self postNotificationName___java_lang_String_java_lang_Object_java_util_Map:(aName ? aName : JAVA_NULL) :(anObject ? anObject : JAVA_NULL) :(aUserInfo ? aUserInfo : JAVA_NULL)];\n}\n\n"
    },
    "removeObserver(crossmobile.ios.foundation.NSSelector)": {
      "code": "- (void) removeObserver:(id) observer\n{\n    [self removeObserver___crossmobile_ios_foundation_NSSelector:(observer ? observer : JAVA_NULL)];\n}\n\n"
    },
    "removeObserver(crossmobile.ios.foundation.NSSelector,java.lang.String,java.lang.Object)": {
      "code": "- (void) removeObserver:(id) observer name:(NSNotificationName) aName object:(id) anObject\n{\n    [self removeObserver___crossmobile_ios_foundation_NSSelector_java_lang_String_java_lang_Object:(observer ? observer : JAVA_NULL) :(aName ? aName : JAVA_NULL) :(anObject ? anObject : JAVA_NULL)];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSNumberFormatter": {
    "maximumFractionDigits()": {
      "code": "- (NSUInteger) maximumFractionDigits\n{\n    return [self maximumFractionDigits__];\n}\n\n"
    },
    "numberStyle()": {
      "code": "- (NSNumberFormatterStyle) numberStyle\n{\n    return [self numberStyle__];\n}\n\n"
    },
    "setMaximumFractionDigits(int)": {
      "code": "- (void) setMaximumFractionDigits:(NSUInteger) maximumFractionDigits\n{\n    [self setMaximumFractionDigits___int:maximumFractionDigits];\n}\n\n"
    },
    "setNumberStyle(int)": {
      "code": "- (void) setNumberStyle:(NSNumberFormatterStyle) numberStyle\n{\n    [self setNumberStyle___int:numberStyle];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSObject": {
    "addObserver(crossmobile.ios.foundation.NSObject,java.lang.String,int,java.lang.Object)": {
      "code": "- (void) addObserver:(NSObject *) observer forKeyPath:(NSString *) keyPath options:(NSKeyValueObservingOptions) options context:(void *) context\n{\n    [self addObserver___crossmobile_ios_foundation_NSObject_java_lang_String_int_java_lang_Object:(observer ? observer : JAVA_NULL) :(keyPath ? keyPath : JAVA_NULL) :options :(context ? context : JAVA_NULL)];\n}\n\n"
    },
    "observeValueForKeyPath(java.lang.String,java.lang.Object,java.util.Map,java.lang.Object)": {
      "code": "- (void) observeValueForKeyPath:(NSString *) keyPath ofObject:(id) object change:(NSDictionary<NSKeyValueChangeKey, id> *) change context:(void *) context\n{\n    [self observeValueForKeyPath___java_lang_String_java_lang_Object_java_util_Map_java_lang_Object:(keyPath ? keyPath : JAVA_NULL) :(object ? object : JAVA_NULL) :(change ? change : JAVA_NULL) :(context ? context : JAVA_NULL)];\n}\n\n"
    },
    "removeObserver(crossmobile.ios.foundation.NSObject,java.lang.String)": {
      "code": "- (void) removeObserver:(NSObject *) observer forKeyPath:(NSString *) keyPath\n{\n    [self removeObserver___crossmobile_ios_foundation_NSObject_java_lang_String:(observer ? observer : JAVA_NULL) :(keyPath ? keyPath : JAVA_NULL)];\n}\n\n"
    },
    "removeObserver(crossmobile.ios.foundation.NSObject,java.lang.String,java.lang.Object)": {
      "code": "- (void) removeObserver:(NSObject *) observer forKeyPath:(NSString *) keyPath context:(void *) context\n{\n    [self removeObserver___crossmobile_ios_foundation_NSObject_java_lang_String_java_lang_Object:(observer ? observer : JAVA_NULL) :(keyPath ? keyPath : JAVA_NULL) :(context ? context : JAVA_NULL)];\n}\n\n"
    },
    "setValueForKey(java.lang.Object,java.lang.String)": {
      "code": "- (void) setValue:(id) value forKey:(NSString *) key\n{\n    [self setValueForKey___java_lang_Object_java_lang_String:(value ? value : JAVA_NULL) :(key ? key : JAVA_NULL)];\n}\n\n"
    },
    "setValueForUndefinedKey(java.lang.Object,java.lang.String)": {
      "code": "- (void) setValue:(id) value forUndefinedKey:(NSString *) key\n{\n    [self setValueForUndefinedKey___java_lang_Object_java_lang_String:(value ? value : JAVA_NULL) :(key ? key : JAVA_NULL)];\n}\n\n"
    },
    "valueForKey(java.lang.String)": {
      "code": "- (id) valueForKey:(NSString *) key\n{\n    id re$ult = [self valueForKey___java_lang_String:(key ? key : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "valueForUndefinedKey(java.lang.String)": {
      "code": "- (id) valueForUndefinedKey:(NSString *) key\n{\n    id re$ult = [self valueForUndefinedKey___java_lang_String:(key ? key : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSPredicate": {
    "allowEvaluation()": {
      "code": "- (void) allowEvaluation\n{\n    [self allowEvaluation__];\n}\n\n"
    },
    "evaluateWithObject(java.lang.Object)": {
      "code": "- (BOOL) evaluateWithObject:(id) object\n{\n    return [self evaluateWithObject___java_lang_Object:(object ? object : JAVA_NULL)];\n}\n\n"
    },
    "evaluateWithObject(java.lang.Object,java.util.Map)": {
      "code": "- (BOOL) evaluateWithObject:(id) object substitutionVariables:(NSDictionary<NSString *,id> *) bindings\n{\n    return [self evaluateWithObject___java_lang_Object_java_util_Map:(object ? object : JAVA_NULL) :(bindings ? bindings : JAVA_NULL)];\n}\n\n"
    },
    "predicateFormat()": {
      "code": "- (NSString *) predicateFormat\n{\n    NSString * re$ult = [self predicateFormat__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "predicateWithSubstitutionVariables(java.util.Map)": {
      "code": "- (instancetype) predicateWithSubstitutionVariables:(NSDictionary<NSString *,id> *) variables\n{\n    id re$ult = [self predicateWithSubstitutionVariables___java_util_Map:(variables ? variables : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSRunLoop": {
    "addTimer(crossmobile.ios.foundation.NSTimer,java.lang.String)": {
      "code": "- (void) addTimer:(NSTimer *) timer forMode:(NSString *) mode\n{\n    [self addTimer___crossmobile_ios_foundation_NSTimer_java_lang_String:(timer ? timer : JAVA_NULL) :(mode ? mode : JAVA_NULL)];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSSecureCoding": {
    "supportsSecureCoding()": {
      "code": "- (BOOL) supportsSecureCoding\n{\n    return [self supportsSecureCoding__];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSTimeZone": {
    "name()": {
      "code": "- (NSString *) name\n{\n    NSString * re$ult = [self name__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSTimer": {
    "fire()": {
      "code": "- (void) fire\n{\n    [self fire__];\n}\n\n"
    },
    "fireDate()": {
      "code": "- (NSDate *) fireDate\n{\n    NSDate * re$ult = [self fireDate__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "invalidate()": {
      "code": "- (void) invalidate\n{\n    [self invalidate__];\n}\n\n"
    },
    "isValid()": {
      "code": "- (BOOL) isValid\n{\n    return [self isValid__];\n}\n\n"
    },
    "setFireDate(crossmobile.ios.foundation.NSDate)": {
      "code": "- (void) setFireDate:(NSDate *) fireDate\n{\n    [self setFireDate___crossmobile_ios_foundation_NSDate:(fireDate ? fireDate : JAVA_NULL)];\n}\n\n"
    },
    "timeInterval()": {
      "code": "- (NSTimeInterval) timeInterval\n{\n    return [self timeInterval__];\n}\n\n"
    },
    "userInfo()": {
      "code": "- (id) userInfo\n{\n    id re$ult = [self userInfo__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSURL": {
    "absoluteString()": {
      "code": "- (NSString *) absoluteString\n{\n    NSString * re$ult = [self absoluteString__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSURLCache": {
    "currentDiskUsage()": {
      "code": "- (NSUInteger) currentDiskUsage\n{\n    return [self currentDiskUsage__];\n}\n\n"
    },
    "currentMemoryUsage()": {
      "code": "- (NSUInteger) currentMemoryUsage\n{\n    return [self currentMemoryUsage__];\n}\n\n"
    },
    "diskCapacity()": {
      "code": "- (NSUInteger) diskCapacity\n{\n    return [self diskCapacity__];\n}\n\n"
    },
    "memoryCapacity()": {
      "code": "- (NSUInteger) memoryCapacity\n{\n    return [self memoryCapacity__];\n}\n\n"
    },
    "removeAllCachedResponses()": {
      "code": "- (void) removeAllCachedResponses\n{\n    [self removeAllCachedResponses__];\n}\n\n"
    },
    "removeCachedResponseForRequest(crossmobile.ios.foundation.NSURLRequest)": {
      "code": "- (void) removeCachedResponseForRequest:(NSURLRequest *) request\n{\n    [self removeCachedResponseForRequest___crossmobile_ios_foundation_NSURLRequest:(request ? request : JAVA_NULL)];\n}\n\n"
    },
    "setDiskCapacity(int)": {
      "code": "- (void) setDiskCapacity:(NSUInteger) diskCapacity\n{\n    [self setDiskCapacity___int:diskCapacity];\n}\n\n"
    },
    "setMemoryCapacity(int)": {
      "code": "- (void) setMemoryCapacity:(NSUInteger) memoryCapacity\n{\n    [self setMemoryCapacity___int:memoryCapacity];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSURLConnection": {
    "cancel()": {
      "code": "- (void) cancel\n{\n    [self cancel__];\n}\n\n"
    },
    "currentRequest()": {
      "code": "- (NSURLRequest *) currentRequest\n{\n    NSURLRequest * re$ult = [self currentRequest__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "originalRequest()": {
      "code": "- (NSURLRequest *) originalRequest\n{\n    NSURLRequest * re$ult = [self originalRequest__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "start()": {
      "code": "- (void) start\n{\n    [self start__];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSURLConnectionDataDelegate": {
    "didFinishLoading(crossmobile.ios.foundation.NSURLConnection)": {
      "code": "- (void) connectionDidFinishLoading:(NSURLConnection *) connection\n{\n    [self didFinishLoading___crossmobile_ios_foundation_NSURLConnection:(connection ? connection : JAVA_NULL)];\n}\n\n"
    },
    "didReceiveData(crossmobile.ios.foundation.NSURLConnection,crossmobile.ios.foundation.NSData)": {
      "code": "- (void) connection:(NSURLConnection *) connection didReceiveData:(NSData *) data\n{\n    [self didReceiveData___crossmobile_ios_foundation_NSURLConnection_crossmobile_ios_foundation_NSData:(connection ? connection : JAVA_NULL) :(data ? data : JAVA_NULL)];\n}\n\n"
    },
    "didReceiveResponse(crossmobile.ios.foundation.NSURLConnection,crossmobile.ios.foundation.NSURLResponse)": {
      "code": "- (void) connection:(NSURLConnection *) connection didReceiveResponse:(NSURLResponse *) response\n{\n    [self didReceiveResponse___crossmobile_ios_foundation_NSURLConnection_crossmobile_ios_foundation_NSURLResponse:(connection ? connection : JAVA_NULL) :(response ? response : JAVA_NULL)];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSURLConnectionDelegate": {
    "didFailWithError(crossmobile.ios.foundation.NSURLConnection,crossmobile.ios.foundation.NSError)": {
      "code": "- (void) connection:(NSURLConnection *) connection didFailWithError:(NSError *) error\n{\n    [self didFailWithError___crossmobile_ios_foundation_NSURLConnection_crossmobile_ios_foundation_NSError:(connection ? connection : JAVA_NULL) :(error ? error : JAVA_NULL)];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSURLRequest": {
    "HTTPShouldHandleCookies()": {
      "code": "- (BOOL) HTTPShouldHandleCookies\n{\n    return [self HTTPShouldHandleCookies__];\n}\n\n"
    },
    "URL()": {
      "code": "- (NSURL *) URL\n{\n    NSURL * re$ult = [self URL__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "cachePolicy()": {
      "code": "- (NSURLRequestCachePolicy) cachePolicy\n{\n    return [self cachePolicy__];\n}\n\n"
    },
    "timeoutInterval()": {
      "code": "- (NSTimeInterval) timeoutInterval\n{\n    return [self timeoutInterval__];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSURLResponse": {
    "MIMEType()": {
      "code": "- (NSString *) MIMEType\n{\n    NSString * re$ult = [self MIMEType__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "URL()": {
      "code": "- (NSURL *) URL\n{\n    NSURL * re$ult = [self URL__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "expectedContentLength()": {
      "code": "- (long long) expectedContentLength\n{\n    return [self expectedContentLength__];\n}\n\n"
    },
    "textEncodingName()": {
      "code": "- (NSString *) textEncodingName\n{\n    NSString * re$ult = [self textEncodingName__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSURLSession": {
    "configuration()": {
      "code": "- (NSURLSessionConfiguration *) configuration\n{\n    NSURLSessionConfiguration * re$ult = [self configuration__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "dataTaskWithRequest(crossmobile.ios.foundation.NSURLRequest)": {
      "code": "- (NSURLSessionDataTask *) dataTaskWithRequest:(NSURLRequest *) request\n{\n    NSURLSessionDataTask * re$ult = [self dataTaskWithRequest___crossmobile_ios_foundation_NSURLRequest:(request ? request : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "dataTaskWithURL(crossmobile.ios.foundation.NSURL)": {
      "code": "- (NSURLSessionDataTask *) dataTaskWithURL:(NSURL *) url\n{\n    NSURLSessionDataTask * re$ult = [self dataTaskWithURL___crossmobile_ios_foundation_NSURL:(url ? url : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "delegate()": {
      "code": "- (id<NSURLSessionDelegate>) delegate\n{\n    id<NSURLSessionDelegate> re$ult = [self delegate__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "delegateQueue()": {
      "code": "- (NSOperationQueue *) delegateQueue\n{\n    NSOperationQueue * re$ult = [self delegateQueue__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "downloadTaskWithRequest(crossmobile.ios.foundation.NSURLRequest)": {
      "code": "- (NSURLSessionDownloadTask *) downloadTaskWithRequest:(NSURLRequest *) request\n{\n    NSURLSessionDownloadTask * re$ult = [self downloadTaskWithRequest___crossmobile_ios_foundation_NSURLRequest:(request ? request : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "downloadTaskWithResumeData(crossmobile.ios.foundation.NSData)": {
      "code": "- (NSURLSessionDownloadTask *) downloadTaskWithResumeData:(NSData *) resumeData\n{\n    NSURLSessionDownloadTask * re$ult = [self downloadTaskWithResumeData___crossmobile_ios_foundation_NSData:(resumeData ? resumeData : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "downloadTaskWithURL(crossmobile.ios.foundation.NSURL)": {
      "code": "- (NSURLSessionDownloadTask *) downloadTaskWithURL:(NSURL *) url\n{\n    NSURLSessionDownloadTask * re$ult = [self downloadTaskWithURL___crossmobile_ios_foundation_NSURL:(url ? url : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "finishTasksAndInvalidate()": {
      "code": "- (void) finishTasksAndInvalidate\n{\n    [self finishTasksAndInvalidate__];\n}\n\n"
    },
    "invalidateAndCancel()": {
      "code": "- (void) invalidateAndCancel\n{\n    [self invalidateAndCancel__];\n}\n\n"
    },
    "sessionDescription()": {
      "code": "- (NSString *) sessionDescription\n{\n    NSString * re$ult = [self sessionDescription__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "setSessionDescription(java.lang.String)": {
      "code": "- (void) setSessionDescription:(NSString *) sessionDescription\n{\n    [self setSessionDescription___java_lang_String:(sessionDescription ? sessionDescription : JAVA_NULL)];\n}\n\n"
    },
    "sharedSession()": {
      "code": "- (NSURLSession *) sharedSession\n{\n    NSURLSession * re$ult = [self sharedSession__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "streamTaskWithHostName(java.lang.String,int)": {
      "code": "- (NSURLSessionStreamTask *) streamTaskWithHostName:(NSString *) hostname port:(NSInteger) port\n{\n    NSURLSessionStreamTask * re$ult = [self streamTaskWithHostName___java_lang_String_int:(hostname ? hostname : JAVA_NULL) :port];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "uploadTaskWithRequest(crossmobile.ios.foundation.NSURLRequest,crossmobile.ios.foundation.NSData)": {
      "code": "- (NSURLSessionUploadTask *) uploadTaskWithRequest:(NSURLRequest *) request fromData:(NSData *) bodyData\n{\n    NSURLSessionUploadTask * re$ult = [self uploadTaskWithRequest___crossmobile_ios_foundation_NSURLRequest_crossmobile_ios_foundation_NSData:(request ? request : JAVA_NULL) :(bodyData ? bodyData : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "uploadTaskWithRequest(crossmobile.ios.foundation.NSURLRequest,crossmobile.ios.foundation.NSURL)": {
      "code": "- (NSURLSessionUploadTask *) uploadTaskWithRequest:(NSURLRequest *) request fromFile:(NSURL *) fileURL\n{\n    NSURLSessionUploadTask * re$ult = [self uploadTaskWithRequest___crossmobile_ios_foundation_NSURLRequest_crossmobile_ios_foundation_NSURL:(request ? request : JAVA_NULL) :(fileURL ? fileURL : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "uploadTaskWithStreamedRequest(crossmobile.ios.foundation.NSURLRequest)": {
      "code": "- (NSURLSessionUploadTask *) uploadTaskWithStreamedRequest:(NSURLRequest *) request\n{\n    NSURLSessionUploadTask * re$ult = [self uploadTaskWithStreamedRequest___crossmobile_ios_foundation_NSURLRequest:(request ? request : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSURLSessionConfiguration": {
    "setSharedContainerIdentifier(java.lang.String)": {
      "code": "- (void) setSharedContainerIdentifier:(NSString *) sharedContainerIdentifier\n{\n    [self setSharedContainerIdentifier___java_lang_String:(sharedContainerIdentifier ? sharedContainerIdentifier : JAVA_NULL)];\n}\n\n"
    },
    "sharedContainerIdentifier()": {
      "code": "- (NSString *) sharedContainerIdentifier\n{\n    NSString * re$ult = [self sharedContainerIdentifier__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSURLSessionDelegate": {
    "didBecomeInvalidWithError(crossmobile.ios.foundation.NSURLSession,crossmobile.ios.foundation.NSError)": {
      "code": "- (void) URLSession:(NSURLSession *) session didBecomeInvalidWithError:(NSError *) error\n{\n    [self didBecomeInvalidWithError___crossmobile_ios_foundation_NSURLSession_crossmobile_ios_foundation_NSError:(session ? session : JAVA_NULL) :(error ? error : JAVA_NULL)];\n}\n\n"
    },
    "didFinishEventsForBackgroundURLSession(crossmobile.ios.foundation.NSURLSession)": {
      "code": "- (void) URLSessionDidFinishEventsForBackgroundURLSession:(NSURLSession *) session\n{\n    [self didFinishEventsForBackgroundURLSession___crossmobile_ios_foundation_NSURLSession:(session ? session : JAVA_NULL)];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSURLSessionTask": {
    "cancel()": {
      "code": "- (void) cancel\n{\n    [self cancel__];\n}\n\n"
    },
    "countOfBytesExpectedToReceive()": {
      "code": "- (int64_t) countOfBytesExpectedToReceive\n{\n    return [self countOfBytesExpectedToReceive__];\n}\n\n"
    },
    "countOfBytesExpectedToSend()": {
      "code": "- (int64_t) countOfBytesExpectedToSend\n{\n    return [self countOfBytesExpectedToSend__];\n}\n\n"
    },
    "countOfBytesReceived()": {
      "code": "- (int64_t) countOfBytesReceived\n{\n    return [self countOfBytesReceived__];\n}\n\n"
    },
    "countOfBytesSent()": {
      "code": "- (int64_t) countOfBytesSent\n{\n    return [self countOfBytesSent__];\n}\n\n"
    },
    "currentRequest()": {
      "code": "- (NSURLRequest *) currentRequest\n{\n    NSURLRequest * re$ult = [self currentRequest__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "error()": {
      "code": "- (NSError *) error\n{\n    NSError * re$ult = [self error__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "originalRequest()": {
      "code": "- (NSURLRequest *) originalRequest\n{\n    NSURLRequest * re$ult = [self originalRequest__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "priority()": {
      "code": "- (float) priority\n{\n    return [self priority__];\n}\n\n"
    },
    "response()": {
      "code": "- (NSURLResponse *) response\n{\n    NSURLResponse * re$ult = [self response__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "resume()": {
      "code": "- (void) resume\n{\n    [self resume__];\n}\n\n"
    },
    "setPriority(float)": {
      "code": "- (void) setPriority:(float) priority\n{\n    [self setPriority___float:priority];\n}\n\n"
    },
    "setTaskDescription(java.lang.String)": {
      "code": "- (void) setTaskDescription:(NSString *) taskDescription\n{\n    [self setTaskDescription___java_lang_String:(taskDescription ? taskDescription : JAVA_NULL)];\n}\n\n"
    },
    "state()": {
      "code": "- (NSURLSessionTaskState) state\n{\n    return [self state__];\n}\n\n"
    },
    "suspend()": {
      "code": "- (void) suspend\n{\n    [self suspend__];\n}\n\n"
    },
    "taskDescription()": {
      "code": "- (NSString *) taskDescription\n{\n    NSString * re$ult = [self taskDescription__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "taskIdentifier()": {
      "code": "- (NSUInteger) taskIdentifier\n{\n    return [self taskIdentifier__];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSUUID": {
    "UUIDString()": {
      "code": "- (NSString *) UUIDString\n{\n    NSString * re$ult = [self UUIDString__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "getUUIDBytes(byte[])": {
      "code": "- (void) getUUIDBytes:(uuid_t) uuid\n{\n    [self getUUIDBytes___byte_ARRAYTYPE:uuid];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSUserDefaults": {
    "boolForKey(java.lang.String)": {
      "code": "- (BOOL) boolForKey:(NSString *) defaultName\n{\n    return [self boolForKey___java_lang_String:(defaultName ? defaultName : JAVA_NULL)];\n}\n\n"
    },
    "dataForKey(java.lang.String)": {
      "code": "- (NSData *) dataForKey:(NSString *) defaultName\n{\n    NSData * re$ult = [self dataForKey___java_lang_String:(defaultName ? defaultName : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "doubleForKey(java.lang.String)": {
      "code": "- (double) doubleForKey:(NSString *) defaultName\n{\n    return [self doubleForKey___java_lang_String:(defaultName ? defaultName : JAVA_NULL)];\n}\n\n"
    },
    "floatForKey(java.lang.String)": {
      "code": "- (float) floatForKey:(NSString *) defaultName\n{\n    return [self floatForKey___java_lang_String:(defaultName ? defaultName : JAVA_NULL)];\n}\n\n"
    },
    "integerForKey(java.lang.String)": {
      "code": "- (NSInteger) integerForKey:(NSString *) defaultName\n{\n    return [self integerForKey___java_lang_String:(defaultName ? defaultName : JAVA_NULL)];\n}\n\n"
    },
    "objectForKey(java.lang.String)": {
      "code": "- (id) objectForKey:(NSString *) defaultName\n{\n    id re$ult = [self objectForKey___java_lang_String:(defaultName ? defaultName : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "removeObjectForKey(java.lang.String)": {
      "code": "- (void) removeObjectForKey:(NSString *) defaultName\n{\n    [self removeObjectForKey___java_lang_String:(defaultName ? defaultName : JAVA_NULL)];\n}\n\n"
    },
    "setBool(boolean,java.lang.String)": {
      "code": "- (void) setBool:(BOOL) value forKey:(NSString *) defaultName\n{\n    [self setBool___boolean_java_lang_String:value :(defaultName ? defaultName : JAVA_NULL)];\n}\n\n"
    },
    "setDouble(double,java.lang.String)": {
      "code": "- (void) setDouble:(double) value forKey:(NSString *) defaultName\n{\n    [self setDouble___double_java_lang_String:value :(defaultName ? defaultName : JAVA_NULL)];\n}\n\n"
    },
    "setFloat(float,java.lang.String)": {
      "code": "- (void) setFloat:(float) value forKey:(NSString *) defaultName\n{\n    [self setFloat___float_java_lang_String:value :(defaultName ? defaultName : JAVA_NULL)];\n}\n\n"
    },
    "setInteger(int,java.lang.String)": {
      "code": "- (void) setInteger:(NSInteger) value forKey:(NSString *) defaultName\n{\n    [self setInteger___int_java_lang_String:value :(defaultName ? defaultName : JAVA_NULL)];\n}\n\n"
    },
    "setObject(java.lang.Object,java.lang.String)": {
      "code": "- (void) setObject:(id) value forKey:(NSString *) defaultName\n{\n    [self setObject___java_lang_Object_java_lang_String:(value ? value : JAVA_NULL) :(defaultName ? defaultName : JAVA_NULL)];\n}\n\n"
    },
    "stringForKey(java.lang.String)": {
      "code": "- (NSString *) stringForKey:(NSString *) defaultName\n{\n    NSString * re$ult = [self stringForKey___java_lang_String:(defaultName ? defaultName : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "synchronize()": {
      "code": "- (BOOL) synchronize\n{\n    return [self synchronize__];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSXMLParser": {
    "parse()": {
      "code": "- (BOOL) parse\n{\n    return [self parse__];\n}\n\n"
    },
    "parserError()": {
      "code": "- (NSError *) parserError\n{\n    NSError * re$ult = [self parserError__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "setDelegate(crossmobile.ios.foundation.NSXMLParserDelegate)": {
      "code": "- (void) setDelegate:(id<NSXMLParserDelegate>) delegate\n{\n    [self setDelegate___crossmobile_ios_foundation_NSXMLParserDelegate:(delegate ? delegate : JAVA_NULL)];\n}\n\n"
    },
    "setShouldProcessNamespaces(boolean)": {
      "code": "- (void) setShouldProcessNamespaces:(BOOL) shouldProcessNamespaces\n{\n    [self setShouldProcessNamespaces___boolean:shouldProcessNamespaces];\n}\n\n"
    },
    "setShouldReportNamespacePrefixes(boolean)": {
      "code": "- (void) setShouldReportNamespacePrefixes:(BOOL) shouldReportNamespacePrefixes\n{\n    [self setShouldReportNamespacePrefixes___boolean:shouldReportNamespacePrefixes];\n}\n\n"
    },
    "shouldProcessNamespaces()": {
      "code": "- (BOOL) shouldProcessNamespaces\n{\n    return [self shouldProcessNamespaces__];\n}\n\n"
    },
    "shouldReportNamespacePrefixes()": {
      "code": "- (BOOL) shouldReportNamespacePrefixes\n{\n    return [self shouldReportNamespacePrefixes__];\n}\n\n"
    }
  },
  "crossmobile.ios.foundation.NSXMLParserDelegate": {
    "didEndElement(crossmobile.ios.foundation.NSXMLParser,java.lang.String,java.lang.String,java.lang.String)": {
      "code": "- (void) parser:(NSXMLParser *) parser didEndElement:(NSString *) elementName namespaceURI:(NSString *) namespaceURI qualifiedName:(NSString *) qName\n{\n    [self didEndElement___crossmobile_ios_foundation_NSXMLParser_java_lang_String_java_lang_String_java_lang_String:(parser ? parser : JAVA_NULL) :(elementName ? elementName : JAVA_NULL) :(namespaceURI ? namespaceURI : JAVA_NULL) :(qName ? qName : JAVA_NULL)];\n}\n\n"
    },
    "didEndMappingPrefix(crossmobile.ios.foundation.NSXMLParser,java.lang.String)": {
      "code": "- (void) parser:(NSXMLParser *) parser didEndMappingPrefix:(NSString *) prefix\n{\n    [self didEndMappingPrefix___crossmobile_ios_foundation_NSXMLParser_java_lang_String:(parser ? parser : JAVA_NULL) :(prefix ? prefix : JAVA_NULL)];\n}\n\n"
    },
    "didStartElement(crossmobile.ios.foundation.NSXMLParser,java.lang.String,java.lang.String,java.lang.String,java.util.Map)": {
      "code": "- (void) parser:(NSXMLParser *) parser didStartElement:(NSString *) elementName namespaceURI:(NSString *) namespaceURI qualifiedName:(NSString *) qName attributes:(NSDictionary<NSString *,NSString *> *) attributeDict\n{\n    [self didStartElement___crossmobile_ios_foundation_NSXMLParser_java_lang_String_java_lang_String_java_lang_String_java_util_Map:(parser ? parser : JAVA_NULL) :(elementName ? elementName : JAVA_NULL) :(namespaceURI ? namespaceURI : JAVA_NULL) :(qName ? qName : JAVA_NULL) :(attributeDict ? attributeDict : JAVA_NULL)];\n}\n\n"
    },
    "didStartMappingPrefix(crossmobile.ios.foundation.NSXMLParser,java.lang.String,java.lang.String)": {
      "code": "- (void) parser:(NSXMLParser *) parser didStartMappingPrefix:(NSString *) prefix toURI:(NSString *) namespaceURI\n{\n    [self didStartMappingPrefix___crossmobile_ios_foundation_NSXMLParser_java_lang_String_java_lang_String:(parser ? parser : JAVA_NULL) :(prefix ? prefix : JAVA_NULL) :(namespaceURI ? namespaceURI : JAVA_NULL)];\n}\n\n"
    },
    "foundCDATA(crossmobile.ios.foundation.NSXMLParser,crossmobile.ios.foundation.NSData)": {
      "code": "- (void) parser:(NSXMLParser *) parser foundCDATA:(NSData *) CDATABlock\n{\n    [self foundCDATA___crossmobile_ios_foundation_NSXMLParser_crossmobile_ios_foundation_NSData:(parser ? parser : JAVA_NULL) :(CDATABlock ? CDATABlock : JAVA_NULL)];\n}\n\n"
    },
    "foundCharacters(crossmobile.ios.foundation.NSXMLParser,java.lang.String)": {
      "code": "- (void) parser:(NSXMLParser *) parser foundCharacters:(NSString *) string\n{\n    [self foundCharacters___crossmobile_ios_foundation_NSXMLParser_java_lang_String:(parser ? parser : JAVA_NULL) :(string ? string : JAVA_NULL)];\n}\n\n"
    }
  },
  "crossmobile.ios.quartzcore.CAAction": {
    "runActionForKey(java.lang.String,crossmobile.ios.foundation.NSObject,java.util.Map)": {
      "code": "- (void) runActionForKey:(NSString *) event object:(id) anObject arguments:(NSDictionary *) dict\n{\n    [self runActionForKey___java_lang_String_crossmobile_ios_foundation_NSObject_java_util_Map:(event ? event : JAVA_NULL) :(anObject ? anObject : JAVA_NULL) :(dict ? dict : JAVA_NULL)];\n}\n\n"
    }
  },
  "crossmobile.ios.quartzcore.CAAnimation": {
    "animationDidStart(crossmobile.ios.quartzcore.CAAnimation)": {
      "code": "- (void) animationDidStart:(CAAnimation *) anim\n{\n    [self animationDidStart___crossmobile_ios_quartzcore_CAAnimation:(anim ? anim : JAVA_NULL)];\n}\n\n"
    },
    "animationDidStop(crossmobile.ios.quartzcore.CAAnimation,boolean)": {
      "code": "- (void) animationDidStop:(CAAnimation *) theAnimation finished:(BOOL) flag\n{\n    [self animationDidStop___crossmobile_ios_quartzcore_CAAnimation_boolean:(theAnimation ? theAnimation : JAVA_NULL) :flag];\n}\n\n"
    },
    "delegate()": {
      "code": "- (id) delegate\n{\n    id re$ult = [self delegate__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "isRemovedOnCompletion()": {
      "code": "- (BOOL) isRemovedOnCompletion\n{\n    return [self isRemovedOnCompletion__];\n}\n\n"
    },
    "setDelegate(crossmobile.ios.foundation.NSObject)": {
      "code": "- (void) setDelegate:(id) delegate\n{\n    [self setDelegate___crossmobile_ios_foundation_NSObject:(delegate ? delegate : JAVA_NULL)];\n}\n\n"
    },
    "setRemovedOnCompletion(boolean)": {
      "code": "- (void) setRemovedOnCompletion:(BOOL) removedOnCompletion\n{\n    [self setRemovedOnCompletion___boolean:removedOnCompletion];\n}\n\n"
    }
  },
  "crossmobile.ios.quartzcore.CALayer": {
    "addAnimation(crossmobile.ios.quartzcore.CAAnimation,java.lang.String)": {
      "code": "- (void) addAnimation:(CAAnimation *) anim forKey:(NSString *) key\n{\n    [self addAnimation___crossmobile_ios_quartzcore_CAAnimation_java_lang_String:(anim ? anim : JAVA_NULL) :(key ? key : JAVA_NULL)];\n}\n\n"
    },
    "anchorPoint()": {
      "code": "- (CGPoint) anchorPoint\n{\n    crossmobile_ios_coregraphics_CGPoint* re$ult = [self anchorPoint__];\n    CGPoint re$ult$conv = [re$ult getCGPoint];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
    },
    "animationForKey(java.lang.String)": {
      "code": "- (CAAnimation *) animationForKey:(NSString *) key\n{\n    CAAnimation * re$ult = [self animationForKey___java_lang_String:(key ? key : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "animationKeys()": {
      "code": "- (NSArray<NSString *> *) animationKeys\n{\n    NSArray<NSString *> * re$ult = [self animationKeys__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "delegate()": {
      "code": "- (id) delegate\n{\n    id re$ult = [self delegate__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "removeAllAnimations()": {
      "code": "- (void) removeAllAnimations\n{\n    [self removeAllAnimations__];\n}\n\n"
    },
    "removeAnimationForKey(java.lang.String)": {
      "code": "- (void) removeAnimationForKey:(NSString *) key\n{\n    [self removeAnimationForKey___java_lang_String:(key ? key : JAVA_NULL)];\n}\n\n"
    },
    "renderInContext(crossmobile.ios.coregraphics.CGContext)": {
      "code": "- (void) renderInContext:(CGContextRef) ctx\n{\n    crossmobile_ios_coregraphics_CGContext* ctx$conv = [[crossmobile_ios_coregraphics_CGContext alloc] initWithCGContext:ctx];\n    [self renderInContext___crossmobile_ios_coregraphics_CGContext:ctx$conv];\n    [ctx$conv release];\n}\n\n"
    },
    "setAnchorPoint(crossmobile.ios.coregraphics.CGPoint)": {
      "code": "- (void) setAnchorPoint:(CGPoint) anchorPoint\n{\n    crossmobile_ios_coregraphics_CGPoint* anchorPoint$conv = [[crossmobile_ios_coregraphics_CGPoint alloc] initWithCGPoint:anchorPoint];\n    [self setAnchorPoint___crossmobile_ios_coregraphics_CGPoint:anchorPoint$conv];\n    [anchorPoint$conv release];\n}\n\n"
    },
    "setDelegate(crossmobile.ios.uikit.UIView)": {
      "code": "- (void) setDelegate:(id) delegate\n{\n    [self setDelegate___crossmobile_ios_uikit_UIView:(delegate ? delegate : JAVA_NULL)];\n}\n\n"
    },
    "style()": {
      "code": "- (NSDictionary *) style\n{\n    NSDictionary * re$ult = [self style__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.quartzcore.CAMediaTiming": {
    "autoreverses()": {
      "code": "- (BOOL) autoreverses\n{\n    return [self autoreverses__];\n}\n\n"
    },
    "beginTime()": {
      "code": "- (CFTimeInterval) beginTime\n{\n    return [self beginTime__];\n}\n\n"
    },
    "duration()": {
      "code": "- (CFTimeInterval) duration\n{\n    return [self duration__];\n}\n\n"
    },
    "fillMode()": {
      "code": "- (NSString *) fillMode\n{\n    NSString * re$ult = [self fillMode__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "repeatCount()": {
      "code": "- (float) repeatCount\n{\n    return [self repeatCount__];\n}\n\n"
    },
    "repeatDuration()": {
      "code": "- (CFTimeInterval) repeatDuration\n{\n    return [self repeatDuration__];\n}\n\n"
    },
    "setAutoreverses(boolean)": {
      "code": "- (void) setAutoreverses:(BOOL) autoreverses\n{\n    [self setAutoreverses___boolean:autoreverses];\n}\n\n"
    },
    "setBeginTime(double)": {
      "code": "- (void) setBeginTime:(CFTimeInterval) beginTime\n{\n    [self setBeginTime___double:beginTime];\n}\n\n"
    },
    "setDuration(double)": {
      "code": "- (void) setDuration:(CFTimeInterval) duration\n{\n    [self setDuration___double:duration];\n}\n\n"
    },
    "setFillMode(java.lang.String)": {
      "code": "- (void) setFillMode:(NSString *) fillMode\n{\n    [self setFillMode___java_lang_String:(fillMode ? fillMode : JAVA_NULL)];\n}\n\n"
    },
    "setRepeatCount(float)": {
      "code": "- (void) setRepeatCount:(float) repeatCount\n{\n    [self setRepeatCount___float:repeatCount];\n}\n\n"
    },
    "setRepeatDuration(double)": {
      "code": "- (void) setRepeatDuration:(CFTimeInterval) repeatDuration\n{\n    [self setRepeatDuration___double:repeatDuration];\n}\n\n"
    },
    "setSpeed(float)": {
      "code": "- (void) setSpeed:(float) speed\n{\n    [self setSpeed___float:speed];\n}\n\n"
    },
    "setTimeOffset(double)": {
      "code": "- (void) setTimeOffset:(CFTimeInterval) timeOffset\n{\n    [self setTimeOffset___double:timeOffset];\n}\n\n"
    },
    "speed()": {
      "code": "- (float) speed\n{\n    return [self speed__];\n}\n\n"
    },
    "timeOffset()": {
      "code": "- (CFTimeInterval) timeOffset\n{\n    return [self timeOffset__];\n}\n\n"
    }
  },
  "crossmobile.ios.quartzcore.CATransition": {
    "endProgress()": {
      "code": "- (float) endProgress\n{\n    return [self endProgress__];\n}\n\n"
    },
    "setEndProgress(float)": {
      "code": "- (void) setEndProgress:(float) endProgress\n{\n    [self setEndProgress___float:endProgress];\n}\n\n"
    },
    "setStartProgress(float)": {
      "code": "- (void) setStartProgress:(float) startProgress\n{\n    [self setStartProgress___float:startProgress];\n}\n\n"
    },
    "setSubtype(java.lang.String)": {
      "code": "- (void) setSubtype:(NSString *) subtype\n{\n    [self setSubtype___java_lang_String:(subtype ? subtype : JAVA_NULL)];\n}\n\n"
    },
    "setType(java.lang.String)": {
      "code": "- (void) setType:(NSString *) type\n{\n    [self setType___java_lang_String:(type ? type : JAVA_NULL)];\n}\n\n"
    },
    "startProgress()": {
      "code": "- (float) startProgress\n{\n    return [self startProgress__];\n}\n\n"
    },
    "subtype()": {
      "code": "- (NSString *) subtype\n{\n    NSString * re$ult = [self subtype__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "type()": {
      "code": "- (NSString *) type\n{\n    NSString * re$ult = [self type__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.NSLayoutAnchor": {
    "constraintEqualToAnchor(crossmobile.ios.uikit.NSLayoutAnchor)": {
      "code": "- (NSLayoutConstraint *) constraintEqualToAnchor:(NSLayoutAnchor *) anchor\n{\n    NSLayoutConstraint * re$ult = [self constraintEqualToAnchor___crossmobile_ios_uikit_NSLayoutAnchor:(anchor ? anchor : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "constraintEqualToAnchor(crossmobile.ios.uikit.NSLayoutAnchor,double)": {
      "code": "- (NSLayoutConstraint *) constraintEqualToAnchor:(NSLayoutAnchor *) anchor constant:(CGFloat) c\n{\n    NSLayoutConstraint * re$ult = [self constraintEqualToAnchor___crossmobile_ios_uikit_NSLayoutAnchor_double:(anchor ? anchor : JAVA_NULL) :c];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "constraintGreaterThanOrEqualToAnchor(crossmobile.ios.uikit.NSLayoutAnchor)": {
      "code": "- (NSLayoutConstraint *) constraintGreaterThanOrEqualToAnchor:(NSLayoutAnchor *) anchor\n{\n    NSLayoutConstraint * re$ult = [self constraintGreaterThanOrEqualToAnchor___crossmobile_ios_uikit_NSLayoutAnchor:(anchor ? anchor : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "constraintGreaterThanOrEqualToAnchor(crossmobile.ios.uikit.NSLayoutAnchor,double)": {
      "code": "- (NSLayoutConstraint *) constraintGreaterThanOrEqualToAnchor:(NSLayoutAnchor *) anchor constant:(CGFloat) c\n{\n    NSLayoutConstraint * re$ult = [self constraintGreaterThanOrEqualToAnchor___crossmobile_ios_uikit_NSLayoutAnchor_double:(anchor ? anchor : JAVA_NULL) :c];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "constraintLessThanOrEqualToAnchor(crossmobile.ios.uikit.NSLayoutAnchor)": {
      "code": "- (NSLayoutConstraint *) constraintLessThanOrEqualToAnchor:(NSLayoutAnchor *) anchor\n{\n    NSLayoutConstraint * re$ult = [self constraintLessThanOrEqualToAnchor___crossmobile_ios_uikit_NSLayoutAnchor:(anchor ? anchor : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "constraintLessThanOrEqualToAnchor(crossmobile.ios.uikit.NSLayoutAnchor,double)": {
      "code": "- (NSLayoutConstraint *) constraintLessThanOrEqualToAnchor:(NSLayoutAnchor *) anchor constant:(CGFloat) c\n{\n    NSLayoutConstraint * re$ult = [self constraintLessThanOrEqualToAnchor___crossmobile_ios_uikit_NSLayoutAnchor_double:(anchor ? anchor : JAVA_NULL) :c];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.NSLayoutConstraint": {
    "constant()": {
      "code": "- (CGFloat) constant\n{\n    return [self constant__];\n}\n\n"
    },
    "firstAttribute()": {
      "code": "- (NSLayoutAttribute) firstAttribute\n{\n    return [self firstAttribute__];\n}\n\n"
    },
    "firstItem()": {
      "code": "- (id) firstItem\n{\n    id re$ult = [self firstItem__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "identifier()": {
      "code": "- (NSString *) identifier\n{\n    NSString * re$ult = [self identifier__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "isActive()": {
      "code": "- (BOOL) isActive\n{\n    return [self isActive__];\n}\n\n"
    },
    "multiplier()": {
      "code": "- (CGFloat) multiplier\n{\n    return [self multiplier__];\n}\n\n"
    },
    "priority()": {
      "code": "- (UILayoutPriority) priority\n{\n    return [self priority__];\n}\n\n"
    },
    "relation()": {
      "code": "- (NSLayoutRelation) relation\n{\n    return [self relation__];\n}\n\n"
    },
    "secondAttribute()": {
      "code": "- (NSLayoutAttribute) secondAttribute\n{\n    return [self secondAttribute__];\n}\n\n"
    },
    "secondItem()": {
      "code": "- (id) secondItem\n{\n    id re$ult = [self secondItem__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "setActive(boolean)": {
      "code": "- (void) setActive:(BOOL) active\n{\n    [self setActive___boolean:active];\n}\n\n"
    },
    "setConstant(double)": {
      "code": "- (void) setConstant:(CGFloat) constant\n{\n    [self setConstant___double:constant];\n}\n\n"
    },
    "setIdentifier(java.lang.String)": {
      "code": "- (void) setIdentifier:(NSString *) identifier\n{\n    [self setIdentifier___java_lang_String:(identifier ? identifier : JAVA_NULL)];\n}\n\n"
    },
    "setPriority(float)": {
      "code": "- (void) setPriority:(UILayoutPriority) priority\n{\n    [self setPriority___float:priority];\n}\n\n"
    },
    "setShouldBeArchived(boolean)": {
      "code": "- (void) setShouldBeArchived:(BOOL) shouldBeArchived\n{\n    [self setShouldBeArchived___boolean:shouldBeArchived];\n}\n\n"
    },
    "shouldBeArchived()": {
      "code": "- (BOOL) shouldBeArchived\n{\n    return [self shouldBeArchived__];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.NSLayoutDimension": {
    "constraintEqualToAnchor(crossmobile.ios.uikit.NSLayoutDimension,double)": {
      "code": "- (NSLayoutConstraint *) constraintEqualToAnchor:(NSLayoutDimension *) anchor multiplier:(CGFloat) m\n{\n    NSLayoutConstraint * re$ult = [self constraintEqualToAnchor___crossmobile_ios_uikit_NSLayoutDimension_double:(anchor ? anchor : JAVA_NULL) :m];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "constraintEqualToAnchor(crossmobile.ios.uikit.NSLayoutDimension,double,double)": {
      "code": "- (NSLayoutConstraint *) constraintEqualToAnchor:(NSLayoutDimension *) anchor multiplier:(CGFloat) m constant:(CGFloat) c\n{\n    NSLayoutConstraint * re$ult = [self constraintEqualToAnchor___crossmobile_ios_uikit_NSLayoutDimension_double_double:(anchor ? anchor : JAVA_NULL) :m :c];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "constraintEqualToConstant(double)": {
      "code": "- (NSLayoutConstraint *) constraintEqualToConstant:(CGFloat) c\n{\n    NSLayoutConstraint * re$ult = [self constraintEqualToConstant___double:c];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "constraintGreaterThanOrEqualToAnchor(crossmobile.ios.uikit.NSLayoutDimension,double)": {
      "code": "- (NSLayoutConstraint *) constraintGreaterThanOrEqualToAnchor:(NSLayoutDimension *) anchor multiplier:(CGFloat) m\n{\n    NSLayoutConstraint * re$ult = [self constraintGreaterThanOrEqualToAnchor___crossmobile_ios_uikit_NSLayoutDimension_double:(anchor ? anchor : JAVA_NULL) :m];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "constraintGreaterThanOrEqualToAnchor(crossmobile.ios.uikit.NSLayoutDimension,double,double)": {
      "code": "- (NSLayoutConstraint *) constraintGreaterThanOrEqualToAnchor:(NSLayoutDimension *) anchor multiplier:(CGFloat) m constant:(CGFloat) c\n{\n    NSLayoutConstraint * re$ult = [self constraintGreaterThanOrEqualToAnchor___crossmobile_ios_uikit_NSLayoutDimension_double_double:(anchor ? anchor : JAVA_NULL) :m :c];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "constraintGreaterThanOrEqualToConstant(double)": {
      "code": "- (NSLayoutConstraint *) constraintGreaterThanOrEqualToConstant:(CGFloat) c\n{\n    NSLayoutConstraint * re$ult = [self constraintGreaterThanOrEqualToConstant___double:c];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "constraintLessThanOrEqualToAnchor(crossmobile.ios.uikit.NSLayoutDimension,double)": {
      "code": "- (NSLayoutConstraint *) constraintLessThanOrEqualToAnchor:(NSLayoutDimension *) anchor multiplier:(CGFloat) m\n{\n    NSLayoutConstraint * re$ult = [self constraintLessThanOrEqualToAnchor___crossmobile_ios_uikit_NSLayoutDimension_double:(anchor ? anchor : JAVA_NULL) :m];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "constraintLessThanOrEqualToAnchor(crossmobile.ios.uikit.NSLayoutDimension,double,double)": {
      "code": "- (NSLayoutConstraint *) constraintLessThanOrEqualToAnchor:(NSLayoutDimension *) anchor multiplier:(CGFloat) m constant:(CGFloat) c\n{\n    NSLayoutConstraint * re$ult = [self constraintLessThanOrEqualToAnchor___crossmobile_ios_uikit_NSLayoutDimension_double_double:(anchor ? anchor : JAVA_NULL) :m :c];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "constraintLessThanOrEqualToConstant(double)": {
      "code": "- (NSLayoutConstraint *) constraintLessThanOrEqualToConstant:(CGFloat) c\n{\n    NSLayoutConstraint * re$ult = [self constraintLessThanOrEqualToConstant___double:c];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIAcceleration": {
    "timestamp()": {
      "code": "- (NSTimeInterval) timestamp\n{\n    return [self timestamp__];\n}\n\n"
    },
    "x()": {
      "code": "- (UIAccelerationValue) x\n{\n    return [self x__];\n}\n\n"
    },
    "y()": {
      "code": "- (UIAccelerationValue) y\n{\n    return [self y__];\n}\n\n"
    },
    "z()": {
      "code": "- (UIAccelerationValue) z\n{\n    return [self z__];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIAccelerometer": {
    "setDelegate(crossmobile.ios.uikit.UIAccelerometerDelegate)": {
      "code": "- (void) setDelegate:(id<UIAccelerometerDelegate>) delegate\n{\n    [self setDelegate___crossmobile_ios_uikit_UIAccelerometerDelegate:(delegate ? delegate : JAVA_NULL)];\n}\n\n"
    },
    "setUpdateInterval(double)": {
      "code": "- (void) setUpdateInterval:(NSTimeInterval) updateInterval\n{\n    [self setUpdateInterval___double:updateInterval];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIAccelerometerDelegate": {
    "didAccelerate(crossmobile.ios.uikit.UIAccelerometer,crossmobile.ios.uikit.UIAcceleration)": {
      "code": "- (void) accelerometer:(UIAccelerometer *) accelerometer didAccelerate:(UIAcceleration *) acceleration\n{\n    [self didAccelerate___crossmobile_ios_uikit_UIAccelerometer_crossmobile_ios_uikit_UIAcceleration:(accelerometer ? accelerometer : JAVA_NULL) :(acceleration ? acceleration : JAVA_NULL)];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIAccessibilityIdentification": {
    "accessibilityIdentifier()": {
      "code": "- (NSString *) accessibilityIdentifier\n{\n    NSString * re$ult = [self accessibilityIdentifier__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "setAccessibilityIdentifier(java.lang.String)": {
      "code": "- (void) setAccessibilityIdentifier:(NSString *) accessibilityIdentifier\n{\n    [self setAccessibilityIdentifier___java_lang_String:(accessibilityIdentifier ? accessibilityIdentifier : JAVA_NULL)];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIActionSheet": {
    "addButtonWithTitle(java.lang.String)": {
      "code": "- (NSInteger) addButtonWithTitle:(NSString *) title\n{\n    return [self addButtonWithTitle___java_lang_String:(title ? title : JAVA_NULL)];\n}\n\n"
    },
    "cancelButtonIndex()": {
      "code": "- (NSInteger) cancelButtonIndex\n{\n    return [self cancelButtonIndex__];\n}\n\n"
    },
    "delegate()": {
      "code": "- (id<UIActionSheetDelegate>) delegate\n{\n    id<UIActionSheetDelegate> re$ult = [self delegate__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "destructiveButtonIndex()": {
      "code": "- (NSInteger) destructiveButtonIndex\n{\n    return [self destructiveButtonIndex__];\n}\n\n"
    },
    "dismissWithClickedButtonIndex(int,boolean)": {
      "code": "- (void) dismissWithClickedButtonIndex:(NSInteger) buttonIndex animated:(BOOL) animated\n{\n    [self dismissWithClickedButtonIndex___int_boolean:buttonIndex :animated];\n}\n\n"
    },
    "firstOtherButtonIndex()": {
      "code": "- (NSInteger) firstOtherButtonIndex\n{\n    return [self firstOtherButtonIndex__];\n}\n\n"
    },
    "numberOfButtons()": {
      "code": "- (NSInteger) numberOfButtons\n{\n    return [self numberOfButtons__];\n}\n\n"
    },
    "setDelegate(crossmobile.ios.uikit.UIActionSheetDelegate)": {
      "code": "- (void) setDelegate:(id<UIActionSheetDelegate>) delegate\n{\n    [self setDelegate___crossmobile_ios_uikit_UIActionSheetDelegate:(delegate ? delegate : JAVA_NULL)];\n}\n\n"
    },
    "setTitle(java.lang.String)": {
      "code": "- (void) setTitle:(NSString *) title\n{\n    [self setTitle___java_lang_String:(title ? title : JAVA_NULL)];\n}\n\n"
    },
    "showFromTabBar(crossmobile.ios.uikit.UITabBar)": {
      "code": "- (void) showFromTabBar:(UITabBar *) view\n{\n    [self showFromTabBar___crossmobile_ios_uikit_UITabBar:(view ? view : JAVA_NULL)];\n}\n\n"
    },
    "showFromToolbar(crossmobile.ios.uikit.UIToolbar)": {
      "code": "- (void) showFromToolbar:(UIToolbar *) view\n{\n    [self showFromToolbar___crossmobile_ios_uikit_UIToolbar:(view ? view : JAVA_NULL)];\n}\n\n"
    },
    "showInView(crossmobile.ios.uikit.UIView)": {
      "code": "- (void) showInView:(UIView *) view\n{\n    [self showInView___crossmobile_ios_uikit_UIView:(view ? view : JAVA_NULL)];\n}\n\n"
    },
    "title()": {
      "code": "- (NSString *) title\n{\n    NSString * re$ult = [self title__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIActionSheetDelegate": {
    "cancel(crossmobile.ios.uikit.UIActionSheet)": {
      "code": "- (void) actionSheetCancel:(UIActionSheet *) actionSheet\n{\n    [self cancel___crossmobile_ios_uikit_UIActionSheet:(actionSheet ? actionSheet : JAVA_NULL)];\n}\n\n"
    },
    "clickedButtonAtIndex(crossmobile.ios.uikit.UIActionSheet,int)": {
      "code": "- (void) actionSheet:(UIActionSheet *) actionSheet clickedButtonAtIndex:(NSInteger) buttonIndex\n{\n    [self clickedButtonAtIndex___crossmobile_ios_uikit_UIActionSheet_int:(actionSheet ? actionSheet : JAVA_NULL) :buttonIndex];\n}\n\n"
    },
    "didDismissWithButtonIndex(crossmobile.ios.uikit.UIActionSheet,int)": {
      "code": "- (void) actionSheet:(UIActionSheet *) actionSheet didDismissWithButtonIndex:(NSInteger) buttonIndex\n{\n    [self didDismissWithButtonIndex___crossmobile_ios_uikit_UIActionSheet_int:(actionSheet ? actionSheet : JAVA_NULL) :buttonIndex];\n}\n\n"
    },
    "didPresentActionSheet(crossmobile.ios.uikit.UIActionSheet)": {
      "code": "- (void) didPresentActionSheet:(UIActionSheet *) actionSheet\n{\n    [self didPresentActionSheet___crossmobile_ios_uikit_UIActionSheet:(actionSheet ? actionSheet : JAVA_NULL)];\n}\n\n"
    },
    "willDismissWithButtonIndex(crossmobile.ios.uikit.UIActionSheet,int)": {
      "code": "- (void) actionSheet:(UIActionSheet *) actionSheet willDismissWithButtonIndex:(NSInteger) buttonIndex\n{\n    [self willDismissWithButtonIndex___crossmobile_ios_uikit_UIActionSheet_int:(actionSheet ? actionSheet : JAVA_NULL) :buttonIndex];\n}\n\n"
    },
    "willPresentActionSheet(crossmobile.ios.uikit.UIActionSheet)": {
      "code": "- (void) willPresentActionSheet:(UIActionSheet *) actionSheet\n{\n    [self willPresentActionSheet___crossmobile_ios_uikit_UIActionSheet:(actionSheet ? actionSheet : JAVA_NULL)];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIActivity": {
    "activityDidFinish(boolean)": {
      "code": "- (void) activityDidFinish:(BOOL) completed\n{\n    [self activityDidFinish___boolean:completed];\n}\n\n"
    },
    "activityImage()": {
      "code": "- (UIImage *) activityImage\n{\n    UIImage * re$ult = [self activityImage__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "activityTitle()": {
      "code": "- (NSString *) activityTitle\n{\n    NSString * re$ult = [self activityTitle__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "activityType()": {
      "code": "- (UIActivityType) activityType\n{\n    UIActivityType re$ult = [self activityType__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "activityViewController()": {
      "code": "- (UIViewController *) activityViewController\n{\n    UIViewController * re$ult = [self activityViewController__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "canPerformWithActivityItems(java.util.List)": {
      "code": "- (BOOL) canPerformWithActivityItems:(NSArray *) activityItems\n{\n    return [self canPerformWithActivityItems___java_util_List:(activityItems ? activityItems : JAVA_NULL)];\n}\n\n"
    },
    "performActivity()": {
      "code": "- (void) performActivity\n{\n    [self performActivity__];\n}\n\n"
    },
    "prepareWithActivityItems(java.util.List)": {
      "code": "- (void) prepareWithActivityItems:(NSArray *) activityItems\n{\n    [self prepareWithActivityItems___java_util_List:(activityItems ? activityItems : JAVA_NULL)];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIActivityIndicatorView": {
    "activityIndicatorViewStyle()": {
      "code": "- (UIActivityIndicatorViewStyle) activityIndicatorViewStyle\n{\n    return [self activityIndicatorViewStyle__];\n}\n\n"
    },
    "color()": {
      "code": "- (UIColor *) color\n{\n    UIColor * re$ult = [self color__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "hidesWhenStopped()": {
      "code": "- (BOOL) hidesWhenStopped\n{\n    return [self hidesWhenStopped__];\n}\n\n"
    },
    "isAnimating()": {
      "code": "- (BOOL) isAnimating\n{\n    return [self isAnimating__];\n}\n\n"
    },
    "setActivityIndicatorViewStyle(int)": {
      "code": "- (void) setActivityIndicatorViewStyle:(UIActivityIndicatorViewStyle) activityIndicatorViewStyle\n{\n    [self setActivityIndicatorViewStyle___int:activityIndicatorViewStyle];\n}\n\n"
    },
    "setColor(crossmobile.ios.uikit.UIColor)": {
      "code": "- (void) setColor:(UIColor *) color\n{\n    [self setColor___crossmobile_ios_uikit_UIColor:(color ? color : JAVA_NULL)];\n}\n\n"
    },
    "setHidesWhenStopped(boolean)": {
      "code": "- (void) setHidesWhenStopped:(BOOL) hidesWhenStopped\n{\n    [self setHidesWhenStopped___boolean:hidesWhenStopped];\n}\n\n"
    },
    "startAnimating()": {
      "code": "- (void) startAnimating\n{\n    [self startAnimating__];\n}\n\n"
    },
    "stopAnimating()": {
      "code": "- (void) stopAnimating\n{\n    [self stopAnimating__];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIActivityViewController": {
    "excludedActivityTypes()": {
      "code": "- (NSArray<UIActivityType> *) excludedActivityTypes\n{\n    NSArray<UIActivityType> * re$ult = [self excludedActivityTypes__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "setExcludedActivityTypes(java.util.List)": {
      "code": "- (void) setExcludedActivityTypes:(NSArray<UIActivityType> *) excludedActivityTypes\n{\n    [self setExcludedActivityTypes___java_util_List:(excludedActivityTypes ? excludedActivityTypes : JAVA_NULL)];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIAlertAction": {
    "isEnabled()": {
      "code": "- (BOOL) isEnabled\n{\n    return [self isEnabled__];\n}\n\n"
    },
    "setEnabled(boolean)": {
      "code": "- (void) setEnabled:(BOOL) enabled\n{\n    [self setEnabled___boolean:enabled];\n}\n\n"
    },
    "style()": {
      "code": "- (UIAlertActionStyle) style\n{\n    return [self style__];\n}\n\n"
    },
    "title()": {
      "code": "- (NSString *) title\n{\n    NSString * re$ult = [self title__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIAlertController": {
    "actions()": {
      "code": "- (NSArray<UIAlertAction *> *) actions\n{\n    NSArray<UIAlertAction *> * re$ult = [self actions__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "addAction(crossmobile.ios.uikit.UIAlertAction)": {
      "code": "- (void) addAction:(UIAlertAction *) action\n{\n    [self addAction___crossmobile_ios_uikit_UIAlertAction:(action ? action : JAVA_NULL)];\n}\n\n"
    },
    "message()": {
      "code": "- (NSString *) message\n{\n    NSString * re$ult = [self message__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "preferredStyle()": {
      "code": "- (UIAlertControllerStyle) preferredStyle\n{\n    return [self preferredStyle__];\n}\n\n"
    },
    "setMessage(java.lang.String)": {
      "code": "- (void) setMessage:(NSString *) message\n{\n    [self setMessage___java_lang_String:(message ? message : JAVA_NULL)];\n}\n\n"
    },
    "textFields()": {
      "code": "- (NSArray<UITextField *> *) textFields\n{\n    NSArray<UITextField *> * re$ult = [self textFields__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIAlertView": {
    "addButtonWithTitle(java.lang.String)": {
      "code": "- (NSInteger) addButtonWithTitle:(NSString *) title\n{\n    return [self addButtonWithTitle___java_lang_String:(title ? title : JAVA_NULL)];\n}\n\n"
    },
    "alertViewStyle()": {
      "code": "- (UIAlertViewStyle) alertViewStyle\n{\n    return [self alertViewStyle__];\n}\n\n"
    },
    "delegate()": {
      "code": "- (id) delegate\n{\n    id re$ult = [self delegate__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "message()": {
      "code": "- (NSString *) message\n{\n    NSString * re$ult = [self message__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "setAlertViewStyle(int)": {
      "code": "- (void) setAlertViewStyle:(UIAlertViewStyle) alertViewStyle\n{\n    [self setAlertViewStyle___int:alertViewStyle];\n}\n\n"
    },
    "setDelegate(crossmobile.ios.uikit.UIAlertViewDelegate)": {
      "code": "- (void) setDelegate:(id) delegate\n{\n    [self setDelegate___crossmobile_ios_uikit_UIAlertViewDelegate:(delegate ? delegate : JAVA_NULL)];\n}\n\n"
    },
    "setMessage(java.lang.String)": {
      "code": "- (void) setMessage:(NSString *) message\n{\n    [self setMessage___java_lang_String:(message ? message : JAVA_NULL)];\n}\n\n"
    },
    "setTitle(java.lang.String)": {
      "code": "- (void) setTitle:(NSString *) title\n{\n    [self setTitle___java_lang_String:(title ? title : JAVA_NULL)];\n}\n\n"
    },
    "show()": {
      "code": "- (void) show\n{\n    [self show__];\n}\n\n"
    },
    "textFieldAtIndex(int)": {
      "code": "- (UITextField *) textFieldAtIndex:(NSInteger) textFieldIndex\n{\n    UITextField * re$ult = [self textFieldAtIndex___int:textFieldIndex];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "title()": {
      "code": "- (NSString *) title\n{\n    NSString * re$ult = [self title__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIAlertViewDelegate": {
    "clickedButtonAtIndex(crossmobile.ios.uikit.UIAlertView,int)": {
      "code": "- (void) alertView:(UIAlertView *) alertView clickedButtonAtIndex:(NSInteger) buttonIndex\n{\n    [self clickedButtonAtIndex___crossmobile_ios_uikit_UIAlertView_int:(alertView ? alertView : JAVA_NULL) :buttonIndex];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIApplication": {
    "applicationIconBadgeNumber()": {
      "code": "- (NSInteger) applicationIconBadgeNumber\n{\n    return [self applicationIconBadgeNumber__];\n}\n\n"
    },
    "applicationState()": {
      "code": "- (UIApplicationState) applicationState\n{\n    return [self applicationState__];\n}\n\n"
    },
    "currentUserNotificationSettings()": {
      "code": "- (UIUserNotificationSettings *) currentUserNotificationSettings\n{\n    UIUserNotificationSettings * re$ult = [self currentUserNotificationSettings__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "delegate()": {
      "code": "- (id<UIApplicationDelegate>) delegate\n{\n    id<UIApplicationDelegate> re$ult = [self delegate__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "enabledRemoteNotificationTypes()": {
      "code": "- (UIRemoteNotificationType) enabledRemoteNotificationTypes\n{\n    return [self enabledRemoteNotificationTypes__];\n}\n\n"
    },
    "isIdleTimerDisabled()": {
      "code": "- (BOOL) isIdleTimerDisabled\n{\n    return [self isIdleTimerDisabled__];\n}\n\n"
    },
    "isNetworkActivityIndicatorVisible()": {
      "code": "- (BOOL) isNetworkActivityIndicatorVisible\n{\n    return [self isNetworkActivityIndicatorVisible__];\n}\n\n"
    },
    "isStatusBarHidden()": {
      "code": "- (BOOL) isStatusBarHidden\n{\n    return [self isStatusBarHidden__];\n}\n\n"
    },
    "keyWindow()": {
      "code": "- (UIWindow *) keyWindow\n{\n    UIWindow * re$ult = [self keyWindow__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "openURL(crossmobile.ios.foundation.NSURL)": {
      "code": "- (BOOL) openURL:(NSURL *) url\n{\n    return [self openURL___crossmobile_ios_foundation_NSURL:(url ? url : JAVA_NULL)];\n}\n\n"
    },
    "registerForRemoteNotificationTypes(int)": {
      "code": "- (void) registerForRemoteNotificationTypes:(UIRemoteNotificationType) types\n{\n    [self registerForRemoteNotificationTypes___int:types];\n}\n\n"
    },
    "registerForRemoteNotifications()": {
      "code": "- (void) registerForRemoteNotifications\n{\n    [self registerForRemoteNotifications__];\n}\n\n"
    },
    "registerUserNotificationSettings(crossmobile.ios.uikit.UIUserNotificationSettings)": {
      "code": "- (void) registerUserNotificationSettings:(UIUserNotificationSettings *) notificationSettings\n{\n    [self registerUserNotificationSettings___crossmobile_ios_uikit_UIUserNotificationSettings:(notificationSettings ? notificationSettings : JAVA_NULL)];\n}\n\n"
    },
    "setApplicationIconBadgeNumber(int)": {
      "code": "- (void) setApplicationIconBadgeNumber:(NSInteger) applicationIconBadgeNumber\n{\n    [self setApplicationIconBadgeNumber___int:applicationIconBadgeNumber];\n}\n\n"
    },
    "setDelegate(crossmobile.ios.uikit.UIApplicationDelegate)": {
      "code": "- (void) setDelegate:(id<UIApplicationDelegate>) delegate\n{\n    [self setDelegate___crossmobile_ios_uikit_UIApplicationDelegate:(delegate ? delegate : JAVA_NULL)];\n}\n\n"
    },
    "setIdleTimerDisabled(boolean)": {
      "code": "- (void) setIdleTimerDisabled:(BOOL) idleTimerDisabled\n{\n    [self setIdleTimerDisabled___boolean:idleTimerDisabled];\n}\n\n"
    },
    "setNetworkActivityIndicatorVisible(boolean)": {
      "code": "- (void) setNetworkActivityIndicatorVisible:(BOOL) networkActivityIndicatorVisible\n{\n    [self setNetworkActivityIndicatorVisible___boolean:networkActivityIndicatorVisible];\n}\n\n"
    },
    "setStatusBarHidden(boolean,boolean)": {
      "code": "- (void) setStatusBarHidden:(BOOL) hidden animated:(BOOL) animated\n{\n    [self setStatusBarHidden___boolean_boolean:hidden :animated];\n}\n\n"
    },
    "setStatusBarOrientation(int,boolean)": {
      "code": "- (void) setStatusBarOrientation:(UIInterfaceOrientation) interfaceOrientation animated:(BOOL) animated\n{\n    [self setStatusBarOrientation___int_boolean:interfaceOrientation :animated];\n}\n\n"
    },
    "setStatusBarStyle(int,boolean)": {
      "code": "- (void) setStatusBarStyle:(UIStatusBarStyle) statusBarStyle animated:(BOOL) animated\n{\n    [self setStatusBarStyle___int_boolean:statusBarStyle :animated];\n}\n\n"
    },
    "statusBarOrientation()": {
      "code": "- (UIInterfaceOrientation) statusBarOrientation\n{\n    return [self statusBarOrientation__];\n}\n\n"
    },
    "statusBarStyle()": {
      "code": "- (UIStatusBarStyle) statusBarStyle\n{\n    return [self statusBarStyle__];\n}\n\n"
    },
    "unregisterForRemoteNotifications()": {
      "code": "- (void) unregisterForRemoteNotifications\n{\n    [self unregisterForRemoteNotifications__];\n}\n\n"
    },
    "userInterfaceLayoutDirection()": {
      "code": "- (UIUserInterfaceLayoutDirection) userInterfaceLayoutDirection\n{\n    return [self userInterfaceLayoutDirection__];\n}\n\n"
    },
    "windows()": {
      "code": "- (NSArray<__kindof UIWindow *> *) windows\n{\n    NSArray<__kindof UIWindow *> * re$ult = [self windows__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIApplicationDelegate": {
    "didBecomeActive(crossmobile.ios.uikit.UIApplication)": {
      "code": "- (void) applicationDidBecomeActive:(UIApplication *) application\n{\n    [self didBecomeActive___crossmobile_ios_uikit_UIApplication:(application ? application : JAVA_NULL)];\n}\n\n"
    },
    "didChangeStatusBarFrame(crossmobile.ios.uikit.UIApplication,crossmobile.ios.coregraphics.CGRect)": {
      "code": "- (void) application:(UIApplication *) application didChangeStatusBarFrame:(CGRect) oldStatusBarFrame\n{\n    crossmobile_ios_coregraphics_CGRect* oldStatusBarFrame$conv = [[crossmobile_ios_coregraphics_CGRect alloc] initWithCGRect:oldStatusBarFrame];\n    [self didChangeStatusBarFrame___crossmobile_ios_uikit_UIApplication_crossmobile_ios_coregraphics_CGRect:(application ? application : JAVA_NULL) :oldStatusBarFrame$conv];\n    [oldStatusBarFrame$conv release];\n}\n\n"
    },
    "didChangeStatusBarOrientation(crossmobile.ios.uikit.UIApplication,int)": {
      "code": "- (void) application:(UIApplication *) application didChangeStatusBarOrientation:(UIInterfaceOrientation) oldStatusBarOrientation\n{\n    [self didChangeStatusBarOrientation___crossmobile_ios_uikit_UIApplication_int:(application ? application : JAVA_NULL) :oldStatusBarOrientation];\n}\n\n"
    },
    "didEnterBackground(crossmobile.ios.uikit.UIApplication)": {
      "code": "- (void) applicationDidEnterBackground:(UIApplication *) application\n{\n    [self didEnterBackground___crossmobile_ios_uikit_UIApplication:(application ? application : JAVA_NULL)];\n}\n\n"
    },
    "didFailToRegisterForRemoteNotificationsWithError(crossmobile.ios.uikit.UIApplication,crossmobile.ios.foundation.NSError)": {
      "code": "- (void) application:(UIApplication *) application didFailToRegisterForRemoteNotificationsWithError:(NSError *) error\n{\n    [self didFailToRegisterForRemoteNotificationsWithError___crossmobile_ios_uikit_UIApplication_crossmobile_ios_foundation_NSError:(application ? application : JAVA_NULL) :(error ? error : JAVA_NULL)];\n}\n\n"
    },
    "didFinishLaunchingWithOptions(crossmobile.ios.uikit.UIApplication,java.util.Map)": {
      "code": "- (BOOL) application:(UIApplication *) application didFinishLaunchingWithOptions:(NSDictionary *) launchOptions\n{\n    return [self didFinishLaunchingWithOptions___crossmobile_ios_uikit_UIApplication_java_util_Map:(application ? application : JAVA_NULL) :(launchOptions ? launchOptions : JAVA_NULL)];\n}\n\n"
    },
    "didReceiveLocalNotification(crossmobile.ios.uikit.UIApplication,crossmobile.ios.uikit.UILocalNotification)": {
      "code": "- (void) application:(UIApplication *) application didReceiveLocalNotification:(UILocalNotification *) notification\n{\n    [self didReceiveLocalNotification___crossmobile_ios_uikit_UIApplication_crossmobile_ios_uikit_UILocalNotification:(application ? application : JAVA_NULL) :(notification ? notification : JAVA_NULL)];\n}\n\n"
    },
    "didReceiveMemoryWarning(crossmobile.ios.uikit.UIApplication)": {
      "code": "- (void) applicationDidReceiveMemoryWarning:(UIApplication *) application\n{\n    [self didReceiveMemoryWarning___crossmobile_ios_uikit_UIApplication:(application ? application : JAVA_NULL)];\n}\n\n"
    },
    "didReceiveRemoteNotification(crossmobile.ios.uikit.UIApplication,java.util.Map)": {
      "code": "- (void) application:(UIApplication *) application didReceiveRemoteNotification:(NSDictionary *) userInfo\n{\n    [self didReceiveRemoteNotification___crossmobile_ios_uikit_UIApplication_java_util_Map:(application ? application : JAVA_NULL) :(userInfo ? userInfo : JAVA_NULL)];\n}\n\n"
    },
    "didReceiveRemoteNotificationFetchCompletionHandler(crossmobile.ios.uikit.UIApplication,java.util.Map,org.robovm.objc.block.VoidBlock1)": {
      "code": "- (void) application:(UIApplication *) application didReceiveRemoteNotification:(NSDictionary *) userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult result)) completionHandler\n{\n    CM_Block_Reverse_cmioslayer_0* completionHandler$conv = [[CM_Block_Reverse_cmioslayer_0 alloc] initWithCMBlock:completionHandler];\n    [self didReceiveRemoteNotificationFetchCompletionHandler___crossmobile_ios_uikit_UIApplication_java_util_Map_org_robovm_objc_block_VoidBlock1:(application ? application : JAVA_NULL) :(userInfo ? userInfo : JAVA_NULL) :completionHandler$conv];\n    [completionHandler$conv release];\n}\n\n",
      "classes": [
        "CM_Block_Reverse_cmioslayer_0"
      ]
    },
    "didRegisterForRemoteNotificationsWithDeviceToken(crossmobile.ios.uikit.UIApplication,crossmobile.ios.foundation.NSData)": {
      "code": "- (void) application:(UIApplication *) application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *) deviceToken\n{\n    [self didRegisterForRemoteNotificationsWithDeviceToken___crossmobile_ios_uikit_UIApplication_crossmobile_ios_foundation_NSData:(application ? application : JAVA_NULL) :(deviceToken ? deviceToken : JAVA_NULL)];\n}\n\n"
    },
    "didRegisterUserNotificationSettings(crossmobile.ios.uikit.UIApplication,crossmobile.ios.uikit.UIUserNotificationSettings)": {
      "code": "- (void) application:(UIApplication *) application didRegisterUserNotificationSettings:(UIUserNotificationSettings *) notificationSettings\n{\n    [self didRegisterUserNotificationSettings___crossmobile_ios_uikit_UIApplication_crossmobile_ios_uikit_UIUserNotificationSettings:(application ? application : JAVA_NULL) :(notificationSettings ? notificationSettings : JAVA_NULL)];\n}\n\n"
    },
    "handleActionWithIdentifierForLocalNotification(crossmobile.ios.uikit.UIApplication,java.lang.String,crossmobile.ios.uikit.UILocalNotification,java.lang.Runnable)": {
      "code": "- (void) application:(UIApplication *) application handleActionWithIdentifier:(NSString *) identifier forLocalNotification:(UILocalNotification *) notification completionHandler:(void (^)(void)) completionHandler\n{\n    CM_Block_Reverse_cmioslayer_1* completionHandler$conv = [[CM_Block_Reverse_cmioslayer_1 alloc] initWithCMBlock:completionHandler];\n    [self handleActionWithIdentifierForLocalNotification___crossmobile_ios_uikit_UIApplication_java_lang_String_crossmobile_ios_uikit_UILocalNotification_java_lang_Runnable:(application ? application : JAVA_NULL) :(identifier ? identifier : JAVA_NULL) :(notification ? notification : JAVA_NULL) :completionHandler$conv];\n    [completionHandler$conv release];\n}\n\n",
      "classes": [
        "CM_Block_Reverse_cmioslayer_1"
      ]
    },
    "handleActionWithIdentifierForRemoteNotification(crossmobile.ios.uikit.UIApplication,java.lang.String,java.util.Map,java.lang.Runnable)": {
      "code": "- (void) application:(UIApplication *) application handleActionWithIdentifier:(NSString *) identifier forRemoteNotification:(NSDictionary *) userInfo completionHandler:(void (^)(void)) completionHandler\n{\n    CM_Block_Reverse_cmioslayer_2* completionHandler$conv = [[CM_Block_Reverse_cmioslayer_2 alloc] initWithCMBlock:completionHandler];\n    [self handleActionWithIdentifierForRemoteNotification___crossmobile_ios_uikit_UIApplication_java_lang_String_java_util_Map_java_lang_Runnable:(application ? application : JAVA_NULL) :(identifier ? identifier : JAVA_NULL) :(userInfo ? userInfo : JAVA_NULL) :completionHandler$conv];\n    [completionHandler$conv release];\n}\n\n",
      "classes": [
        "CM_Block_Reverse_cmioslayer_2"
      ]
    },
    "openURL(crossmobile.ios.uikit.UIApplication,crossmobile.ios.foundation.NSURL,java.lang.String,java.lang.Object)": {
      "code": "- (BOOL) application:(UIApplication *) application openURL:(NSURL *) url sourceApplication:(NSString *) sourceApplication annotation:(id) annotation\n{\n    return [self openURL___crossmobile_ios_uikit_UIApplication_crossmobile_ios_foundation_NSURL_java_lang_String_java_lang_Object:(application ? application : JAVA_NULL) :(url ? url : JAVA_NULL) :(sourceApplication ? sourceApplication : JAVA_NULL) :(annotation ? annotation : JAVA_NULL)];\n}\n\n"
    },
    "protectedDataDidBecomeAvailable(crossmobile.ios.uikit.UIApplication)": {
      "code": "- (void) applicationProtectedDataDidBecomeAvailable:(UIApplication *) application\n{\n    [self protectedDataDidBecomeAvailable___crossmobile_ios_uikit_UIApplication:(application ? application : JAVA_NULL)];\n}\n\n"
    },
    "protectedDataWillBecomeUnavailable(crossmobile.ios.uikit.UIApplication)": {
      "code": "- (void) applicationProtectedDataWillBecomeUnavailable:(UIApplication *) application\n{\n    [self protectedDataWillBecomeUnavailable___crossmobile_ios_uikit_UIApplication:(application ? application : JAVA_NULL)];\n}\n\n"
    },
    "setWindow(crossmobile.ios.uikit.UIWindow)": {
      "code": "- (void) setWindow:(UIWindow *) window\n{\n    [self setWindow___crossmobile_ios_uikit_UIWindow:(window ? window : JAVA_NULL)];\n}\n\n"
    },
    "significantTimeChange(crossmobile.ios.uikit.UIApplication)": {
      "code": "- (void) applicationSignificantTimeChange:(UIApplication *) application\n{\n    [self significantTimeChange___crossmobile_ios_uikit_UIApplication:(application ? application : JAVA_NULL)];\n}\n\n"
    },
    "willChangeStatusBarFrame(crossmobile.ios.uikit.UIApplication,crossmobile.ios.coregraphics.CGRect)": {
      "code": "- (void) application:(UIApplication *) application willChangeStatusBarFrame:(CGRect) newStatusBarFrame\n{\n    crossmobile_ios_coregraphics_CGRect* newStatusBarFrame$conv = [[crossmobile_ios_coregraphics_CGRect alloc] initWithCGRect:newStatusBarFrame];\n    [self willChangeStatusBarFrame___crossmobile_ios_uikit_UIApplication_crossmobile_ios_coregraphics_CGRect:(application ? application : JAVA_NULL) :newStatusBarFrame$conv];\n    [newStatusBarFrame$conv release];\n}\n\n"
    },
    "willChangeStatusBarOrientation(crossmobile.ios.uikit.UIApplication,int,double)": {
      "code": "- (void) application:(UIApplication *) application willChangeStatusBarOrientation:(UIInterfaceOrientation) newStatusBarOrientation duration:(NSTimeInterval) duration\n{\n    [self willChangeStatusBarOrientation___crossmobile_ios_uikit_UIApplication_int_double:(application ? application : JAVA_NULL) :newStatusBarOrientation :duration];\n}\n\n"
    },
    "willEnterForeground(crossmobile.ios.uikit.UIApplication)": {
      "code": "- (void) applicationWillEnterForeground:(UIApplication *) application\n{\n    [self willEnterForeground___crossmobile_ios_uikit_UIApplication:(application ? application : JAVA_NULL)];\n}\n\n"
    },
    "willResignActive(crossmobile.ios.uikit.UIApplication)": {
      "code": "- (void) applicationWillResignActive:(UIApplication *) application\n{\n    [self willResignActive___crossmobile_ios_uikit_UIApplication:(application ? application : JAVA_NULL)];\n}\n\n"
    },
    "willTerminate(crossmobile.ios.uikit.UIApplication)": {
      "code": "- (void) applicationWillTerminate:(UIApplication *) application\n{\n    [self willTerminate___crossmobile_ios_uikit_UIApplication:(application ? application : JAVA_NULL)];\n}\n\n"
    },
    "window()": {
      "code": "- (UIWindow *) window\n{\n    UIWindow * re$ult = [self window__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIBarButtonItem": {
    "customView()": {
      "code": "- (UIView *) customView\n{\n    UIView * re$ult = [self customView__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "possibleTitles()": {
      "code": "- (NSSet<NSString *> *) possibleTitles\n{\n    NSSet<NSString *> * re$ult = [self possibleTitles__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "setCustomView(crossmobile.ios.uikit.UIView)": {
      "code": "- (void) setCustomView:(UIView *) customView\n{\n    [self setCustomView___crossmobile_ios_uikit_UIView:(customView ? customView : JAVA_NULL)];\n}\n\n"
    },
    "setPossibleTitles(java.util.Set)": {
      "code": "- (void) setPossibleTitles:(NSSet<NSString *> *) possibleTitles\n{\n    [self setPossibleTitles___java_util_Set:(possibleTitles ? possibleTitles : JAVA_NULL)];\n}\n\n"
    },
    "setStyle(int)": {
      "code": "- (void) setStyle:(UIBarButtonItemStyle) style\n{\n    [self setStyle___int:style];\n}\n\n"
    },
    "setTarget(java.lang.Runnable)": {
      "code": "- (void) setTarget:(id) target\n{\n    [self setTarget___java_lang_Runnable:(target ? target : JAVA_NULL)];\n}\n\n"
    },
    "setWidth(double)": {
      "code": "- (void) setWidth:(CGFloat) width\n{\n    [self setWidth___double:width];\n}\n\n"
    },
    "style()": {
      "code": "- (UIBarButtonItemStyle) style\n{\n    return [self style__];\n}\n\n"
    },
    "target()": {
      "code": "- (id) target\n{\n    id re$ult = [self target__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "width()": {
      "code": "- (CGFloat) width\n{\n    return [self width__];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIBarItem": {
    "image()": {
      "code": "- (UIImage *) image\n{\n    UIImage * re$ult = [self image__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "imageInsets()": {
      "code": "- (UIEdgeInsets) imageInsets\n{\n    crossmobile_ios_uikit_UIEdgeInsets* re$ult = [self imageInsets__];\n    UIEdgeInsets re$ult$conv = [re$ult getUIEdgeInsets];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
    },
    "isEnabled()": {
      "code": "- (BOOL) isEnabled\n{\n    return [self isEnabled__];\n}\n\n"
    },
    "setEnabled(boolean)": {
      "code": "- (void) setEnabled:(BOOL) enabled\n{\n    [self setEnabled___boolean:enabled];\n}\n\n"
    },
    "setImage(crossmobile.ios.uikit.UIImage)": {
      "code": "- (void) setImage:(UIImage *) image\n{\n    [self setImage___crossmobile_ios_uikit_UIImage:(image ? image : JAVA_NULL)];\n}\n\n"
    },
    "setImageInsets(crossmobile.ios.uikit.UIEdgeInsets)": {
      "code": "- (void) setImageInsets:(UIEdgeInsets) imageInsets\n{\n    crossmobile_ios_uikit_UIEdgeInsets* imageInsets$conv = [[crossmobile_ios_uikit_UIEdgeInsets alloc] initWithUIEdgeInsets:imageInsets];\n    [self setImageInsets___crossmobile_ios_uikit_UIEdgeInsets:imageInsets$conv];\n    [imageInsets$conv release];\n}\n\n"
    },
    "setTag(int)": {
      "code": "- (void) setTag:(NSInteger) tag\n{\n    [self setTag___int:tag];\n}\n\n"
    },
    "setTitle(java.lang.String)": {
      "code": "- (void) setTitle:(NSString *) title\n{\n    [self setTitle___java_lang_String:(title ? title : JAVA_NULL)];\n}\n\n"
    },
    "tag()": {
      "code": "- (NSInteger) tag\n{\n    return [self tag__];\n}\n\n"
    },
    "title()": {
      "code": "- (NSString *) title\n{\n    NSString * re$ult = [self title__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIButton": {
    "adjustsImageWhenDisabled()": {
      "code": "- (BOOL) adjustsImageWhenDisabled\n{\n    return [self adjustsImageWhenDisabled__];\n}\n\n"
    },
    "adjustsImageWhenHighlighted()": {
      "code": "- (BOOL) adjustsImageWhenHighlighted\n{\n    return [self adjustsImageWhenHighlighted__];\n}\n\n"
    },
    "backgroundImageForState(int)": {
      "code": "- (UIImage *) backgroundImageForState:(UIControlState) state\n{\n    UIImage * re$ult = [self backgroundImageForState___int:state];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "buttonType()": {
      "code": "- (UIButtonType) buttonType\n{\n    return [self buttonType__];\n}\n\n"
    },
    "contentEdgeInsets()": {
      "code": "- (UIEdgeInsets) contentEdgeInsets\n{\n    crossmobile_ios_uikit_UIEdgeInsets* re$ult = [self contentEdgeInsets__];\n    UIEdgeInsets re$ult$conv = [re$ult getUIEdgeInsets];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
    },
    "currentBackgroundImage()": {
      "code": "- (UIImage *) currentBackgroundImage\n{\n    UIImage * re$ult = [self currentBackgroundImage__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "currentImage()": {
      "code": "- (UIImage *) currentImage\n{\n    UIImage * re$ult = [self currentImage__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "currentTitle()": {
      "code": "- (NSString *) currentTitle\n{\n    NSString * re$ult = [self currentTitle__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "currentTitleColor()": {
      "code": "- (UIColor *) currentTitleColor\n{\n    UIColor * re$ult = [self currentTitleColor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "currentTitleShadowColor()": {
      "code": "- (UIColor *) currentTitleShadowColor\n{\n    UIColor * re$ult = [self currentTitleShadowColor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "imageEdgeInsets()": {
      "code": "- (UIEdgeInsets) imageEdgeInsets\n{\n    crossmobile_ios_uikit_UIEdgeInsets* re$ult = [self imageEdgeInsets__];\n    UIEdgeInsets re$ult$conv = [re$ult getUIEdgeInsets];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
    },
    "imageForState(int)": {
      "code": "- (UIImage *) imageForState:(UIControlState) state\n{\n    UIImage * re$ult = [self imageForState___int:state];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "imageView()": {
      "code": "- (UIImageView *) imageView\n{\n    UIImageView * re$ult = [self imageView__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "setAdjustsImageWhenDisabled(boolean)": {
      "code": "- (void) setAdjustsImageWhenDisabled:(BOOL) adjustsImageWhenDisabled\n{\n    [self setAdjustsImageWhenDisabled___boolean:adjustsImageWhenDisabled];\n}\n\n"
    },
    "setAdjustsImageWhenHighlighted(boolean)": {
      "code": "- (void) setAdjustsImageWhenHighlighted:(BOOL) adjustsImageWhenHighlighted\n{\n    [self setAdjustsImageWhenHighlighted___boolean:adjustsImageWhenHighlighted];\n}\n\n"
    },
    "setBackgroundImage(crossmobile.ios.uikit.UIImage,int)": {
      "code": "- (void) setBackgroundImage:(UIImage *) image forState:(UIControlState) state\n{\n    [self setBackgroundImage___crossmobile_ios_uikit_UIImage_int:(image ? image : JAVA_NULL) :state];\n}\n\n"
    },
    "setContentEdgeInsets(crossmobile.ios.uikit.UIEdgeInsets)": {
      "code": "- (void) setContentEdgeInsets:(UIEdgeInsets) contentEdgeInsets\n{\n    crossmobile_ios_uikit_UIEdgeInsets* contentEdgeInsets$conv = [[crossmobile_ios_uikit_UIEdgeInsets alloc] initWithUIEdgeInsets:contentEdgeInsets];\n    [self setContentEdgeInsets___crossmobile_ios_uikit_UIEdgeInsets:contentEdgeInsets$conv];\n    [contentEdgeInsets$conv release];\n}\n\n"
    },
    "setImage(crossmobile.ios.uikit.UIImage,int)": {
      "code": "- (void) setImage:(UIImage *) image forState:(UIControlState) state\n{\n    [self setImage___crossmobile_ios_uikit_UIImage_int:(image ? image : JAVA_NULL) :state];\n}\n\n"
    },
    "setImageEdgeInsets(crossmobile.ios.uikit.UIEdgeInsets)": {
      "code": "- (void) setImageEdgeInsets:(UIEdgeInsets) imageEdgeInsets\n{\n    crossmobile_ios_uikit_UIEdgeInsets* imageEdgeInsets$conv = [[crossmobile_ios_uikit_UIEdgeInsets alloc] initWithUIEdgeInsets:imageEdgeInsets];\n    [self setImageEdgeInsets___crossmobile_ios_uikit_UIEdgeInsets:imageEdgeInsets$conv];\n    [imageEdgeInsets$conv release];\n}\n\n"
    },
    "setShowsTouchWhenHighlighted(boolean)": {
      "code": "- (void) setShowsTouchWhenHighlighted:(BOOL) showsTouchWhenHighlighted\n{\n    [self setShowsTouchWhenHighlighted___boolean:showsTouchWhenHighlighted];\n}\n\n"
    },
    "setTitle(java.lang.String,int)": {
      "code": "- (void) setTitle:(NSString *) title forState:(UIControlState) state\n{\n    [self setTitle___java_lang_String_int:(title ? title : JAVA_NULL) :state];\n}\n\n"
    },
    "setTitleColor(crossmobile.ios.uikit.UIColor,int)": {
      "code": "- (void) setTitleColor:(UIColor *) color forState:(UIControlState) state\n{\n    [self setTitleColor___crossmobile_ios_uikit_UIColor_int:(color ? color : JAVA_NULL) :state];\n}\n\n"
    },
    "setTitleEdgeInsets(crossmobile.ios.uikit.UIEdgeInsets)": {
      "code": "- (void) setTitleEdgeInsets:(UIEdgeInsets) titleEdgeInsets\n{\n    crossmobile_ios_uikit_UIEdgeInsets* titleEdgeInsets$conv = [[crossmobile_ios_uikit_UIEdgeInsets alloc] initWithUIEdgeInsets:titleEdgeInsets];\n    [self setTitleEdgeInsets___crossmobile_ios_uikit_UIEdgeInsets:titleEdgeInsets$conv];\n    [titleEdgeInsets$conv release];\n}\n\n"
    },
    "setTitleShadowColor(crossmobile.ios.uikit.UIColor,int)": {
      "code": "- (void) setTitleShadowColor:(UIColor *) color forState:(UIControlState) state\n{\n    [self setTitleShadowColor___crossmobile_ios_uikit_UIColor_int:(color ? color : JAVA_NULL) :state];\n}\n\n"
    },
    "showsTouchWhenHighlighted()": {
      "code": "- (BOOL) showsTouchWhenHighlighted\n{\n    return [self showsTouchWhenHighlighted__];\n}\n\n"
    },
    "titleColorForState(int)": {
      "code": "- (UIColor *) titleColorForState:(UIControlState) state\n{\n    UIColor * re$ult = [self titleColorForState___int:state];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "titleEdgeInsets()": {
      "code": "- (UIEdgeInsets) titleEdgeInsets\n{\n    crossmobile_ios_uikit_UIEdgeInsets* re$ult = [self titleEdgeInsets__];\n    UIEdgeInsets re$ult$conv = [re$ult getUIEdgeInsets];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
    },
    "titleForState(int)": {
      "code": "- (NSString *) titleForState:(UIControlState) state\n{\n    NSString * re$ult = [self titleForState___int:state];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "titleLabel()": {
      "code": "- (UILabel *) titleLabel\n{\n    UILabel * re$ult = [self titleLabel__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "titleShadowColorForState(int)": {
      "code": "- (UIColor *) titleShadowColorForState:(UIControlState) state\n{\n    UIColor * re$ult = [self titleShadowColorForState___int:state];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIColor": {
    "CGColor()": {
      "code": "- (CGColorRef) CGColor\n{\n    crossmobile_ios_coregraphics_CGColor* re$ult = [self CGColor__];\n    [re$ult autorelease];\n    return re$ult->$reference;\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIControl": {
    "addTarget(crossmobile.ios.uikit.UIControlDelegate,int)": {
      "code": "- (void) addTarget:(id) target action:(SEL) action forControlEvents:(UIControlEvents) controlEvents\n{\n    [self addTarget___crossmobile_ios_uikit_UIControlDelegate_int:(target ? target : JAVA_NULL) :action :controlEvents];\n}\n\n"
    },
    "allTargets()": {
      "code": "- (NSSet *) allTargets\n{\n    NSSet * re$ult = [self allTargets__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "contentHorizontalAlignment()": {
      "code": "- (UIControlContentHorizontalAlignment) contentHorizontalAlignment\n{\n    return [self contentHorizontalAlignment__];\n}\n\n"
    },
    "contentVerticalAlignment()": {
      "code": "- (UIControlContentVerticalAlignment) contentVerticalAlignment\n{\n    return [self contentVerticalAlignment__];\n}\n\n"
    },
    "isEnabled()": {
      "code": "- (BOOL) isEnabled\n{\n    return [self isEnabled__];\n}\n\n"
    },
    "isHighlighted()": {
      "code": "- (BOOL) isHighlighted\n{\n    return [self isHighlighted__];\n}\n\n"
    },
    "isSelected()": {
      "code": "- (BOOL) isSelected\n{\n    return [self isSelected__];\n}\n\n"
    },
    "removeTarget(crossmobile.ios.uikit.UIControlDelegate,int)": {
      "code": "- (void) removeTarget:(id) target action:(SEL) action forControlEvents:(UIControlEvents) controlEvents\n{\n    [self removeTarget___crossmobile_ios_uikit_UIControlDelegate_int:(target ? target : JAVA_NULL) :action :controlEvents];\n}\n\n"
    },
    "sendActionsForControlEvents(int)": {
      "code": "- (void) sendActionsForControlEvents:(UIControlEvents) controlEvents\n{\n    [self sendActionsForControlEvents___int:controlEvents];\n}\n\n"
    },
    "setContentHorizontalAlignment(int)": {
      "code": "- (void) setContentHorizontalAlignment:(UIControlContentHorizontalAlignment) contentHorizontalAlignment\n{\n    [self setContentHorizontalAlignment___int:contentHorizontalAlignment];\n}\n\n"
    },
    "setContentVerticalAlignment(int)": {
      "code": "- (void) setContentVerticalAlignment:(UIControlContentVerticalAlignment) contentVerticalAlignment\n{\n    [self setContentVerticalAlignment___int:contentVerticalAlignment];\n}\n\n"
    },
    "setEnabled(boolean)": {
      "code": "- (void) setEnabled:(BOOL) enabled\n{\n    [self setEnabled___boolean:enabled];\n}\n\n"
    },
    "setHighlighted(boolean)": {
      "code": "- (void) setHighlighted:(BOOL) highlighted\n{\n    [self setHighlighted___boolean:highlighted];\n}\n\n"
    },
    "setSelected(boolean)": {
      "code": "- (void) setSelected:(BOOL) selected\n{\n    [self setSelected___boolean:selected];\n}\n\n"
    },
    "state()": {
      "code": "- (UIControlState) state\n{\n    return [self state__];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIDatePicker": {
    "calendar()": {
      "code": "- (NSCalendar *) calendar\n{\n    NSCalendar * re$ult = [self calendar__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "countDownDuration()": {
      "code": "- (NSTimeInterval) countDownDuration\n{\n    return [self countDownDuration__];\n}\n\n"
    },
    "date()": {
      "code": "- (NSDate *) date\n{\n    NSDate * re$ult = [self date__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "datePickerMode()": {
      "code": "- (UIDatePickerMode) datePickerMode\n{\n    return [self datePickerMode__];\n}\n\n"
    },
    "locale()": {
      "code": "- (NSLocale *) locale\n{\n    NSLocale * re$ult = [self locale__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "maximumDate()": {
      "code": "- (NSDate *) maximumDate\n{\n    NSDate * re$ult = [self maximumDate__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "minimumDate()": {
      "code": "- (NSDate *) minimumDate\n{\n    NSDate * re$ult = [self minimumDate__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "minuteInterval()": {
      "code": "- (NSInteger) minuteInterval\n{\n    return [self minuteInterval__];\n}\n\n"
    },
    "setCalendar(crossmobile.ios.foundation.NSCalendar)": {
      "code": "- (void) setCalendar:(NSCalendar *) calendar\n{\n    [self setCalendar___crossmobile_ios_foundation_NSCalendar:(calendar ? calendar : JAVA_NULL)];\n}\n\n"
    },
    "setCountDownDuration(double)": {
      "code": "- (void) setCountDownDuration:(NSTimeInterval) countDownDuration\n{\n    [self setCountDownDuration___double:countDownDuration];\n}\n\n"
    },
    "setDate(crossmobile.ios.foundation.NSDate)": {
      "code": "- (void) setDate:(NSDate *) date\n{\n    [self setDate___crossmobile_ios_foundation_NSDate:(date ? date : JAVA_NULL)];\n}\n\n"
    },
    "setDate(crossmobile.ios.foundation.NSDate,boolean)": {
      "code": "- (void) setDate:(NSDate *) date animated:(BOOL) animated\n{\n    [self setDate___crossmobile_ios_foundation_NSDate_boolean:(date ? date : JAVA_NULL) :animated];\n}\n\n"
    },
    "setDatePickerMode(int)": {
      "code": "- (void) setDatePickerMode:(UIDatePickerMode) datePickerMode\n{\n    [self setDatePickerMode___int:datePickerMode];\n}\n\n"
    },
    "setLocale(crossmobile.ios.foundation.NSLocale)": {
      "code": "- (void) setLocale:(NSLocale *) locale\n{\n    [self setLocale___crossmobile_ios_foundation_NSLocale:(locale ? locale : JAVA_NULL)];\n}\n\n"
    },
    "setMaximumDate(crossmobile.ios.foundation.NSDate)": {
      "code": "- (void) setMaximumDate:(NSDate *) maximumDate\n{\n    [self setMaximumDate___crossmobile_ios_foundation_NSDate:(maximumDate ? maximumDate : JAVA_NULL)];\n}\n\n"
    },
    "setMinimumDate(crossmobile.ios.foundation.NSDate)": {
      "code": "- (void) setMinimumDate:(NSDate *) minimumDate\n{\n    [self setMinimumDate___crossmobile_ios_foundation_NSDate:(minimumDate ? minimumDate : JAVA_NULL)];\n}\n\n"
    },
    "setMinuteInterval(int)": {
      "code": "- (void) setMinuteInterval:(NSInteger) minuteInterval\n{\n    [self setMinuteInterval___int:minuteInterval];\n}\n\n"
    },
    "setTimeZone(crossmobile.ios.foundation.NSTimeZone)": {
      "code": "- (void) setTimeZone:(NSTimeZone *) timeZone\n{\n    [self setTimeZone___crossmobile_ios_foundation_NSTimeZone:(timeZone ? timeZone : JAVA_NULL)];\n}\n\n"
    },
    "timeZone()": {
      "code": "- (NSTimeZone *) timeZone\n{\n    NSTimeZone * re$ult = [self timeZone__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIDevice": {
    "batteryLevel()": {
      "code": "- (float) batteryLevel\n{\n    return [self batteryLevel__];\n}\n\n"
    },
    "batteryState()": {
      "code": "- (UIDeviceBatteryState) batteryState\n{\n    return [self batteryState__];\n}\n\n"
    },
    "beginGeneratingDeviceOrientationNotifications()": {
      "code": "- (void) beginGeneratingDeviceOrientationNotifications\n{\n    [self beginGeneratingDeviceOrientationNotifications__];\n}\n\n"
    },
    "endGeneratingDeviceOrientationNotifications()": {
      "code": "- (void) endGeneratingDeviceOrientationNotifications\n{\n    [self endGeneratingDeviceOrientationNotifications__];\n}\n\n"
    },
    "identifierForVendor()": {
      "code": "- (NSUUID *) identifierForVendor\n{\n    NSUUID * re$ult = [self identifierForVendor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "isBatteryMonitoringEnabled()": {
      "code": "- (BOOL) isBatteryMonitoringEnabled\n{\n    return [self isBatteryMonitoringEnabled__];\n}\n\n"
    },
    "isGeneratingDeviceOrientationNotifications()": {
      "code": "- (BOOL) isGeneratingDeviceOrientationNotifications\n{\n    return [self isGeneratingDeviceOrientationNotifications__];\n}\n\n"
    },
    "isMultitaskingSupported()": {
      "code": "- (BOOL) isMultitaskingSupported\n{\n    return [self isMultitaskingSupported__];\n}\n\n"
    },
    "isProximityMonitoringEnabled()": {
      "code": "- (BOOL) isProximityMonitoringEnabled\n{\n    return [self isProximityMonitoringEnabled__];\n}\n\n"
    },
    "localizedModel()": {
      "code": "- (NSString *) localizedModel\n{\n    NSString * re$ult = [self localizedModel__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "model()": {
      "code": "- (NSString *) model\n{\n    NSString * re$ult = [self model__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "name()": {
      "code": "- (NSString *) name\n{\n    NSString * re$ult = [self name__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "orientation()": {
      "code": "- (UIDeviceOrientation) orientation\n{\n    return [self orientation__];\n}\n\n"
    },
    "proximityState()": {
      "code": "- (BOOL) proximityState\n{\n    return [self proximityState__];\n}\n\n"
    },
    "setBatteryMonitoringEnabled(boolean)": {
      "code": "- (void) setBatteryMonitoringEnabled:(BOOL) batteryMonitoringEnabled\n{\n    [self setBatteryMonitoringEnabled___boolean:batteryMonitoringEnabled];\n}\n\n"
    },
    "setProximityMonitoringEnabled(boolean)": {
      "code": "- (void) setProximityMonitoringEnabled:(BOOL) proximityMonitoringEnabled\n{\n    [self setProximityMonitoringEnabled___boolean:proximityMonitoringEnabled];\n}\n\n"
    },
    "systemName()": {
      "code": "- (NSString *) systemName\n{\n    NSString * re$ult = [self systemName__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "systemVersion()": {
      "code": "- (NSString *) systemVersion\n{\n    NSString * re$ult = [self systemVersion__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "userInterfaceIdiom()": {
      "code": "- (UIUserInterfaceIdiom) userInterfaceIdiom\n{\n    return [self userInterfaceIdiom__];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIEvent": {
    "allTouches()": {
      "code": "- (NSSet<UITouch *> *) allTouches\n{\n    NSSet<UITouch *> * re$ult = [self allTouches__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "subtype()": {
      "code": "- (UIEventSubtype) subtype\n{\n    return [self subtype__];\n}\n\n"
    },
    "timestamp()": {
      "code": "- (NSTimeInterval) timestamp\n{\n    return [self timestamp__];\n}\n\n"
    },
    "type()": {
      "code": "- (UIEventType) type\n{\n    return [self type__];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIFont": {
    "familyName()": {
      "code": "- (NSString *) familyName\n{\n    NSString * re$ult = [self familyName__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "fontName()": {
      "code": "- (NSString *) fontName\n{\n    NSString * re$ult = [self fontName__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "fontWithSize(double)": {
      "code": "- (UIFont *) fontWithSize:(CGFloat) fontSize\n{\n    UIFont * re$ult = [self fontWithSize___double:fontSize];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "pointSize()": {
      "code": "- (CGFloat) pointSize\n{\n    return [self pointSize__];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIGestureRecognizer": {
    "addTarget(crossmobile.ios.foundation.NSSelector)": {
      "code": "- (void) addTarget:(id) target action:(SEL) action\n{\n    [self addTarget___crossmobile_ios_foundation_NSSelector:(target ? target : JAVA_NULL) :action];\n}\n\n"
    },
    "canBePreventedByGestureRecognizer(crossmobile.ios.uikit.UIGestureRecognizer)": {
      "code": "- (BOOL) canBePreventedByGestureRecognizer:(UIGestureRecognizer *) preventingGestureRecognizer\n{\n    return [self canBePreventedByGestureRecognizer___crossmobile_ios_uikit_UIGestureRecognizer:(preventingGestureRecognizer ? preventingGestureRecognizer : JAVA_NULL)];\n}\n\n"
    },
    "canPreventGestureRecognizer(crossmobile.ios.uikit.UIGestureRecognizer)": {
      "code": "- (BOOL) canPreventGestureRecognizer:(UIGestureRecognizer *) preventedGestureRecognizer\n{\n    return [self canPreventGestureRecognizer___crossmobile_ios_uikit_UIGestureRecognizer:(preventedGestureRecognizer ? preventedGestureRecognizer : JAVA_NULL)];\n}\n\n"
    },
    "cancelsTouchesInView()": {
      "code": "- (BOOL) cancelsTouchesInView\n{\n    return [self cancelsTouchesInView__];\n}\n\n"
    },
    "delaysTouchesBegan()": {
      "code": "- (BOOL) delaysTouchesBegan\n{\n    return [self delaysTouchesBegan__];\n}\n\n"
    },
    "delaysTouchesEnded()": {
      "code": "- (BOOL) delaysTouchesEnded\n{\n    return [self delaysTouchesEnded__];\n}\n\n"
    },
    "delegate()": {
      "code": "- (id<UIGestureRecognizerDelegate>) delegate\n{\n    id<UIGestureRecognizerDelegate> re$ult = [self delegate__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "isEnabled()": {
      "code": "- (BOOL) isEnabled\n{\n    return [self isEnabled__];\n}\n\n"
    },
    "locationInView(crossmobile.ios.uikit.UIView)": {
      "code": "- (CGPoint) locationInView:(UIView *) view\n{\n    crossmobile_ios_coregraphics_CGPoint* re$ult = [self locationInView___crossmobile_ios_uikit_UIView:(view ? view : JAVA_NULL)];\n    CGPoint re$ult$conv = [re$ult getCGPoint];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
    },
    "locationOfTouch(int,crossmobile.ios.uikit.UIView)": {
      "code": "- (CGPoint) locationOfTouch:(NSUInteger) touchIndex inView:(UIView *) view\n{\n    crossmobile_ios_coregraphics_CGPoint* re$ult = [self locationOfTouch___int_crossmobile_ios_uikit_UIView:touchIndex :(view ? view : JAVA_NULL)];\n    CGPoint re$ult$conv = [re$ult getCGPoint];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
    },
    "numberOfTouches()": {
      "code": "- (NSUInteger) numberOfTouches\n{\n    return [self numberOfTouches__];\n}\n\n"
    },
    "removeTarget(crossmobile.ios.foundation.NSSelector)": {
      "code": "- (void) removeTarget:(id) target action:(SEL) action\n{\n    [self removeTarget___crossmobile_ios_foundation_NSSelector:(target ? target : JAVA_NULL) :action];\n}\n\n"
    },
    "requireGestureRecognizerToFail(crossmobile.ios.uikit.UIGestureRecognizer)": {
      "code": "- (void) requireGestureRecognizerToFail:(UIGestureRecognizer *) otherGestureRecognizer\n{\n    [self requireGestureRecognizerToFail___crossmobile_ios_uikit_UIGestureRecognizer:(otherGestureRecognizer ? otherGestureRecognizer : JAVA_NULL)];\n}\n\n"
    },
    "reset()": {
      "code": "- (void) reset\n{\n    [self reset__];\n}\n\n"
    },
    "setCancelsTouchesInView(boolean)": {
      "code": "- (void) setCancelsTouchesInView:(BOOL) cancelsTouchesInView\n{\n    [self setCancelsTouchesInView___boolean:cancelsTouchesInView];\n}\n\n"
    },
    "setDelaysTouchesBegan(boolean)": {
      "code": "- (void) setDelaysTouchesBegan:(BOOL) delaysTouchesBegan\n{\n    [self setDelaysTouchesBegan___boolean:delaysTouchesBegan];\n}\n\n"
    },
    "setDelaysTouchesEnded(boolean)": {
      "code": "- (void) setDelaysTouchesEnded:(BOOL) delaysTouchesEnded\n{\n    [self setDelaysTouchesEnded___boolean:delaysTouchesEnded];\n}\n\n"
    },
    "setDelegate(crossmobile.ios.uikit.UIGestureRecognizerDelegate)": {
      "code": "- (void) setDelegate:(id<UIGestureRecognizerDelegate>) delegate\n{\n    [self setDelegate___crossmobile_ios_uikit_UIGestureRecognizerDelegate:(delegate ? delegate : JAVA_NULL)];\n}\n\n"
    },
    "setEnabled(boolean)": {
      "code": "- (void) setEnabled:(BOOL) enabled\n{\n    [self setEnabled___boolean:enabled];\n}\n\n"
    },
    "state()": {
      "code": "- (UIGestureRecognizerState) state\n{\n    return [self state__];\n}\n\n"
    },
    "touchesBegan(java.util.Set,crossmobile.ios.uikit.UIEvent)": {
      "code": "- (void) touchesBegan:(NSSet<UITouch *> *) touches withEvent:(UIEvent *) event\n{\n    [self touchesBegan___java_util_Set_crossmobile_ios_uikit_UIEvent:(touches ? touches : JAVA_NULL) :(event ? event : JAVA_NULL)];\n}\n\n"
    },
    "touchesCancelled(java.util.Set,crossmobile.ios.uikit.UIEvent)": {
      "code": "- (void) touchesCancelled:(NSSet<UITouch *> *) touches withEvent:(UIEvent *) event\n{\n    [self touchesCancelled___java_util_Set_crossmobile_ios_uikit_UIEvent:(touches ? touches : JAVA_NULL) :(event ? event : JAVA_NULL)];\n}\n\n"
    },
    "touchesEnded(java.util.Set,crossmobile.ios.uikit.UIEvent)": {
      "code": "- (void) touchesEnded:(NSSet<UITouch *> *) touches withEvent:(UIEvent *) event\n{\n    [self touchesEnded___java_util_Set_crossmobile_ios_uikit_UIEvent:(touches ? touches : JAVA_NULL) :(event ? event : JAVA_NULL)];\n}\n\n"
    },
    "touchesMoved(java.util.Set,crossmobile.ios.uikit.UIEvent)": {
      "code": "- (void) touchesMoved:(NSSet<UITouch *> *) touches withEvent:(UIEvent *) event\n{\n    [self touchesMoved___java_util_Set_crossmobile_ios_uikit_UIEvent:(touches ? touches : JAVA_NULL) :(event ? event : JAVA_NULL)];\n}\n\n"
    },
    "view()": {
      "code": "- (UIView *) view\n{\n    UIView * re$ult = [self view__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIGestureRecognizerDelegate": {
    "shouldBegin(crossmobile.ios.uikit.UIGestureRecognizer)": {
      "code": "- (BOOL) gestureRecognizerShouldBegin:(UIGestureRecognizer *) gestureRecognizer\n{\n    return [self shouldBegin___crossmobile_ios_uikit_UIGestureRecognizer:(gestureRecognizer ? gestureRecognizer : JAVA_NULL)];\n}\n\n"
    },
    "shouldReceiveTouch(crossmobile.ios.uikit.UIGestureRecognizer,crossmobile.ios.uikit.UITouch)": {
      "code": "- (BOOL) gestureRecognizer:(UIGestureRecognizer *) gestureRecognizer shouldReceiveTouch:(UITouch *) touch\n{\n    return [self shouldReceiveTouch___crossmobile_ios_uikit_UIGestureRecognizer_crossmobile_ios_uikit_UITouch:(gestureRecognizer ? gestureRecognizer : JAVA_NULL) :(touch ? touch : JAVA_NULL)];\n}\n\n"
    },
    "shouldRecognizeSimultaneouslyWithGestureRecognizer(crossmobile.ios.uikit.UIGestureRecognizer,crossmobile.ios.uikit.UIGestureRecognizer)": {
      "code": "- (BOOL) gestureRecognizer:(UIGestureRecognizer *) gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *) otherGestureRecognizer\n{\n    return [self shouldRecognizeSimultaneouslyWithGestureRecognizer___crossmobile_ios_uikit_UIGestureRecognizer_crossmobile_ios_uikit_UIGestureRecognizer:(gestureRecognizer ? gestureRecognizer : JAVA_NULL) :(otherGestureRecognizer ? otherGestureRecognizer : JAVA_NULL)];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIImage": {
    "CGImage()": {
      "code": "- (CGImageRef) CGImage\n{\n    crossmobile_ios_coregraphics_CGImage* re$ult = [self CGImage__];\n    [re$ult autorelease];\n    return re$ult->$reference;\n}\n\n"
    },
    "drawAtPoint(crossmobile.ios.coregraphics.CGPoint)": {
      "code": "- (void) drawAtPoint:(CGPoint) point\n{\n    crossmobile_ios_coregraphics_CGPoint* point$conv = [[crossmobile_ios_coregraphics_CGPoint alloc] initWithCGPoint:point];\n    [self drawAtPoint___crossmobile_ios_coregraphics_CGPoint:point$conv];\n    [point$conv release];\n}\n\n"
    },
    "drawInRect(crossmobile.ios.coregraphics.CGRect)": {
      "code": "- (void) drawInRect:(CGRect) rect\n{\n    crossmobile_ios_coregraphics_CGRect* rect$conv = [[crossmobile_ios_coregraphics_CGRect alloc] initWithCGRect:rect];\n    [self drawInRect___crossmobile_ios_coregraphics_CGRect:rect$conv];\n    [rect$conv release];\n}\n\n"
    },
    "duration()": {
      "code": "- (NSTimeInterval) duration\n{\n    return [self duration__];\n}\n\n"
    },
    "imageOrientation()": {
      "code": "- (UIImageOrientation) imageOrientation\n{\n    return [self imageOrientation__];\n}\n\n"
    },
    "imageWithRenderingMode(int)": {
      "code": "- (UIImage *) imageWithRenderingMode:(UIImageRenderingMode) renderingMode\n{\n    UIImage * re$ult = [self imageWithRenderingMode___int:renderingMode];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "images()": {
      "code": "- (NSArray<UIImage *> *) images\n{\n    NSArray<UIImage *> * re$ult = [self images__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "renderingMode()": {
      "code": "- (UIImageRenderingMode) renderingMode\n{\n    return [self renderingMode__];\n}\n\n"
    },
    "resizableImageWithCapInsets(crossmobile.ios.uikit.UIEdgeInsets)": {
      "code": "- (UIImage *) resizableImageWithCapInsets:(UIEdgeInsets) capInsets\n{\n    crossmobile_ios_uikit_UIEdgeInsets* capInsets$conv = [[crossmobile_ios_uikit_UIEdgeInsets alloc] initWithUIEdgeInsets:capInsets];\n    UIImage * re$ult = [self resizableImageWithCapInsets___crossmobile_ios_uikit_UIEdgeInsets:capInsets$conv];\n    [capInsets$conv release];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "resizableImageWithCapInsets(crossmobile.ios.uikit.UIEdgeInsets,int)": {
      "code": "- (UIImage *) resizableImageWithCapInsets:(UIEdgeInsets) capInsets resizingMode:(UIImageResizingMode) resizingMode\n{\n    crossmobile_ios_uikit_UIEdgeInsets* capInsets$conv = [[crossmobile_ios_uikit_UIEdgeInsets alloc] initWithUIEdgeInsets:capInsets];\n    UIImage * re$ult = [self resizableImageWithCapInsets___crossmobile_ios_uikit_UIEdgeInsets_int:capInsets$conv :resizingMode];\n    [capInsets$conv release];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "scale()": {
      "code": "- (CGFloat) scale\n{\n    return [self scale__];\n}\n\n"
    },
    "size()": {
      "code": "- (CGSize) size\n{\n    crossmobile_ios_coregraphics_CGSize* re$ult = [self size__];\n    CGSize re$ult$conv = [re$ult getCGSize];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
    },
    "stretchableImageWithLeftCapWidth(int,int)": {
      "code": "- (UIImage *) stretchableImageWithLeftCapWidth:(NSInteger) leftCapWidth topCapHeight:(NSInteger) topCapHeight\n{\n    UIImage * re$ult = [self stretchableImageWithLeftCapWidth___int_int:leftCapWidth :topCapHeight];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIImageView": {
    "animationImages()": {
      "code": "- (NSArray<UIImage *> *) animationImages\n{\n    NSArray<UIImage *> * re$ult = [self animationImages__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "highlightedAnimationImages()": {
      "code": "- (NSArray<UIImage *> *) highlightedAnimationImages\n{\n    NSArray<UIImage *> * re$ult = [self highlightedAnimationImages__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "highlightedImage()": {
      "code": "- (UIImage *) highlightedImage\n{\n    UIImage * re$ult = [self highlightedImage__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "image()": {
      "code": "- (UIImage *) image\n{\n    UIImage * re$ult = [self image__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "isAnimating()": {
      "code": "- (BOOL) isAnimating\n{\n    return [self isAnimating__];\n}\n\n"
    },
    "isHighlighted()": {
      "code": "- (BOOL) isHighlighted\n{\n    return [self isHighlighted__];\n}\n\n"
    },
    "setAnimationImages(java.util.List)": {
      "code": "- (void) setAnimationImages:(NSArray<UIImage *> *) animationImages\n{\n    [self setAnimationImages___java_util_List:(animationImages ? animationImages : JAVA_NULL)];\n}\n\n"
    },
    "setHighlighted(boolean)": {
      "code": "- (void) setHighlighted:(BOOL) highlighted\n{\n    [self setHighlighted___boolean:highlighted];\n}\n\n"
    },
    "setHighlightedAnimationImages(java.util.List)": {
      "code": "- (void) setHighlightedAnimationImages:(NSArray<UIImage *> *) highlightedAnimationImages\n{\n    [self setHighlightedAnimationImages___java_util_List:(highlightedAnimationImages ? highlightedAnimationImages : JAVA_NULL)];\n}\n\n"
    },
    "setHighlightedImage(crossmobile.ios.uikit.UIImage)": {
      "code": "- (void) setHighlightedImage:(UIImage *) highlightedImage\n{\n    [self setHighlightedImage___crossmobile_ios_uikit_UIImage:(highlightedImage ? highlightedImage : JAVA_NULL)];\n}\n\n"
    },
    "setImage(crossmobile.ios.uikit.UIImage)": {
      "code": "- (void) setImage:(UIImage *) image\n{\n    [self setImage___crossmobile_ios_uikit_UIImage:(image ? image : JAVA_NULL)];\n}\n\n"
    },
    "startAnimating()": {
      "code": "- (void) startAnimating\n{\n    [self startAnimating__];\n}\n\n"
    },
    "stopAnimating()": {
      "code": "- (void) stopAnimating\n{\n    [self stopAnimating__];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UILabel": {
    "adjustsFontSizeToFitWidth()": {
      "code": "- (BOOL) adjustsFontSizeToFitWidth\n{\n    return [self adjustsFontSizeToFitWidth__];\n}\n\n"
    },
    "baselineAdjustment()": {
      "code": "- (UIBaselineAdjustment) baselineAdjustment\n{\n    return [self baselineAdjustment__];\n}\n\n"
    },
    "font()": {
      "code": "- (UIFont *) font\n{\n    UIFont * re$ult = [self font__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "highlightedTextColor()": {
      "code": "- (UIColor *) highlightedTextColor\n{\n    UIColor * re$ult = [self highlightedTextColor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "isHighlighted()": {
      "code": "- (BOOL) isHighlighted\n{\n    return [self isHighlighted__];\n}\n\n"
    },
    "lineBreakMode()": {
      "code": "- (NSLineBreakMode) lineBreakMode\n{\n    return [self lineBreakMode__];\n}\n\n"
    },
    "minimumScaleFactor()": {
      "code": "- (CGFloat) minimumScaleFactor\n{\n    return [self minimumScaleFactor__];\n}\n\n"
    },
    "numberOfLines()": {
      "code": "- (NSInteger) numberOfLines\n{\n    return [self numberOfLines__];\n}\n\n"
    },
    "preferredMaxLayoutWidth()": {
      "code": "- (CGFloat) preferredMaxLayoutWidth\n{\n    return [self preferredMaxLayoutWidth__];\n}\n\n"
    },
    "setAdjustsFontSizeToFitWidth(boolean)": {
      "code": "- (void) setAdjustsFontSizeToFitWidth:(BOOL) adjustsFontSizeToFitWidth\n{\n    [self setAdjustsFontSizeToFitWidth___boolean:adjustsFontSizeToFitWidth];\n}\n\n"
    },
    "setBaselineAdjustment(int)": {
      "code": "- (void) setBaselineAdjustment:(UIBaselineAdjustment) baselineAdjustment\n{\n    [self setBaselineAdjustment___int:baselineAdjustment];\n}\n\n"
    },
    "setFont(crossmobile.ios.uikit.UIFont)": {
      "code": "- (void) setFont:(UIFont *) font\n{\n    [self setFont___crossmobile_ios_uikit_UIFont:(font ? font : JAVA_NULL)];\n}\n\n"
    },
    "setHighlighted(boolean)": {
      "code": "- (void) setHighlighted:(BOOL) highlighted\n{\n    [self setHighlighted___boolean:highlighted];\n}\n\n"
    },
    "setHighlightedTextColor(crossmobile.ios.uikit.UIColor)": {
      "code": "- (void) setHighlightedTextColor:(UIColor *) highlightedTextColor\n{\n    [self setHighlightedTextColor___crossmobile_ios_uikit_UIColor:(highlightedTextColor ? highlightedTextColor : JAVA_NULL)];\n}\n\n"
    },
    "setLineBreakMode(int)": {
      "code": "- (void) setLineBreakMode:(NSLineBreakMode) lineBreakMode\n{\n    [self setLineBreakMode___int:lineBreakMode];\n}\n\n"
    },
    "setMinimumScaleFactor(double)": {
      "code": "- (void) setMinimumScaleFactor:(CGFloat) minimumScaleFactor\n{\n    [self setMinimumScaleFactor___double:minimumScaleFactor];\n}\n\n"
    },
    "setNumberOfLines(int)": {
      "code": "- (void) setNumberOfLines:(NSInteger) numberOfLines\n{\n    [self setNumberOfLines___int:numberOfLines];\n}\n\n"
    },
    "setPreferredMaxLayoutWidth(double)": {
      "code": "- (void) setPreferredMaxLayoutWidth:(CGFloat) preferredMaxLayoutWidth\n{\n    [self setPreferredMaxLayoutWidth___double:preferredMaxLayoutWidth];\n}\n\n"
    },
    "setShadowColor(crossmobile.ios.uikit.UIColor)": {
      "code": "- (void) setShadowColor:(UIColor *) shadowColor\n{\n    [self setShadowColor___crossmobile_ios_uikit_UIColor:(shadowColor ? shadowColor : JAVA_NULL)];\n}\n\n"
    },
    "setShadowOffset(crossmobile.ios.coregraphics.CGSize)": {
      "code": "- (void) setShadowOffset:(CGSize) shadowOffset\n{\n    crossmobile_ios_coregraphics_CGSize* shadowOffset$conv = [[crossmobile_ios_coregraphics_CGSize alloc] initWithCGSize:shadowOffset];\n    [self setShadowOffset___crossmobile_ios_coregraphics_CGSize:shadowOffset$conv];\n    [shadowOffset$conv release];\n}\n\n"
    },
    "setText(java.lang.String)": {
      "code": "- (void) setText:(NSString *) text\n{\n    [self setText___java_lang_String:(text ? text : JAVA_NULL)];\n}\n\n"
    },
    "setTextAlignment(int)": {
      "code": "- (void) setTextAlignment:(NSTextAlignment) textAlignment\n{\n    [self setTextAlignment___int:textAlignment];\n}\n\n"
    },
    "setTextColor(crossmobile.ios.uikit.UIColor)": {
      "code": "- (void) setTextColor:(UIColor *) textColor\n{\n    [self setTextColor___crossmobile_ios_uikit_UIColor:(textColor ? textColor : JAVA_NULL)];\n}\n\n"
    },
    "shadowColor()": {
      "code": "- (UIColor *) shadowColor\n{\n    UIColor * re$ult = [self shadowColor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "shadowOffset()": {
      "code": "- (CGSize) shadowOffset\n{\n    crossmobile_ios_coregraphics_CGSize* re$ult = [self shadowOffset__];\n    CGSize re$ult$conv = [re$ult getCGSize];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
    },
    "text()": {
      "code": "- (NSString *) text\n{\n    NSString * re$ult = [self text__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "textAlignment()": {
      "code": "- (NSTextAlignment) textAlignment\n{\n    return [self textAlignment__];\n}\n\n"
    },
    "textColor()": {
      "code": "- (UIColor *) textColor\n{\n    UIColor * re$ult = [self textColor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UILayoutGuide": {
    "bottomAnchor()": {
      "code": "- (NSLayoutYAxisAnchor *) bottomAnchor\n{\n    NSLayoutYAxisAnchor * re$ult = [self bottomAnchor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "centerXAnchor()": {
      "code": "- (NSLayoutXAxisAnchor *) centerXAnchor\n{\n    NSLayoutXAxisAnchor * re$ult = [self centerXAnchor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "centerYAnchor()": {
      "code": "- (NSLayoutYAxisAnchor *) centerYAnchor\n{\n    NSLayoutYAxisAnchor * re$ult = [self centerYAnchor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "heightAnchor()": {
      "code": "- (NSLayoutDimension *) heightAnchor\n{\n    NSLayoutDimension * re$ult = [self heightAnchor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "identifier()": {
      "code": "- (NSString *) identifier\n{\n    NSString * re$ult = [self identifier__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "layoutFrame()": {
      "code": "- (CGRect) layoutFrame\n{\n    crossmobile_ios_coregraphics_CGRect* re$ult = [self layoutFrame__];\n    CGRect re$ult$conv = [re$ult getCGRect];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
    },
    "leadingAnchor()": {
      "code": "- (NSLayoutXAxisAnchor *) leadingAnchor\n{\n    NSLayoutXAxisAnchor * re$ult = [self leadingAnchor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "leftAnchor()": {
      "code": "- (NSLayoutXAxisAnchor *) leftAnchor\n{\n    NSLayoutXAxisAnchor * re$ult = [self leftAnchor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "owningView()": {
      "code": "- (UIView *) owningView\n{\n    UIView * re$ult = [self owningView__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "rightAnchor()": {
      "code": "- (NSLayoutXAxisAnchor *) rightAnchor\n{\n    NSLayoutXAxisAnchor * re$ult = [self rightAnchor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "setIdentifier(java.lang.String)": {
      "code": "- (void) setIdentifier:(NSString *) identifier\n{\n    [self setIdentifier___java_lang_String:(identifier ? identifier : JAVA_NULL)];\n}\n\n"
    },
    "setOwningView(crossmobile.ios.uikit.UIView)": {
      "code": "- (void) setOwningView:(UIView *) owningView\n{\n    [self setOwningView___crossmobile_ios_uikit_UIView:(owningView ? owningView : JAVA_NULL)];\n}\n\n"
    },
    "topAnchor()": {
      "code": "- (NSLayoutYAxisAnchor *) topAnchor\n{\n    NSLayoutYAxisAnchor * re$ult = [self topAnchor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "trailingAnchor()": {
      "code": "- (NSLayoutXAxisAnchor *) trailingAnchor\n{\n    NSLayoutXAxisAnchor * re$ult = [self trailingAnchor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "widthAnchor()": {
      "code": "- (NSLayoutDimension *) widthAnchor\n{\n    NSLayoutDimension * re$ult = [self widthAnchor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UILayoutSupport": {
    "bottomAnchor()": {
      "code": "- (NSLayoutYAxisAnchor *) bottomAnchor\n{\n    NSLayoutYAxisAnchor * re$ult = [self bottomAnchor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "heightAnchor()": {
      "code": "- (NSLayoutDimension *) heightAnchor\n{\n    NSLayoutDimension * re$ult = [self heightAnchor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "length()": {
      "code": "- (CGFloat) length\n{\n    return [self length__];\n}\n\n"
    },
    "topAnchor()": {
      "code": "- (NSLayoutYAxisAnchor *) topAnchor\n{\n    NSLayoutYAxisAnchor * re$ult = [self topAnchor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UILocalNotification": {
    "alertAction()": {
      "code": "- (NSString *) alertAction\n{\n    NSString * re$ult = [self alertAction__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "alertBody()": {
      "code": "- (NSString *) alertBody\n{\n    NSString * re$ult = [self alertBody__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "alertLaunchImage()": {
      "code": "- (NSString *) alertLaunchImage\n{\n    NSString * re$ult = [self alertLaunchImage__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "applicationIconBadgeNumber()": {
      "code": "- (NSInteger) applicationIconBadgeNumber\n{\n    return [self applicationIconBadgeNumber__];\n}\n\n"
    },
    "fireDate()": {
      "code": "- (NSDate *) fireDate\n{\n    NSDate * re$ult = [self fireDate__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "hasAction()": {
      "code": "- (BOOL) hasAction\n{\n    return [self hasAction__];\n}\n\n"
    },
    "repeatCalendar()": {
      "code": "- (NSCalendar *) repeatCalendar\n{\n    NSCalendar * re$ult = [self repeatCalendar__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "repeatInterval()": {
      "code": "- (NSCalendarUnit) repeatInterval\n{\n    return [self repeatInterval__];\n}\n\n"
    },
    "setAlertAction(java.lang.String)": {
      "code": "- (void) setAlertAction:(NSString *) alertAction\n{\n    [self setAlertAction___java_lang_String:(alertAction ? alertAction : JAVA_NULL)];\n}\n\n"
    },
    "setAlertBody(java.lang.String)": {
      "code": "- (void) setAlertBody:(NSString *) alertBody\n{\n    [self setAlertBody___java_lang_String:(alertBody ? alertBody : JAVA_NULL)];\n}\n\n"
    },
    "setAlertLaunchImage(java.lang.String)": {
      "code": "- (void) setAlertLaunchImage:(NSString *) alertLaunchImage\n{\n    [self setAlertLaunchImage___java_lang_String:(alertLaunchImage ? alertLaunchImage : JAVA_NULL)];\n}\n\n"
    },
    "setApplicationIconBadgeNumber(int)": {
      "code": "- (void) setApplicationIconBadgeNumber:(NSInteger) applicationIconBadgeNumber\n{\n    [self setApplicationIconBadgeNumber___int:applicationIconBadgeNumber];\n}\n\n"
    },
    "setFireDate(crossmobile.ios.foundation.NSDate)": {
      "code": "- (void) setFireDate:(NSDate *) fireDate\n{\n    [self setFireDate___crossmobile_ios_foundation_NSDate:(fireDate ? fireDate : JAVA_NULL)];\n}\n\n"
    },
    "setHasAction(boolean)": {
      "code": "- (void) setHasAction:(BOOL) hasAction\n{\n    [self setHasAction___boolean:hasAction];\n}\n\n"
    },
    "setRepeatCalendar(crossmobile.ios.foundation.NSCalendar)": {
      "code": "- (void) setRepeatCalendar:(NSCalendar *) repeatCalendar\n{\n    [self setRepeatCalendar___crossmobile_ios_foundation_NSCalendar:(repeatCalendar ? repeatCalendar : JAVA_NULL)];\n}\n\n"
    },
    "setRepeatInterval(int)": {
      "code": "- (void) setRepeatInterval:(NSCalendarUnit) repeatInterval\n{\n    [self setRepeatInterval___int:repeatInterval];\n}\n\n"
    },
    "setSoundName(java.lang.String)": {
      "code": "- (void) setSoundName:(NSString *) soundName\n{\n    [self setSoundName___java_lang_String:(soundName ? soundName : JAVA_NULL)];\n}\n\n"
    },
    "setTimeZone(crossmobile.ios.foundation.NSTimeZone)": {
      "code": "- (void) setTimeZone:(NSTimeZone *) timeZone\n{\n    [self setTimeZone___crossmobile_ios_foundation_NSTimeZone:(timeZone ? timeZone : JAVA_NULL)];\n}\n\n"
    },
    "setUserInfo(java.util.Map)": {
      "code": "- (void) setUserInfo:(NSDictionary *) userInfo\n{\n    [self setUserInfo___java_util_Map:(userInfo ? userInfo : JAVA_NULL)];\n}\n\n"
    },
    "soundName()": {
      "code": "- (NSString *) soundName\n{\n    NSString * re$ult = [self soundName__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "timeZone()": {
      "code": "- (NSTimeZone *) timeZone\n{\n    NSTimeZone * re$ult = [self timeZone__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "userInfo()": {
      "code": "- (NSDictionary *) userInfo\n{\n    NSDictionary * re$ult = [self userInfo__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UILongPressGestureRecognizer": {
    "allowableMovement()": {
      "code": "- (CGFloat) allowableMovement\n{\n    return [self allowableMovement__];\n}\n\n"
    },
    "minimumPressDuration()": {
      "code": "- (CFTimeInterval) minimumPressDuration\n{\n    return [self minimumPressDuration__];\n}\n\n"
    },
    "numberOfTapsRequired()": {
      "code": "- (NSUInteger) numberOfTapsRequired\n{\n    return [self numberOfTapsRequired__];\n}\n\n"
    },
    "numberOfTouchesRequired()": {
      "code": "- (NSUInteger) numberOfTouchesRequired\n{\n    return [self numberOfTouchesRequired__];\n}\n\n"
    },
    "setAllowableMovement(double)": {
      "code": "- (void) setAllowableMovement:(CGFloat) allowableMovement\n{\n    [self setAllowableMovement___double:allowableMovement];\n}\n\n"
    },
    "setMinimumPressDuration(double)": {
      "code": "- (void) setMinimumPressDuration:(CFTimeInterval) minimumPressDuration\n{\n    [self setMinimumPressDuration___double:minimumPressDuration];\n}\n\n"
    },
    "setNumberOfTapsRequired(int)": {
      "code": "- (void) setNumberOfTapsRequired:(NSUInteger) numberOfTapsRequired\n{\n    [self setNumberOfTapsRequired___int:numberOfTapsRequired];\n}\n\n"
    },
    "setNumberOfTouchesRequired(int)": {
      "code": "- (void) setNumberOfTouchesRequired:(NSUInteger) numberOfTouchesRequired\n{\n    [self setNumberOfTouchesRequired___int:numberOfTouchesRequired];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UINavigationBar": {
    "backItem()": {
      "code": "- (UINavigationItem *) backItem\n{\n    UINavigationItem * re$ult = [self backItem__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "barStyle()": {
      "code": "- (UIBarStyle) barStyle\n{\n    return [self barStyle__];\n}\n\n"
    },
    "barTintColor()": {
      "code": "- (UIColor *) barTintColor\n{\n    UIColor * re$ult = [self barTintColor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "delegate()": {
      "code": "- (id<UINavigationBarDelegate>) delegate\n{\n    id<UINavigationBarDelegate> re$ult = [self delegate__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "isTranslucent()": {
      "code": "- (BOOL) isTranslucent\n{\n    return [self isTranslucent__];\n}\n\n"
    },
    "items()": {
      "code": "- (NSArray<UINavigationItem *> *) items\n{\n    NSArray<UINavigationItem *> * re$ult = [self items__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "popNavigationItemAnimated(boolean)": {
      "code": "- (UINavigationItem *) popNavigationItemAnimated:(BOOL) animated\n{\n    UINavigationItem * re$ult = [self popNavigationItemAnimated___boolean:animated];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "pushNavigationItem(crossmobile.ios.uikit.UINavigationItem,boolean)": {
      "code": "- (void) pushNavigationItem:(UINavigationItem *) item animated:(BOOL) animated\n{\n    [self pushNavigationItem___crossmobile_ios_uikit_UINavigationItem_boolean:(item ? item : JAVA_NULL) :animated];\n}\n\n"
    },
    "setBarStyle(int)": {
      "code": "- (void) setBarStyle:(UIBarStyle) barStyle\n{\n    [self setBarStyle___int:barStyle];\n}\n\n"
    },
    "setBarTintColor(crossmobile.ios.uikit.UIColor)": {
      "code": "- (void) setBarTintColor:(UIColor *) barTintColor\n{\n    [self setBarTintColor___crossmobile_ios_uikit_UIColor:(barTintColor ? barTintColor : JAVA_NULL)];\n}\n\n"
    },
    "setDelegate(crossmobile.ios.uikit.UINavigationBarDelegate)": {
      "code": "- (void) setDelegate:(id<UINavigationBarDelegate>) delegate\n{\n    [self setDelegate___crossmobile_ios_uikit_UINavigationBarDelegate:(delegate ? delegate : JAVA_NULL)];\n}\n\n"
    },
    "setItems(java.util.List)": {
      "code": "- (void) setItems:(NSArray<UINavigationItem *> *) items\n{\n    [self setItems___java_util_List:(items ? items : JAVA_NULL)];\n}\n\n"
    },
    "setItems(java.util.List,boolean)": {
      "code": "- (void) setItems:(NSArray<UINavigationItem *> *) items animated:(BOOL) animated\n{\n    [self setItems___java_util_List_boolean:(items ? items : JAVA_NULL) :animated];\n}\n\n"
    },
    "setTitleTextAttributes(java.util.Map)": {
      "code": "- (void) setTitleTextAttributes:(NSDictionary<NSString *,id> *) titleTextAttributes\n{\n    [self setTitleTextAttributes___java_util_Map:(titleTextAttributes ? titleTextAttributes : JAVA_NULL)];\n}\n\n"
    },
    "setTranslucent(boolean)": {
      "code": "- (void) setTranslucent:(BOOL) translucent\n{\n    [self setTranslucent___boolean:translucent];\n}\n\n"
    },
    "titleTextAttributes()": {
      "code": "- (NSDictionary<NSString *,id> *) titleTextAttributes\n{\n    NSDictionary<NSString *,id> * re$ult = [self titleTextAttributes__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "topItem()": {
      "code": "- (UINavigationItem *) topItem\n{\n    UINavigationItem * re$ult = [self topItem__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UINavigationBarDelegate": {
    "didPopItem(crossmobile.ios.uikit.UINavigationBar,crossmobile.ios.uikit.UINavigationItem)": {
      "code": "- (void) navigationBar:(UINavigationBar *) navigationBar didPopItem:(UINavigationItem *) item\n{\n    [self didPopItem___crossmobile_ios_uikit_UINavigationBar_crossmobile_ios_uikit_UINavigationItem:(navigationBar ? navigationBar : JAVA_NULL) :(item ? item : JAVA_NULL)];\n}\n\n"
    },
    "didPushItem(crossmobile.ios.uikit.UINavigationBar,crossmobile.ios.uikit.UINavigationItem)": {
      "code": "- (void) navigationBar:(UINavigationBar *) navigationBar didPushItem:(UINavigationItem *) item\n{\n    [self didPushItem___crossmobile_ios_uikit_UINavigationBar_crossmobile_ios_uikit_UINavigationItem:(navigationBar ? navigationBar : JAVA_NULL) :(item ? item : JAVA_NULL)];\n}\n\n"
    },
    "shouldPopItem(crossmobile.ios.uikit.UINavigationBar,crossmobile.ios.uikit.UINavigationItem)": {
      "code": "- (BOOL) navigationBar:(UINavigationBar *) navigationBar shouldPopItem:(UINavigationItem *) item\n{\n    return [self shouldPopItem___crossmobile_ios_uikit_UINavigationBar_crossmobile_ios_uikit_UINavigationItem:(navigationBar ? navigationBar : JAVA_NULL) :(item ? item : JAVA_NULL)];\n}\n\n"
    },
    "shouldPushItem(crossmobile.ios.uikit.UINavigationBar,crossmobile.ios.uikit.UINavigationItem)": {
      "code": "- (BOOL) navigationBar:(UINavigationBar *) navigationBar shouldPushItem:(UINavigationItem *) item\n{\n    return [self shouldPushItem___crossmobile_ios_uikit_UINavigationBar_crossmobile_ios_uikit_UINavigationItem:(navigationBar ? navigationBar : JAVA_NULL) :(item ? item : JAVA_NULL)];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UINavigationController": {
    "delegate()": {
      "code": "- (id<UINavigationControllerDelegate>) delegate\n{\n    id<UINavigationControllerDelegate> re$ult = [self delegate__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "isNavigationBarHidden()": {
      "code": "- (BOOL) isNavigationBarHidden\n{\n    return [self isNavigationBarHidden__];\n}\n\n"
    },
    "isToolbarHidden()": {
      "code": "- (BOOL) isToolbarHidden\n{\n    return [self isToolbarHidden__];\n}\n\n"
    },
    "navigationBar()": {
      "code": "- (UINavigationBar *) navigationBar\n{\n    UINavigationBar * re$ult = [self navigationBar__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "popToRootViewControllerAnimated(boolean)": {
      "code": "- (NSArray<__kindof UIViewController *> *) popToRootViewControllerAnimated:(BOOL) animated\n{\n    NSArray<__kindof UIViewController *> * re$ult = [self popToRootViewControllerAnimated___boolean:animated];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "popToViewController(crossmobile.ios.uikit.UIViewController,boolean)": {
      "code": "- (NSArray<__kindof UIViewController *> *) popToViewController:(UIViewController *) viewController animated:(BOOL) animated\n{\n    NSArray<__kindof UIViewController *> * re$ult = [self popToViewController___crossmobile_ios_uikit_UIViewController_boolean:(viewController ? viewController : JAVA_NULL) :animated];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "popViewControllerAnimated(boolean)": {
      "code": "- (UIViewController *) popViewControllerAnimated:(BOOL) animated\n{\n    UIViewController * re$ult = [self popViewControllerAnimated___boolean:animated];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "pushViewController(crossmobile.ios.uikit.UIViewController,boolean)": {
      "code": "- (void) pushViewController:(UIViewController *) viewController animated:(BOOL) animated\n{\n    [self pushViewController___crossmobile_ios_uikit_UIViewController_boolean:(viewController ? viewController : JAVA_NULL) :animated];\n}\n\n"
    },
    "setDelegate(crossmobile.ios.uikit.UINavigationControllerDelegate)": {
      "code": "- (void) setDelegate:(id<UINavigationControllerDelegate>) delegate\n{\n    [self setDelegate___crossmobile_ios_uikit_UINavigationControllerDelegate:(delegate ? delegate : JAVA_NULL)];\n}\n\n"
    },
    "setNavigationBarHidden(boolean)": {
      "code": "- (void) setNavigationBarHidden:(BOOL) navigationBarHidden\n{\n    [self setNavigationBarHidden___boolean:navigationBarHidden];\n}\n\n"
    },
    "setNavigationBarHidden(boolean,boolean)": {
      "code": "- (void) setNavigationBarHidden:(BOOL) hidden animated:(BOOL) animated\n{\n    [self setNavigationBarHidden___boolean_boolean:hidden :animated];\n}\n\n"
    },
    "setToolbarHidden(boolean)": {
      "code": "- (void) setToolbarHidden:(BOOL) toolbarHidden\n{\n    [self setToolbarHidden___boolean:toolbarHidden];\n}\n\n"
    },
    "setToolbarHidden(boolean,boolean)": {
      "code": "- (void) setToolbarHidden:(BOOL) hidden animated:(BOOL) animated\n{\n    [self setToolbarHidden___boolean_boolean:hidden :animated];\n}\n\n"
    },
    "setViewControllers(java.util.List)": {
      "code": "- (void) setViewControllers:(NSArray<__kindof UIViewController *> *) viewControllers\n{\n    [self setViewControllers___java_util_List:(viewControllers ? viewControllers : JAVA_NULL)];\n}\n\n"
    },
    "setViewControllers(java.util.List,boolean)": {
      "code": "- (void) setViewControllers:(NSArray<UIViewController *> *) viewControllers animated:(BOOL) animated\n{\n    [self setViewControllers___java_util_List_boolean:(viewControllers ? viewControllers : JAVA_NULL) :animated];\n}\n\n"
    },
    "toolbar()": {
      "code": "- (UIToolbar *) toolbar\n{\n    UIToolbar * re$ult = [self toolbar__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "topViewController()": {
      "code": "- (UIViewController *) topViewController\n{\n    UIViewController * re$ult = [self topViewController__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "viewControllers()": {
      "code": "- (NSArray<__kindof UIViewController *> *) viewControllers\n{\n    NSArray<__kindof UIViewController *> * re$ult = [self viewControllers__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "visibleViewController()": {
      "code": "- (UIViewController *) visibleViewController\n{\n    UIViewController * re$ult = [self visibleViewController__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UINavigationControllerDelegate": {
    "didShowViewController(crossmobile.ios.uikit.UINavigationController,crossmobile.ios.uikit.UIViewController,boolean)": {
      "code": "- (void) navigationController:(UINavigationController *) navigationController didShowViewController:(UIViewController *) viewController animated:(BOOL) animated\n{\n    [self didShowViewController___crossmobile_ios_uikit_UINavigationController_crossmobile_ios_uikit_UIViewController_boolean:(navigationController ? navigationController : JAVA_NULL) :(viewController ? viewController : JAVA_NULL) :animated];\n}\n\n"
    },
    "willShowViewController(crossmobile.ios.uikit.UINavigationController,crossmobile.ios.uikit.UIViewController,boolean)": {
      "code": "- (void) navigationController:(UINavigationController *) navigationController willShowViewController:(UIViewController *) viewController animated:(BOOL) animated\n{\n    [self willShowViewController___crossmobile_ios_uikit_UINavigationController_crossmobile_ios_uikit_UIViewController_boolean:(navigationController ? navigationController : JAVA_NULL) :(viewController ? viewController : JAVA_NULL) :animated];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UINavigationItem": {
    "backBarButtonItem()": {
      "code": "- (UIBarButtonItem *) backBarButtonItem\n{\n    UIBarButtonItem * re$ult = [self backBarButtonItem__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "hidesBackButton()": {
      "code": "- (BOOL) hidesBackButton\n{\n    return [self hidesBackButton__];\n}\n\n"
    },
    "leftBarButtonItem()": {
      "code": "- (UIBarButtonItem *) leftBarButtonItem\n{\n    UIBarButtonItem * re$ult = [self leftBarButtonItem__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "prompt()": {
      "code": "- (NSString *) prompt\n{\n    NSString * re$ult = [self prompt__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "rightBarButtonItem()": {
      "code": "- (UIBarButtonItem *) rightBarButtonItem\n{\n    UIBarButtonItem * re$ult = [self rightBarButtonItem__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "setBackBarButtonItem(crossmobile.ios.uikit.UIBarButtonItem)": {
      "code": "- (void) setBackBarButtonItem:(UIBarButtonItem *) backBarButtonItem\n{\n    [self setBackBarButtonItem___crossmobile_ios_uikit_UIBarButtonItem:(backBarButtonItem ? backBarButtonItem : JAVA_NULL)];\n}\n\n"
    },
    "setHidesBackButton(boolean)": {
      "code": "- (void) setHidesBackButton:(BOOL) hidesBackButton\n{\n    [self setHidesBackButton___boolean:hidesBackButton];\n}\n\n"
    },
    "setHidesBackButton(boolean,boolean)": {
      "code": "- (void) setHidesBackButton:(BOOL) hidesBackButton animated:(BOOL) animated\n{\n    [self setHidesBackButton___boolean_boolean:hidesBackButton :animated];\n}\n\n"
    },
    "setLeftBarButtonItem(crossmobile.ios.uikit.UIBarButtonItem)": {
      "code": "- (void) setLeftBarButtonItem:(UIBarButtonItem *) leftBarButtonItem\n{\n    [self setLeftBarButtonItem___crossmobile_ios_uikit_UIBarButtonItem:(leftBarButtonItem ? leftBarButtonItem : JAVA_NULL)];\n}\n\n"
    },
    "setLeftBarButtonItem(crossmobile.ios.uikit.UIBarButtonItem,boolean)": {
      "code": "- (void) setLeftBarButtonItem:(UIBarButtonItem *) item animated:(BOOL) animated\n{\n    [self setLeftBarButtonItem___crossmobile_ios_uikit_UIBarButtonItem_boolean:(item ? item : JAVA_NULL) :animated];\n}\n\n"
    },
    "setPrompt(java.lang.String)": {
      "code": "- (void) setPrompt:(NSString *) prompt\n{\n    [self setPrompt___java_lang_String:(prompt ? prompt : JAVA_NULL)];\n}\n\n"
    },
    "setRightBarButtonItem(crossmobile.ios.uikit.UIBarButtonItem)": {
      "code": "- (void) setRightBarButtonItem:(UIBarButtonItem *) rightBarButtonItem\n{\n    [self setRightBarButtonItem___crossmobile_ios_uikit_UIBarButtonItem:(rightBarButtonItem ? rightBarButtonItem : JAVA_NULL)];\n}\n\n"
    },
    "setRightBarButtonItem(crossmobile.ios.uikit.UIBarButtonItem,boolean)": {
      "code": "- (void) setRightBarButtonItem:(UIBarButtonItem *) item animated:(BOOL) animated\n{\n    [self setRightBarButtonItem___crossmobile_ios_uikit_UIBarButtonItem_boolean:(item ? item : JAVA_NULL) :animated];\n}\n\n"
    },
    "setTitle(java.lang.String)": {
      "code": "- (void) setTitle:(NSString *) title\n{\n    [self setTitle___java_lang_String:(title ? title : JAVA_NULL)];\n}\n\n"
    },
    "setTitleView(crossmobile.ios.uikit.UIView)": {
      "code": "- (void) setTitleView:(UIView *) titleView\n{\n    [self setTitleView___crossmobile_ios_uikit_UIView:(titleView ? titleView : JAVA_NULL)];\n}\n\n"
    },
    "title()": {
      "code": "- (NSString *) title\n{\n    NSString * re$ult = [self title__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "titleView()": {
      "code": "- (UIView *) titleView\n{\n    UIView * re$ult = [self titleView__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UINib": {
    "instantiateWithOwner(crossmobile.ios.foundation.NSObject,java.util.Map)": {
      "code": "- (NSArray *) instantiateWithOwner:(id) ownerOrNil options:(NSDictionary *) optionsOrNil\n{\n    NSArray * re$ult = [self instantiateWithOwner___crossmobile_ios_foundation_NSObject_java_util_Map:(ownerOrNil ? ownerOrNil : JAVA_NULL) :(optionsOrNil ? optionsOrNil : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIPageControl": {
    "currentPage()": {
      "code": "- (NSInteger) currentPage\n{\n    return [self currentPage__];\n}\n\n"
    },
    "currentPageIndicatorTintColor()": {
      "code": "- (UIColor *) currentPageIndicatorTintColor\n{\n    UIColor * re$ult = [self currentPageIndicatorTintColor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "defersCurrentPageDisplay()": {
      "code": "- (BOOL) defersCurrentPageDisplay\n{\n    return [self defersCurrentPageDisplay__];\n}\n\n"
    },
    "hidesForSinglePage()": {
      "code": "- (BOOL) hidesForSinglePage\n{\n    return [self hidesForSinglePage__];\n}\n\n"
    },
    "numberOfPages()": {
      "code": "- (NSInteger) numberOfPages\n{\n    return [self numberOfPages__];\n}\n\n"
    },
    "pageIndicatorTintColor()": {
      "code": "- (UIColor *) pageIndicatorTintColor\n{\n    UIColor * re$ult = [self pageIndicatorTintColor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "setCurrentPage(int)": {
      "code": "- (void) setCurrentPage:(NSInteger) currentPage\n{\n    [self setCurrentPage___int:currentPage];\n}\n\n"
    },
    "setCurrentPageIndicatorTintColor(crossmobile.ios.uikit.UIColor)": {
      "code": "- (void) setCurrentPageIndicatorTintColor:(UIColor *) currentPageIndicatorTintColor\n{\n    [self setCurrentPageIndicatorTintColor___crossmobile_ios_uikit_UIColor:(currentPageIndicatorTintColor ? currentPageIndicatorTintColor : JAVA_NULL)];\n}\n\n"
    },
    "setDefersCurrentPageDisplay(boolean)": {
      "code": "- (void) setDefersCurrentPageDisplay:(BOOL) defersCurrentPageDisplay\n{\n    [self setDefersCurrentPageDisplay___boolean:defersCurrentPageDisplay];\n}\n\n"
    },
    "setHidesForSinglePage(boolean)": {
      "code": "- (void) setHidesForSinglePage:(BOOL) hidesForSinglePage\n{\n    [self setHidesForSinglePage___boolean:hidesForSinglePage];\n}\n\n"
    },
    "setNumberOfPages(int)": {
      "code": "- (void) setNumberOfPages:(NSInteger) numberOfPages\n{\n    [self setNumberOfPages___int:numberOfPages];\n}\n\n"
    },
    "setPageIndicatorTintColor(crossmobile.ios.uikit.UIColor)": {
      "code": "- (void) setPageIndicatorTintColor:(UIColor *) pageIndicatorTintColor\n{\n    [self setPageIndicatorTintColor___crossmobile_ios_uikit_UIColor:(pageIndicatorTintColor ? pageIndicatorTintColor : JAVA_NULL)];\n}\n\n"
    },
    "sizeForNumberOfPages(int)": {
      "code": "- (CGSize) sizeForNumberOfPages:(NSInteger) pageCount\n{\n    crossmobile_ios_coregraphics_CGSize* re$ult = [self sizeForNumberOfPages___int:pageCount];\n    CGSize re$ult$conv = [re$ult getCGSize];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
    },
    "updateCurrentPageDisplay()": {
      "code": "- (void) updateCurrentPageDisplay\n{\n    [self updateCurrentPageDisplay__];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIPanGestureRecognizer": {
    "maximumNumberOfTouches()": {
      "code": "- (NSUInteger) maximumNumberOfTouches\n{\n    return [self maximumNumberOfTouches__];\n}\n\n"
    },
    "minimumNumberOfTouches()": {
      "code": "- (NSUInteger) minimumNumberOfTouches\n{\n    return [self minimumNumberOfTouches__];\n}\n\n"
    },
    "setMaximumNumberOfTouches(int)": {
      "code": "- (void) setMaximumNumberOfTouches:(NSUInteger) maximumNumberOfTouches\n{\n    [self setMaximumNumberOfTouches___int:maximumNumberOfTouches];\n}\n\n"
    },
    "setMinimumNumberOfTouches(int)": {
      "code": "- (void) setMinimumNumberOfTouches:(NSUInteger) minimumNumberOfTouches\n{\n    [self setMinimumNumberOfTouches___int:minimumNumberOfTouches];\n}\n\n"
    },
    "setTranslation(crossmobile.ios.coregraphics.CGPoint,crossmobile.ios.uikit.UIView)": {
      "code": "- (void) setTranslation:(CGPoint) translation inView:(UIView *) view\n{\n    crossmobile_ios_coregraphics_CGPoint* translation$conv = [[crossmobile_ios_coregraphics_CGPoint alloc] initWithCGPoint:translation];\n    [self setTranslation___crossmobile_ios_coregraphics_CGPoint_crossmobile_ios_uikit_UIView:translation$conv :(view ? view : JAVA_NULL)];\n    [translation$conv release];\n}\n\n"
    },
    "translationInView(crossmobile.ios.uikit.UIView)": {
      "code": "- (CGPoint) translationInView:(UIView *) view\n{\n    crossmobile_ios_coregraphics_CGPoint* re$ult = [self translationInView___crossmobile_ios_uikit_UIView:(view ? view : JAVA_NULL)];\n    CGPoint re$ult$conv = [re$ult getCGPoint];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
    },
    "velocityInView(crossmobile.ios.uikit.UIView)": {
      "code": "- (CGPoint) velocityInView:(UIView *) view\n{\n    crossmobile_ios_coregraphics_CGPoint* re$ult = [self velocityInView___crossmobile_ios_uikit_UIView:(view ? view : JAVA_NULL)];\n    CGPoint re$ult$conv = [re$ult getCGPoint];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIPickerView": {
    "dataSource()": {
      "code": "- (id<UIPickerViewDataSource>) dataSource\n{\n    id<UIPickerViewDataSource> re$ult = [self dataSource__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "delegate()": {
      "code": "- (id<UIPickerViewDelegate>) delegate\n{\n    id<UIPickerViewDelegate> re$ult = [self delegate__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "numberOfComponents()": {
      "code": "- (NSInteger) numberOfComponents\n{\n    return [self numberOfComponents__];\n}\n\n"
    },
    "numberOfRowsInComponent(int)": {
      "code": "- (NSInteger) numberOfRowsInComponent:(NSInteger) component\n{\n    return [self numberOfRowsInComponent___int:component];\n}\n\n"
    },
    "reloadAllComponents()": {
      "code": "- (void) reloadAllComponents\n{\n    [self reloadAllComponents__];\n}\n\n"
    },
    "reloadComponent(int)": {
      "code": "- (void) reloadComponent:(NSInteger) component\n{\n    [self reloadComponent___int:component];\n}\n\n"
    },
    "rowSizeForComponent(int)": {
      "code": "- (CGSize) rowSizeForComponent:(NSInteger) component\n{\n    crossmobile_ios_coregraphics_CGSize* re$ult = [self rowSizeForComponent___int:component];\n    CGSize re$ult$conv = [re$ult getCGSize];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
    },
    "selectRow(int,int,boolean)": {
      "code": "- (void) selectRow:(NSInteger) row inComponent:(NSInteger) component animated:(BOOL) animated\n{\n    [self selectRow___int_int_boolean:row :component :animated];\n}\n\n"
    },
    "selectedRowInComponent(int)": {
      "code": "- (NSInteger) selectedRowInComponent:(NSInteger) component\n{\n    return [self selectedRowInComponent___int:component];\n}\n\n"
    },
    "setDataSource(crossmobile.ios.uikit.UIPickerViewDataSource)": {
      "code": "- (void) setDataSource:(id<UIPickerViewDataSource>) dataSource\n{\n    [self setDataSource___crossmobile_ios_uikit_UIPickerViewDataSource:(dataSource ? dataSource : JAVA_NULL)];\n}\n\n"
    },
    "setDelegate(crossmobile.ios.uikit.UIPickerViewDelegate)": {
      "code": "- (void) setDelegate:(id<UIPickerViewDelegate>) delegate\n{\n    [self setDelegate___crossmobile_ios_uikit_UIPickerViewDelegate:(delegate ? delegate : JAVA_NULL)];\n}\n\n"
    },
    "setShowsSelectionIndicator(boolean)": {
      "code": "- (void) setShowsSelectionIndicator:(BOOL) showsSelectionIndicator\n{\n    [self setShowsSelectionIndicator___boolean:showsSelectionIndicator];\n}\n\n"
    },
    "showsSelectionIndicator()": {
      "code": "- (BOOL) showsSelectionIndicator\n{\n    return [self showsSelectionIndicator__];\n}\n\n"
    },
    "viewForRow(int,int)": {
      "code": "- (UIView *) viewForRow:(NSInteger) row forComponent:(NSInteger) component\n{\n    UIView * re$ult = [self viewForRow___int_int:row :component];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIPickerViewDataSource": {
    "numberOfComponentsInPickerView(crossmobile.ios.uikit.UIPickerView)": {
      "code": "- (NSInteger) numberOfComponentsInPickerView:(UIPickerView *) pickerView\n{\n    return [self numberOfComponentsInPickerView___crossmobile_ios_uikit_UIPickerView:(pickerView ? pickerView : JAVA_NULL)];\n}\n\n"
    },
    "numberOfRowsInComponent(crossmobile.ios.uikit.UIPickerView,int)": {
      "code": "- (NSInteger) pickerView:(UIPickerView *) pickerView numberOfRowsInComponent:(NSInteger) component\n{\n    return [self numberOfRowsInComponent___crossmobile_ios_uikit_UIPickerView_int:(pickerView ? pickerView : JAVA_NULL) :component];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIPickerViewDelegate": {
    "didSelectRow(crossmobile.ios.uikit.UIPickerView,int,int)": {
      "code": "- (void) pickerView:(UIPickerView *) pickerView didSelectRow:(NSInteger) row inComponent:(NSInteger) component\n{\n    [self didSelectRow___crossmobile_ios_uikit_UIPickerView_int_int:(pickerView ? pickerView : JAVA_NULL) :row :component];\n}\n\n"
    },
    "rowHeightForComponent(crossmobile.ios.uikit.UIPickerView,int)": {
      "code": "- (CGFloat) pickerView:(UIPickerView *) pickerView rowHeightForComponent:(NSInteger) component\n{\n    return [self rowHeightForComponent___crossmobile_ios_uikit_UIPickerView_int:(pickerView ? pickerView : JAVA_NULL) :component];\n}\n\n"
    },
    "titleForRow(crossmobile.ios.uikit.UIPickerView,int,int)": {
      "code": "- (NSString *) pickerView:(UIPickerView *) pickerView titleForRow:(NSInteger) row forComponent:(NSInteger) component\n{\n    NSString * re$ult = [self titleForRow___crossmobile_ios_uikit_UIPickerView_int_int:(pickerView ? pickerView : JAVA_NULL) :row :component];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "viewForRow(crossmobile.ios.uikit.UIPickerView,int,int,crossmobile.ios.uikit.UIView)": {
      "code": "- (UIView *) pickerView:(UIPickerView *) pickerView viewForRow:(NSInteger) row forComponent:(NSInteger) component reusingView:(UIView *) view\n{\n    UIView * re$ult = [self viewForRow___crossmobile_ios_uikit_UIPickerView_int_int_crossmobile_ios_uikit_UIView:(pickerView ? pickerView : JAVA_NULL) :row :component :(view ? view : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "widthForComponent(crossmobile.ios.uikit.UIPickerView,int)": {
      "code": "- (CGFloat) pickerView:(UIPickerView *) pickerView widthForComponent:(NSInteger) component\n{\n    return [self widthForComponent___crossmobile_ios_uikit_UIPickerView_int:(pickerView ? pickerView : JAVA_NULL) :component];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIPinchGestureRecognizer": {
    "scale()": {
      "code": "- (CGFloat) scale\n{\n    return [self scale__];\n}\n\n"
    },
    "setScale(double)": {
      "code": "- (void) setScale:(CGFloat) scale\n{\n    [self setScale___double:scale];\n}\n\n"
    },
    "velocity()": {
      "code": "- (CGFloat) velocity\n{\n    return [self velocity__];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIPopoverController": {
    "contentViewController()": {
      "code": "- (UIViewController *) contentViewController\n{\n    UIViewController * re$ult = [self contentViewController__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "delegate()": {
      "code": "- (id<UIPopoverControllerDelegate>) delegate\n{\n    id<UIPopoverControllerDelegate> re$ult = [self delegate__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "dismissPopoverAnimated(boolean)": {
      "code": "- (void) dismissPopoverAnimated:(BOOL) animated\n{\n    [self dismissPopoverAnimated___boolean:animated];\n}\n\n"
    },
    "isPopoverVisible()": {
      "code": "- (BOOL) isPopoverVisible\n{\n    return [self isPopoverVisible__];\n}\n\n"
    },
    "passthroughViews()": {
      "code": "- (NSArray<__kindof UIView *> *) passthroughViews\n{\n    NSArray<__kindof UIView *> * re$ult = [self passthroughViews__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "popoverArrowDirection()": {
      "code": "- (UIPopoverArrowDirection) popoverArrowDirection\n{\n    return [self popoverArrowDirection__];\n}\n\n"
    },
    "popoverContentSize()": {
      "code": "- (CGSize) popoverContentSize\n{\n    crossmobile_ios_coregraphics_CGSize* re$ult = [self popoverContentSize__];\n    CGSize re$ult$conv = [re$ult getCGSize];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
    },
    "presentPopoverFromBarButtonItem(crossmobile.ios.uikit.UIBarButtonItem,long,boolean)": {
      "code": "- (void) presentPopoverFromBarButtonItem:(UIBarButtonItem *) item permittedArrowDirections:(UIPopoverArrowDirection) arrowDirections animated:(BOOL) animated\n{\n    [self presentPopoverFromBarButtonItem___crossmobile_ios_uikit_UIBarButtonItem_long_boolean:(item ? item : JAVA_NULL) :arrowDirections :animated];\n}\n\n"
    },
    "presentPopoverFromRect(crossmobile.ios.coregraphics.CGRect,crossmobile.ios.uikit.UIView,long,boolean)": {
      "code": "- (void) presentPopoverFromRect:(CGRect) rect inView:(UIView *) view permittedArrowDirections:(UIPopoverArrowDirection) arrowDirections animated:(BOOL) animated\n{\n    crossmobile_ios_coregraphics_CGRect* rect$conv = [[crossmobile_ios_coregraphics_CGRect alloc] initWithCGRect:rect];\n    [self presentPopoverFromRect___crossmobile_ios_coregraphics_CGRect_crossmobile_ios_uikit_UIView_long_boolean:rect$conv :(view ? view : JAVA_NULL) :arrowDirections :animated];\n    [rect$conv release];\n}\n\n"
    },
    "setContentViewController(crossmobile.ios.uikit.UIViewController)": {
      "code": "- (void) setContentViewController:(UIViewController *) contentViewController\n{\n    [self setContentViewController___crossmobile_ios_uikit_UIViewController:(contentViewController ? contentViewController : JAVA_NULL)];\n}\n\n"
    },
    "setContentViewController(crossmobile.ios.uikit.UIViewController,boolean)": {
      "code": "- (void) setContentViewController:(UIViewController *) viewController animated:(BOOL) animated\n{\n    [self setContentViewController___crossmobile_ios_uikit_UIViewController_boolean:(viewController ? viewController : JAVA_NULL) :animated];\n}\n\n"
    },
    "setDelegate(crossmobile.ios.uikit.UIPopoverControllerDelegate)": {
      "code": "- (void) setDelegate:(id<UIPopoverControllerDelegate>) delegate\n{\n    [self setDelegate___crossmobile_ios_uikit_UIPopoverControllerDelegate:(delegate ? delegate : JAVA_NULL)];\n}\n\n"
    },
    "setPassthroughViews(java.util.List)": {
      "code": "- (void) setPassthroughViews:(NSArray<__kindof UIView *> *) passthroughViews\n{\n    [self setPassthroughViews___java_util_List:(passthroughViews ? passthroughViews : JAVA_NULL)];\n}\n\n"
    },
    "setPopoverContentSize(crossmobile.ios.coregraphics.CGSize)": {
      "code": "- (void) setPopoverContentSize:(CGSize) popoverContentSize\n{\n    crossmobile_ios_coregraphics_CGSize* popoverContentSize$conv = [[crossmobile_ios_coregraphics_CGSize alloc] initWithCGSize:popoverContentSize];\n    [self setPopoverContentSize___crossmobile_ios_coregraphics_CGSize:popoverContentSize$conv];\n    [popoverContentSize$conv release];\n}\n\n"
    },
    "setPopoverContentSize(crossmobile.ios.coregraphics.CGSize,boolean)": {
      "code": "- (void) setPopoverContentSize:(CGSize) size animated:(BOOL) animated\n{\n    crossmobile_ios_coregraphics_CGSize* size$conv = [[crossmobile_ios_coregraphics_CGSize alloc] initWithCGSize:size];\n    [self setPopoverContentSize___crossmobile_ios_coregraphics_CGSize_boolean:size$conv :animated];\n    [size$conv release];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIPopoverControllerDelegate": {
    "didDismissPopover(crossmobile.ios.uikit.UIPopoverController)": {
      "code": "- (void) popoverControllerDidDismissPopover:(UIPopoverController *) popoverController\n{\n    [self didDismissPopover___crossmobile_ios_uikit_UIPopoverController:(popoverController ? popoverController : JAVA_NULL)];\n}\n\n"
    },
    "shouldDismissPopover(crossmobile.ios.uikit.UIPopoverController)": {
      "code": "- (BOOL) popoverControllerShouldDismissPopover:(UIPopoverController *) popoverController\n{\n    return [self shouldDismissPopover___crossmobile_ios_uikit_UIPopoverController:(popoverController ? popoverController : JAVA_NULL)];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIPrintInteractionController": {
    "dismissAnimated(boolean)": {
      "code": "- (void) dismissAnimated:(BOOL) animated\n{\n    [self dismissAnimated___boolean:animated];\n}\n\n"
    },
    "printingItem()": {
      "code": "- (id) printingItem\n{\n    id re$ult = [self printingItem__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "printingItems()": {
      "code": "- (NSArray *) printingItems\n{\n    NSArray * re$ult = [self printingItems__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "setPrintingItem(crossmobile.ios.foundation.NSObject)": {
      "code": "- (void) setPrintingItem:(id) printingItem\n{\n    [self setPrintingItem___crossmobile_ios_foundation_NSObject:(printingItem ? printingItem : JAVA_NULL)];\n}\n\n"
    },
    "setPrintingItems(java.util.List)": {
      "code": "- (void) setPrintingItems:(NSArray *) printingItems\n{\n    [self setPrintingItems___java_util_List:(printingItems ? printingItems : JAVA_NULL)];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIProgressView": {
    "progress()": {
      "code": "- (float) progress\n{\n    return [self progress__];\n}\n\n"
    },
    "progressTintColor()": {
      "code": "- (UIColor *) progressTintColor\n{\n    UIColor * re$ult = [self progressTintColor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "progressViewStyle()": {
      "code": "- (UIProgressViewStyle) progressViewStyle\n{\n    return [self progressViewStyle__];\n}\n\n"
    },
    "setProgress(float)": {
      "code": "- (void) setProgress:(float) progress\n{\n    [self setProgress___float:progress];\n}\n\n"
    },
    "setProgressTintColor(crossmobile.ios.uikit.UIColor)": {
      "code": "- (void) setProgressTintColor:(UIColor *) progressTintColor\n{\n    [self setProgressTintColor___crossmobile_ios_uikit_UIColor:(progressTintColor ? progressTintColor : JAVA_NULL)];\n}\n\n"
    },
    "setProgressViewStyle(int)": {
      "code": "- (void) setProgressViewStyle:(UIProgressViewStyle) progressViewStyle\n{\n    [self setProgressViewStyle___int:progressViewStyle];\n}\n\n"
    },
    "setTrackTintColor(crossmobile.ios.uikit.UIColor)": {
      "code": "- (void) setTrackTintColor:(UIColor *) trackTintColor\n{\n    [self setTrackTintColor___crossmobile_ios_uikit_UIColor:(trackTintColor ? trackTintColor : JAVA_NULL)];\n}\n\n"
    },
    "trackTintColor()": {
      "code": "- (UIColor *) trackTintColor\n{\n    UIColor * re$ult = [self trackTintColor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIResponder": {
    "becomeFirstResponder()": {
      "code": "- (BOOL) becomeFirstResponder\n{\n    return [self becomeFirstResponder__];\n}\n\n"
    },
    "isFirstResponder()": {
      "code": "- (BOOL) isFirstResponder\n{\n    return [self isFirstResponder__];\n}\n\n"
    },
    "nextResponder()": {
      "code": "- (UIResponder *) nextResponder\n{\n    UIResponder * re$ult = [self nextResponder__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "resignFirstResponder()": {
      "code": "- (BOOL) resignFirstResponder\n{\n    return [self resignFirstResponder__];\n}\n\n"
    },
    "touchesBegan(java.util.Set,crossmobile.ios.uikit.UIEvent)": {
      "code": "- (void) touchesBegan:(NSSet<UITouch *> *) touches withEvent:(UIEvent *) event\n{\n    [self touchesBegan___java_util_Set_crossmobile_ios_uikit_UIEvent:(touches ? touches : JAVA_NULL) :(event ? event : JAVA_NULL)];\n}\n\n"
    },
    "touchesCancelled(java.util.Set,crossmobile.ios.uikit.UIEvent)": {
      "code": "- (void) touchesCancelled:(NSSet<UITouch *> *) touches withEvent:(UIEvent *) event\n{\n    [self touchesCancelled___java_util_Set_crossmobile_ios_uikit_UIEvent:(touches ? touches : JAVA_NULL) :(event ? event : JAVA_NULL)];\n}\n\n"
    },
    "touchesEnded(java.util.Set,crossmobile.ios.uikit.UIEvent)": {
      "code": "- (void) touchesEnded:(NSSet<UITouch *> *) touches withEvent:(UIEvent *) event\n{\n    [self touchesEnded___java_util_Set_crossmobile_ios_uikit_UIEvent:(touches ? touches : JAVA_NULL) :(event ? event : JAVA_NULL)];\n}\n\n"
    },
    "touchesMoved(java.util.Set,crossmobile.ios.uikit.UIEvent)": {
      "code": "- (void) touchesMoved:(NSSet<UITouch *> *) touches withEvent:(UIEvent *) event\n{\n    [self touchesMoved___java_util_Set_crossmobile_ios_uikit_UIEvent:(touches ? touches : JAVA_NULL) :(event ? event : JAVA_NULL)];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIRotationGestureRecognizer": {
    "rotation()": {
      "code": "- (CGFloat) rotation\n{\n    return [self rotation__];\n}\n\n"
    },
    "setRotation(double)": {
      "code": "- (void) setRotation:(CGFloat) rotation\n{\n    [self setRotation___double:rotation];\n}\n\n"
    },
    "velocity()": {
      "code": "- (CGFloat) velocity\n{\n    return [self velocity__];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIScreen": {
    "applicationFrame()": {
      "code": "- (CGRect) applicationFrame\n{\n    crossmobile_ios_coregraphics_CGRect* re$ult = [self applicationFrame__];\n    CGRect re$ult$conv = [re$ult getCGRect];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
    },
    "bounds()": {
      "code": "- (CGRect) bounds\n{\n    crossmobile_ios_coregraphics_CGRect* re$ult = [self bounds__];\n    CGRect re$ult$conv = [re$ult getCGRect];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
    },
    "scale()": {
      "code": "- (CGFloat) scale\n{\n    return [self scale__];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIScrollView": {
    "alwaysBounceHorizontal()": {
      "code": "- (BOOL) alwaysBounceHorizontal\n{\n    return [self alwaysBounceHorizontal__];\n}\n\n"
    },
    "alwaysBounceVertical()": {
      "code": "- (BOOL) alwaysBounceVertical\n{\n    return [self alwaysBounceVertical__];\n}\n\n"
    },
    "bounces()": {
      "code": "- (BOOL) bounces\n{\n    return [self bounces__];\n}\n\n"
    },
    "canCancelContentTouches()": {
      "code": "- (BOOL) canCancelContentTouches\n{\n    return [self canCancelContentTouches__];\n}\n\n"
    },
    "contentInset()": {
      "code": "- (UIEdgeInsets) contentInset\n{\n    crossmobile_ios_uikit_UIEdgeInsets* re$ult = [self contentInset__];\n    UIEdgeInsets re$ult$conv = [re$ult getUIEdgeInsets];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
    },
    "contentOffset()": {
      "code": "- (CGPoint) contentOffset\n{\n    crossmobile_ios_coregraphics_CGPoint* re$ult = [self contentOffset__];\n    CGPoint re$ult$conv = [re$ult getCGPoint];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
    },
    "contentSize()": {
      "code": "- (CGSize) contentSize\n{\n    crossmobile_ios_coregraphics_CGSize* re$ult = [self contentSize__];\n    CGSize re$ult$conv = [re$ult getCGSize];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
    },
    "decelerationRate()": {
      "code": "- (CGFloat) decelerationRate\n{\n    return [self decelerationRate__];\n}\n\n"
    },
    "delaysContentTouches()": {
      "code": "- (BOOL) delaysContentTouches\n{\n    return [self delaysContentTouches__];\n}\n\n"
    },
    "delegate()": {
      "code": "- (id<UIScrollViewDelegate>) delegate\n{\n    id<UIScrollViewDelegate> re$ult = [self delegate__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "flashScrollIndicators()": {
      "code": "- (void) flashScrollIndicators\n{\n    [self flashScrollIndicators__];\n}\n\n"
    },
    "indicatorStyle()": {
      "code": "- (UIScrollViewIndicatorStyle) indicatorStyle\n{\n    return [self indicatorStyle__];\n}\n\n"
    },
    "isDecelerating()": {
      "code": "- (BOOL) isDecelerating\n{\n    return [self isDecelerating__];\n}\n\n"
    },
    "isDirectionalLockEnabled()": {
      "code": "- (BOOL) isDirectionalLockEnabled\n{\n    return [self isDirectionalLockEnabled__];\n}\n\n"
    },
    "isDragging()": {
      "code": "- (BOOL) isDragging\n{\n    return [self isDragging__];\n}\n\n"
    },
    "isPagingEnabled()": {
      "code": "- (BOOL) isPagingEnabled\n{\n    return [self isPagingEnabled__];\n}\n\n"
    },
    "isScrollEnabled()": {
      "code": "- (BOOL) isScrollEnabled\n{\n    return [self isScrollEnabled__];\n}\n\n"
    },
    "isTracking()": {
      "code": "- (BOOL) isTracking\n{\n    return [self isTracking__];\n}\n\n"
    },
    "scrollIndicatorInsets()": {
      "code": "- (UIEdgeInsets) scrollIndicatorInsets\n{\n    crossmobile_ios_uikit_UIEdgeInsets* re$ult = [self scrollIndicatorInsets__];\n    UIEdgeInsets re$ult$conv = [re$ult getUIEdgeInsets];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
    },
    "scrollRectToVisible(crossmobile.ios.coregraphics.CGRect,boolean)": {
      "code": "- (void) scrollRectToVisible:(CGRect) rect animated:(BOOL) animated\n{\n    crossmobile_ios_coregraphics_CGRect* rect$conv = [[crossmobile_ios_coregraphics_CGRect alloc] initWithCGRect:rect];\n    [self scrollRectToVisible___crossmobile_ios_coregraphics_CGRect_boolean:rect$conv :animated];\n    [rect$conv release];\n}\n\n"
    },
    "scrollsToTop()": {
      "code": "- (BOOL) scrollsToTop\n{\n    return [self scrollsToTop__];\n}\n\n"
    },
    "setAlwaysBounceHorizontal(boolean)": {
      "code": "- (void) setAlwaysBounceHorizontal:(BOOL) alwaysBounceHorizontal\n{\n    [self setAlwaysBounceHorizontal___boolean:alwaysBounceHorizontal];\n}\n\n"
    },
    "setAlwaysBounceVertical(boolean)": {
      "code": "- (void) setAlwaysBounceVertical:(BOOL) alwaysBounceVertical\n{\n    [self setAlwaysBounceVertical___boolean:alwaysBounceVertical];\n}\n\n"
    },
    "setBounces(boolean)": {
      "code": "- (void) setBounces:(BOOL) bounces\n{\n    [self setBounces___boolean:bounces];\n}\n\n"
    },
    "setCanCancelContentTouches(boolean)": {
      "code": "- (void) setCanCancelContentTouches:(BOOL) canCancelContentTouches\n{\n    [self setCanCancelContentTouches___boolean:canCancelContentTouches];\n}\n\n"
    },
    "setContentInset(crossmobile.ios.uikit.UIEdgeInsets)": {
      "code": "- (void) setContentInset:(UIEdgeInsets) contentInset\n{\n    crossmobile_ios_uikit_UIEdgeInsets* contentInset$conv = [[crossmobile_ios_uikit_UIEdgeInsets alloc] initWithUIEdgeInsets:contentInset];\n    [self setContentInset___crossmobile_ios_uikit_UIEdgeInsets:contentInset$conv];\n    [contentInset$conv release];\n}\n\n"
    },
    "setContentOffset(crossmobile.ios.coregraphics.CGPoint)": {
      "code": "- (void) setContentOffset:(CGPoint) contentOffset\n{\n    crossmobile_ios_coregraphics_CGPoint* contentOffset$conv = [[crossmobile_ios_coregraphics_CGPoint alloc] initWithCGPoint:contentOffset];\n    [self setContentOffset___crossmobile_ios_coregraphics_CGPoint:contentOffset$conv];\n    [contentOffset$conv release];\n}\n\n"
    },
    "setContentOffset(crossmobile.ios.coregraphics.CGPoint,boolean)": {
      "code": "- (void) setContentOffset:(CGPoint) contentOffset animated:(BOOL) animated\n{\n    crossmobile_ios_coregraphics_CGPoint* contentOffset$conv = [[crossmobile_ios_coregraphics_CGPoint alloc] initWithCGPoint:contentOffset];\n    [self setContentOffset___crossmobile_ios_coregraphics_CGPoint_boolean:contentOffset$conv :animated];\n    [contentOffset$conv release];\n}\n\n"
    },
    "setContentSize(crossmobile.ios.coregraphics.CGSize)": {
      "code": "- (void) setContentSize:(CGSize) contentSize\n{\n    crossmobile_ios_coregraphics_CGSize* contentSize$conv = [[crossmobile_ios_coregraphics_CGSize alloc] initWithCGSize:contentSize];\n    [self setContentSize___crossmobile_ios_coregraphics_CGSize:contentSize$conv];\n    [contentSize$conv release];\n}\n\n"
    },
    "setDecelerationRate(double)": {
      "code": "- (void) setDecelerationRate:(CGFloat) decelerationRate\n{\n    [self setDecelerationRate___double:decelerationRate];\n}\n\n"
    },
    "setDelaysContentTouches(boolean)": {
      "code": "- (void) setDelaysContentTouches:(BOOL) delaysContentTouches\n{\n    [self setDelaysContentTouches___boolean:delaysContentTouches];\n}\n\n"
    },
    "setDelegate(crossmobile.ios.uikit.UIScrollViewDelegate)": {
      "code": "- (void) setDelegate:(id<UIScrollViewDelegate>) delegate\n{\n    [self setDelegate___crossmobile_ios_uikit_UIScrollViewDelegate:(delegate ? delegate : JAVA_NULL)];\n}\n\n"
    },
    "setDirectionalLockEnabled(boolean)": {
      "code": "- (void) setDirectionalLockEnabled:(BOOL) directionalLockEnabled\n{\n    [self setDirectionalLockEnabled___boolean:directionalLockEnabled];\n}\n\n"
    },
    "setIndicatorStyle(int)": {
      "code": "- (void) setIndicatorStyle:(UIScrollViewIndicatorStyle) indicatorStyle\n{\n    [self setIndicatorStyle___int:indicatorStyle];\n}\n\n"
    },
    "setPagingEnabled(boolean)": {
      "code": "- (void) setPagingEnabled:(BOOL) pagingEnabled\n{\n    [self setPagingEnabled___boolean:pagingEnabled];\n}\n\n"
    },
    "setScrollEnabled(boolean)": {
      "code": "- (void) setScrollEnabled:(BOOL) scrollEnabled\n{\n    [self setScrollEnabled___boolean:scrollEnabled];\n}\n\n"
    },
    "setScrollIndicatorInsets(crossmobile.ios.uikit.UIEdgeInsets)": {
      "code": "- (void) setScrollIndicatorInsets:(UIEdgeInsets) scrollIndicatorInsets\n{\n    crossmobile_ios_uikit_UIEdgeInsets* scrollIndicatorInsets$conv = [[crossmobile_ios_uikit_UIEdgeInsets alloc] initWithUIEdgeInsets:scrollIndicatorInsets];\n    [self setScrollIndicatorInsets___crossmobile_ios_uikit_UIEdgeInsets:scrollIndicatorInsets$conv];\n    [scrollIndicatorInsets$conv release];\n}\n\n"
    },
    "setScrollsToTop(boolean)": {
      "code": "- (void) setScrollsToTop:(BOOL) scrollsToTop\n{\n    [self setScrollsToTop___boolean:scrollsToTop];\n}\n\n"
    },
    "setShowsHorizontalScrollIndicator(boolean)": {
      "code": "- (void) setShowsHorizontalScrollIndicator:(BOOL) showsHorizontalScrollIndicator\n{\n    [self setShowsHorizontalScrollIndicator___boolean:showsHorizontalScrollIndicator];\n}\n\n"
    },
    "setShowsVerticalScrollIndicator(boolean)": {
      "code": "- (void) setShowsVerticalScrollIndicator:(BOOL) showsVerticalScrollIndicator\n{\n    [self setShowsVerticalScrollIndicator___boolean:showsVerticalScrollIndicator];\n}\n\n"
    },
    "showsHorizontalScrollIndicator()": {
      "code": "- (BOOL) showsHorizontalScrollIndicator\n{\n    return [self showsHorizontalScrollIndicator__];\n}\n\n"
    },
    "showsVerticalScrollIndicator()": {
      "code": "- (BOOL) showsVerticalScrollIndicator\n{\n    return [self showsVerticalScrollIndicator__];\n}\n\n"
    },
    "touchesShouldBegin(java.util.Set,crossmobile.ios.uikit.UIEvent,crossmobile.ios.uikit.UIView)": {
      "code": "- (BOOL) touchesShouldBegin:(NSSet<UITouch *> *) touches withEvent:(UIEvent *) event inContentView:(UIView *) view\n{\n    return [self touchesShouldBegin___java_util_Set_crossmobile_ios_uikit_UIEvent_crossmobile_ios_uikit_UIView:(touches ? touches : JAVA_NULL) :(event ? event : JAVA_NULL) :(view ? view : JAVA_NULL)];\n}\n\n"
    },
    "touchesShouldCancelInContentView(crossmobile.ios.uikit.UIView)": {
      "code": "- (BOOL) touchesShouldCancelInContentView:(UIView *) view\n{\n    return [self touchesShouldCancelInContentView___crossmobile_ios_uikit_UIView:(view ? view : JAVA_NULL)];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIScrollViewDelegate": {
    "didEndDecelerating(crossmobile.ios.uikit.UIScrollView)": {
      "code": "- (void) scrollViewDidEndDecelerating:(UIScrollView *) scrollView\n{\n    [self didEndDecelerating___crossmobile_ios_uikit_UIScrollView:(scrollView ? scrollView : JAVA_NULL)];\n}\n\n"
    },
    "didEndDragging(crossmobile.ios.uikit.UIScrollView,boolean)": {
      "code": "- (void) scrollViewDidEndDragging:(UIScrollView *) scrollView willDecelerate:(BOOL) decelerate\n{\n    [self didEndDragging___crossmobile_ios_uikit_UIScrollView_boolean:(scrollView ? scrollView : JAVA_NULL) :decelerate];\n}\n\n"
    },
    "didEndScrollingAnimation(crossmobile.ios.uikit.UIScrollView)": {
      "code": "- (void) scrollViewDidEndScrollingAnimation:(UIScrollView *) scrollView\n{\n    [self didEndScrollingAnimation___crossmobile_ios_uikit_UIScrollView:(scrollView ? scrollView : JAVA_NULL)];\n}\n\n"
    },
    "didEndZooming(crossmobile.ios.uikit.UIScrollView,crossmobile.ios.uikit.UIView,double)": {
      "code": "- (void) scrollViewDidEndZooming:(UIScrollView *) scrollView withView:(UIView *) view atScale:(CGFloat) scale\n{\n    [self didEndZooming___crossmobile_ios_uikit_UIScrollView_crossmobile_ios_uikit_UIView_double:(scrollView ? scrollView : JAVA_NULL) :(view ? view : JAVA_NULL) :scale];\n}\n\n"
    },
    "didScroll(crossmobile.ios.uikit.UIScrollView)": {
      "code": "- (void) scrollViewDidScroll:(UIScrollView *) scrollView\n{\n    [self didScroll___crossmobile_ios_uikit_UIScrollView:(scrollView ? scrollView : JAVA_NULL)];\n}\n\n"
    },
    "didScrollToTop(crossmobile.ios.uikit.UIScrollView)": {
      "code": "- (void) scrollViewDidScrollToTop:(UIScrollView *) scrollView\n{\n    [self didScrollToTop___crossmobile_ios_uikit_UIScrollView:(scrollView ? scrollView : JAVA_NULL)];\n}\n\n"
    },
    "shouldScrollToTop(crossmobile.ios.uikit.UIScrollView)": {
      "code": "- (BOOL) scrollViewShouldScrollToTop:(UIScrollView *) scrollView\n{\n    return [self shouldScrollToTop___crossmobile_ios_uikit_UIScrollView:(scrollView ? scrollView : JAVA_NULL)];\n}\n\n"
    },
    "viewForZoomingInScrollView(crossmobile.ios.uikit.UIScrollView)": {
      "code": "- (UIView *) viewForZoomingInScrollView:(UIScrollView *) scrollView\n{\n    UIView * re$ult = [self viewForZoomingInScrollView___crossmobile_ios_uikit_UIScrollView:(scrollView ? scrollView : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "willBeginDecelerating(crossmobile.ios.uikit.UIScrollView)": {
      "code": "- (void) scrollViewWillBeginDecelerating:(UIScrollView *) scrollView\n{\n    [self willBeginDecelerating___crossmobile_ios_uikit_UIScrollView:(scrollView ? scrollView : JAVA_NULL)];\n}\n\n"
    },
    "willBeginDragging(crossmobile.ios.uikit.UIScrollView)": {
      "code": "- (void) scrollViewWillBeginDragging:(UIScrollView *) scrollView\n{\n    [self willBeginDragging___crossmobile_ios_uikit_UIScrollView:(scrollView ? scrollView : JAVA_NULL)];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UISearchBar": {
    "autocapitalizationType()": {
      "code": "- (UITextAutocapitalizationType) autocapitalizationType\n{\n    return [self autocapitalizationType__];\n}\n\n"
    },
    "autocorrectionType()": {
      "code": "- (UITextAutocorrectionType) autocorrectionType\n{\n    return [self autocorrectionType__];\n}\n\n"
    },
    "barStyle()": {
      "code": "- (UIBarStyle) barStyle\n{\n    return [self barStyle__];\n}\n\n"
    },
    "barTintColor()": {
      "code": "- (UIColor *) barTintColor\n{\n    UIColor * re$ult = [self barTintColor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "delegate()": {
      "code": "- (id<UISearchBarDelegate>) delegate\n{\n    id<UISearchBarDelegate> re$ult = [self delegate__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "isTranslucent()": {
      "code": "- (BOOL) isTranslucent\n{\n    return [self isTranslucent__];\n}\n\n"
    },
    "keyboardType()": {
      "code": "- (UIKeyboardType) keyboardType\n{\n    return [self keyboardType__];\n}\n\n"
    },
    "placeholder()": {
      "code": "- (NSString *) placeholder\n{\n    NSString * re$ult = [self placeholder__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "prompt()": {
      "code": "- (NSString *) prompt\n{\n    NSString * re$ult = [self prompt__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "scopeButtonTitles()": {
      "code": "- (NSArray<NSString *> *) scopeButtonTitles\n{\n    NSArray<NSString *> * re$ult = [self scopeButtonTitles__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "searchBarStyle()": {
      "code": "- (UISearchBarStyle) searchBarStyle\n{\n    return [self searchBarStyle__];\n}\n\n"
    },
    "selectedScopeButtonIndex()": {
      "code": "- (NSInteger) selectedScopeButtonIndex\n{\n    return [self selectedScopeButtonIndex__];\n}\n\n"
    },
    "setAutocapitalizationType(int)": {
      "code": "- (void) setAutocapitalizationType:(UITextAutocapitalizationType) autocapitalizationType\n{\n    [self setAutocapitalizationType___int:autocapitalizationType];\n}\n\n"
    },
    "setAutocorrectionType(int)": {
      "code": "- (void) setAutocorrectionType:(UITextAutocorrectionType) autocorrectionType\n{\n    [self setAutocorrectionType___int:autocorrectionType];\n}\n\n"
    },
    "setBarStyle(int)": {
      "code": "- (void) setBarStyle:(UIBarStyle) barStyle\n{\n    [self setBarStyle___int:barStyle];\n}\n\n"
    },
    "setBarTintColor(crossmobile.ios.uikit.UIColor)": {
      "code": "- (void) setBarTintColor:(UIColor *) barTintColor\n{\n    [self setBarTintColor___crossmobile_ios_uikit_UIColor:(barTintColor ? barTintColor : JAVA_NULL)];\n}\n\n"
    },
    "setDelegate(crossmobile.ios.uikit.UISearchBarDelegate)": {
      "code": "- (void) setDelegate:(id<UISearchBarDelegate>) delegate\n{\n    [self setDelegate___crossmobile_ios_uikit_UISearchBarDelegate:(delegate ? delegate : JAVA_NULL)];\n}\n\n"
    },
    "setImage(crossmobile.ios.uikit.UIImage,int,int)": {
      "code": "- (void) setImage:(UIImage *) iconImage forSearchBarIcon:(UISearchBarIcon) icon state:(UIControlState) state\n{\n    [self setImage___crossmobile_ios_uikit_UIImage_int_int:(iconImage ? iconImage : JAVA_NULL) :icon :state];\n}\n\n"
    },
    "setKeyboardType(int)": {
      "code": "- (void) setKeyboardType:(UIKeyboardType) keyboardType\n{\n    [self setKeyboardType___int:keyboardType];\n}\n\n"
    },
    "setPlaceholder(java.lang.String)": {
      "code": "- (void) setPlaceholder:(NSString *) placeholder\n{\n    [self setPlaceholder___java_lang_String:(placeholder ? placeholder : JAVA_NULL)];\n}\n\n"
    },
    "setPrompt(java.lang.String)": {
      "code": "- (void) setPrompt:(NSString *) prompt\n{\n    [self setPrompt___java_lang_String:(prompt ? prompt : JAVA_NULL)];\n}\n\n"
    },
    "setScopeButtonTitles(java.util.List)": {
      "code": "- (void) setScopeButtonTitles:(NSArray<NSString *> *) scopeButtonTitles\n{\n    [self setScopeButtonTitles___java_util_List:(scopeButtonTitles ? scopeButtonTitles : JAVA_NULL)];\n}\n\n"
    },
    "setSearchBarStyle(int)": {
      "code": "- (void) setSearchBarStyle:(UISearchBarStyle) searchBarStyle\n{\n    [self setSearchBarStyle___int:searchBarStyle];\n}\n\n"
    },
    "setSelectedScopeButtonIndex(int)": {
      "code": "- (void) setSelectedScopeButtonIndex:(NSInteger) selectedScopeButtonIndex\n{\n    [self setSelectedScopeButtonIndex___int:selectedScopeButtonIndex];\n}\n\n"
    },
    "setShowsBookmarkButton(boolean)": {
      "code": "- (void) setShowsBookmarkButton:(BOOL) showsBookmarkButton\n{\n    [self setShowsBookmarkButton___boolean:showsBookmarkButton];\n}\n\n"
    },
    "setShowsCancelButton(boolean)": {
      "code": "- (void) setShowsCancelButton:(BOOL) showsCancelButton\n{\n    [self setShowsCancelButton___boolean:showsCancelButton];\n}\n\n"
    },
    "setShowsScopeBar(boolean)": {
      "code": "- (void) setShowsScopeBar:(BOOL) showsScopeBar\n{\n    [self setShowsScopeBar___boolean:showsScopeBar];\n}\n\n"
    },
    "setText(java.lang.String)": {
      "code": "- (void) setText:(NSString *) text\n{\n    [self setText___java_lang_String:(text ? text : JAVA_NULL)];\n}\n\n"
    },
    "setTranslucent(boolean)": {
      "code": "- (void) setTranslucent:(BOOL) translucent\n{\n    [self setTranslucent___boolean:translucent];\n}\n\n"
    },
    "showsBookmarkButton()": {
      "code": "- (BOOL) showsBookmarkButton\n{\n    return [self showsBookmarkButton__];\n}\n\n"
    },
    "showsCancelButton()": {
      "code": "- (BOOL) showsCancelButton\n{\n    return [self showsCancelButton__];\n}\n\n"
    },
    "showsScopeBar()": {
      "code": "- (BOOL) showsScopeBar\n{\n    return [self showsScopeBar__];\n}\n\n"
    },
    "text()": {
      "code": "- (NSString *) text\n{\n    NSString * re$ult = [self text__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UISearchBarDelegate": {
    "bookmarkButtonClicked(crossmobile.ios.uikit.UISearchBar)": {
      "code": "- (void) searchBarBookmarkButtonClicked:(UISearchBar *) searchBar\n{\n    [self bookmarkButtonClicked___crossmobile_ios_uikit_UISearchBar:(searchBar ? searchBar : JAVA_NULL)];\n}\n\n"
    },
    "cancelButtonClicked(crossmobile.ios.uikit.UISearchBar)": {
      "code": "- (void) searchBarCancelButtonClicked:(UISearchBar *) searchBar\n{\n    [self cancelButtonClicked___crossmobile_ios_uikit_UISearchBar:(searchBar ? searchBar : JAVA_NULL)];\n}\n\n"
    },
    "searchButtonClicked(crossmobile.ios.uikit.UISearchBar)": {
      "code": "- (void) searchBarSearchButtonClicked:(UISearchBar *) searchBar\n{\n    [self searchButtonClicked___crossmobile_ios_uikit_UISearchBar:(searchBar ? searchBar : JAVA_NULL)];\n}\n\n"
    },
    "selectedScopeButtonIndexDidChange(crossmobile.ios.uikit.UISearchBar,int)": {
      "code": "- (void) searchBar:(UISearchBar *) searchBar selectedScopeButtonIndexDidChange:(NSInteger) selectedScope\n{\n    [self selectedScopeButtonIndexDidChange___crossmobile_ios_uikit_UISearchBar_int:(searchBar ? searchBar : JAVA_NULL) :selectedScope];\n}\n\n"
    },
    "shouldBeginEditing(crossmobile.ios.uikit.UISearchBar)": {
      "code": "- (BOOL) searchBarShouldBeginEditing:(UISearchBar *) searchBar\n{\n    return [self shouldBeginEditing___crossmobile_ios_uikit_UISearchBar:(searchBar ? searchBar : JAVA_NULL)];\n}\n\n"
    },
    "shouldEndEditing(crossmobile.ios.uikit.UISearchBar)": {
      "code": "- (BOOL) searchBarShouldEndEditing:(UISearchBar *) searchBar\n{\n    return [self shouldEndEditing___crossmobile_ios_uikit_UISearchBar:(searchBar ? searchBar : JAVA_NULL)];\n}\n\n"
    },
    "textDidBeginEditing(crossmobile.ios.uikit.UISearchBar)": {
      "code": "- (void) searchBarTextDidBeginEditing:(UISearchBar *) searchBar\n{\n    [self textDidBeginEditing___crossmobile_ios_uikit_UISearchBar:(searchBar ? searchBar : JAVA_NULL)];\n}\n\n"
    },
    "textDidChange(crossmobile.ios.uikit.UISearchBar,java.lang.String)": {
      "code": "- (void) searchBar:(UISearchBar *) searchBar textDidChange:(NSString *) searchText\n{\n    [self textDidChange___crossmobile_ios_uikit_UISearchBar_java_lang_String:(searchBar ? searchBar : JAVA_NULL) :(searchText ? searchText : JAVA_NULL)];\n}\n\n"
    },
    "textDidEndEditing(crossmobile.ios.uikit.UISearchBar)": {
      "code": "- (void) searchBarTextDidEndEditing:(UISearchBar *) searchBar\n{\n    [self textDidEndEditing___crossmobile_ios_uikit_UISearchBar:(searchBar ? searchBar : JAVA_NULL)];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UISegmentedControl": {
    "imageForSegmentAtIndex(int)": {
      "code": "- (UIImage *) imageForSegmentAtIndex:(NSUInteger) segment\n{\n    UIImage * re$ult = [self imageForSegmentAtIndex___int:segment];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "insertSegmentWithImage(crossmobile.ios.uikit.UIImage,int,boolean)": {
      "code": "- (void) insertSegmentWithImage:(UIImage *) image atIndex:(NSUInteger) segment animated:(BOOL) animated\n{\n    [self insertSegmentWithImage___crossmobile_ios_uikit_UIImage_int_boolean:(image ? image : JAVA_NULL) :segment :animated];\n}\n\n"
    },
    "insertSegmentWithTitle(java.lang.String,int,boolean)": {
      "code": "- (void) insertSegmentWithTitle:(NSString *) title atIndex:(NSUInteger) segment animated:(BOOL) animated\n{\n    [self insertSegmentWithTitle___java_lang_String_int_boolean:(title ? title : JAVA_NULL) :segment :animated];\n}\n\n"
    },
    "isMomentary()": {
      "code": "- (BOOL) isMomentary\n{\n    return [self isMomentary__];\n}\n\n"
    },
    "numberOfSegments()": {
      "code": "- (NSUInteger) numberOfSegments\n{\n    return [self numberOfSegments__];\n}\n\n"
    },
    "removeAllSegments()": {
      "code": "- (void) removeAllSegments\n{\n    [self removeAllSegments__];\n}\n\n"
    },
    "removeSegmentAtIndex(int,boolean)": {
      "code": "- (void) removeSegmentAtIndex:(NSUInteger) segment animated:(BOOL) animated\n{\n    [self removeSegmentAtIndex___int_boolean:segment :animated];\n}\n\n"
    },
    "segmentedControlStyle()": {
      "code": "- (UISegmentedControlStyle) segmentedControlStyle\n{\n    return [self segmentedControlStyle__];\n}\n\n"
    },
    "selectedSegmentIndex()": {
      "code": "- (NSInteger) selectedSegmentIndex\n{\n    return [self selectedSegmentIndex__];\n}\n\n"
    },
    "setImage(crossmobile.ios.uikit.UIImage,int)": {
      "code": "- (void) setImage:(UIImage *) image forSegmentAtIndex:(NSUInteger) segment\n{\n    [self setImage___crossmobile_ios_uikit_UIImage_int:(image ? image : JAVA_NULL) :segment];\n}\n\n"
    },
    "setMomentary(boolean)": {
      "code": "- (void) setMomentary:(BOOL) momentary\n{\n    [self setMomentary___boolean:momentary];\n}\n\n"
    },
    "setSegmentedControlStyle(int)": {
      "code": "- (void) setSegmentedControlStyle:(UISegmentedControlStyle) segmentedControlStyle\n{\n    [self setSegmentedControlStyle___int:segmentedControlStyle];\n}\n\n"
    },
    "setSelectedSegmentIndex(int)": {
      "code": "- (void) setSelectedSegmentIndex:(NSInteger) selectedSegmentIndex\n{\n    [self setSelectedSegmentIndex___int:selectedSegmentIndex];\n}\n\n"
    },
    "setTitle(java.lang.String,int)": {
      "code": "- (void) setTitle:(NSString *) title forSegmentAtIndex:(NSUInteger) segment\n{\n    [self setTitle___java_lang_String_int:(title ? title : JAVA_NULL) :segment];\n}\n\n"
    },
    "titleForSegmentAtIndex(int)": {
      "code": "- (NSString *) titleForSegmentAtIndex:(NSUInteger) segment\n{\n    NSString * re$ult = [self titleForSegmentAtIndex___int:segment];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UISlider": {
    "currentMaximumTrackImage()": {
      "code": "- (UIImage *) currentMaximumTrackImage\n{\n    UIImage * re$ult = [self currentMaximumTrackImage__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "currentMinimumTrackImage()": {
      "code": "- (UIImage *) currentMinimumTrackImage\n{\n    UIImage * re$ult = [self currentMinimumTrackImage__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "currentThumbImage()": {
      "code": "- (UIImage *) currentThumbImage\n{\n    UIImage * re$ult = [self currentThumbImage__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "isContinuous()": {
      "code": "- (BOOL) isContinuous\n{\n    return [self isContinuous__];\n}\n\n"
    },
    "maximumTrackImageForState(int)": {
      "code": "- (UIImage *) maximumTrackImageForState:(UIControlState) state\n{\n    UIImage * re$ult = [self maximumTrackImageForState___int:state];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "maximumTrackTintColor()": {
      "code": "- (UIColor *) maximumTrackTintColor\n{\n    UIColor * re$ult = [self maximumTrackTintColor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "maximumValue()": {
      "code": "- (float) maximumValue\n{\n    return [self maximumValue__];\n}\n\n"
    },
    "maximumValueImage()": {
      "code": "- (UIImage *) maximumValueImage\n{\n    UIImage * re$ult = [self maximumValueImage__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "minimumTrackImageForState(int)": {
      "code": "- (UIImage *) minimumTrackImageForState:(UIControlState) state\n{\n    UIImage * re$ult = [self minimumTrackImageForState___int:state];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "minimumTrackTintColor()": {
      "code": "- (UIColor *) minimumTrackTintColor\n{\n    UIColor * re$ult = [self minimumTrackTintColor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "minimumValue()": {
      "code": "- (float) minimumValue\n{\n    return [self minimumValue__];\n}\n\n"
    },
    "minimumValueImage()": {
      "code": "- (UIImage *) minimumValueImage\n{\n    UIImage * re$ult = [self minimumValueImage__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "setContinuous(boolean)": {
      "code": "- (void) setContinuous:(BOOL) continuous\n{\n    [self setContinuous___boolean:continuous];\n}\n\n"
    },
    "setMaximumTrackImage(crossmobile.ios.uikit.UIImage,int)": {
      "code": "- (void) setMaximumTrackImage:(UIImage *) image forState:(UIControlState) state\n{\n    [self setMaximumTrackImage___crossmobile_ios_uikit_UIImage_int:(image ? image : JAVA_NULL) :state];\n}\n\n"
    },
    "setMaximumTrackTintColor(crossmobile.ios.uikit.UIColor)": {
      "code": "- (void) setMaximumTrackTintColor:(UIColor *) maximumTrackTintColor\n{\n    [self setMaximumTrackTintColor___crossmobile_ios_uikit_UIColor:(maximumTrackTintColor ? maximumTrackTintColor : JAVA_NULL)];\n}\n\n"
    },
    "setMaximumValue(float)": {
      "code": "- (void) setMaximumValue:(float) maximumValue\n{\n    [self setMaximumValue___float:maximumValue];\n}\n\n"
    },
    "setMaximumValueImage(crossmobile.ios.uikit.UIImage)": {
      "code": "- (void) setMaximumValueImage:(UIImage *) maximumValueImage\n{\n    [self setMaximumValueImage___crossmobile_ios_uikit_UIImage:(maximumValueImage ? maximumValueImage : JAVA_NULL)];\n}\n\n"
    },
    "setMinimumTrackImage(crossmobile.ios.uikit.UIImage,int)": {
      "code": "- (void) setMinimumTrackImage:(UIImage *) image forState:(UIControlState) state\n{\n    [self setMinimumTrackImage___crossmobile_ios_uikit_UIImage_int:(image ? image : JAVA_NULL) :state];\n}\n\n"
    },
    "setMinimumTrackTintColor(crossmobile.ios.uikit.UIColor)": {
      "code": "- (void) setMinimumTrackTintColor:(UIColor *) minimumTrackTintColor\n{\n    [self setMinimumTrackTintColor___crossmobile_ios_uikit_UIColor:(minimumTrackTintColor ? minimumTrackTintColor : JAVA_NULL)];\n}\n\n"
    },
    "setMinimumValue(float)": {
      "code": "- (void) setMinimumValue:(float) minimumValue\n{\n    [self setMinimumValue___float:minimumValue];\n}\n\n"
    },
    "setMinimumValueImage(crossmobile.ios.uikit.UIImage)": {
      "code": "- (void) setMinimumValueImage:(UIImage *) minimumValueImage\n{\n    [self setMinimumValueImage___crossmobile_ios_uikit_UIImage:(minimumValueImage ? minimumValueImage : JAVA_NULL)];\n}\n\n"
    },
    "setThumbImage(crossmobile.ios.uikit.UIImage,int)": {
      "code": "- (void) setThumbImage:(UIImage *) image forState:(UIControlState) state\n{\n    [self setThumbImage___crossmobile_ios_uikit_UIImage_int:(image ? image : JAVA_NULL) :state];\n}\n\n"
    },
    "setThumbTintColor(crossmobile.ios.uikit.UIColor)": {
      "code": "- (void) setThumbTintColor:(UIColor *) thumbTintColor\n{\n    [self setThumbTintColor___crossmobile_ios_uikit_UIColor:(thumbTintColor ? thumbTintColor : JAVA_NULL)];\n}\n\n"
    },
    "setValue(float)": {
      "code": "- (void) setValue:(float) value\n{\n    [self setValue___float:value];\n}\n\n"
    },
    "setValue(float,boolean)": {
      "code": "- (void) setValue:(float) value animated:(BOOL) animated\n{\n    [self setValue___float_boolean:value :animated];\n}\n\n"
    },
    "thumbImageForState(int)": {
      "code": "- (UIImage *) thumbImageForState:(UIControlState) state\n{\n    UIImage * re$ult = [self thumbImageForState___int:state];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "thumbTintColor()": {
      "code": "- (UIColor *) thumbTintColor\n{\n    UIColor * re$ult = [self thumbTintColor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "value()": {
      "code": "- (float) value\n{\n    return [self value__];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UISplitViewController": {
    "delegate()": {
      "code": "- (id<UISplitViewControllerDelegate>) delegate\n{\n    id<UISplitViewControllerDelegate> re$ult = [self delegate__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "displayMode()": {
      "code": "- (UISplitViewControllerDisplayMode) displayMode\n{\n    return [self displayMode__];\n}\n\n"
    },
    "displayModeButtonItem()": {
      "code": "- (UIBarButtonItem *) displayModeButtonItem\n{\n    UIBarButtonItem * re$ult = [self displayModeButtonItem__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "isCollapsed()": {
      "code": "- (BOOL) isCollapsed\n{\n    return [self isCollapsed__];\n}\n\n"
    },
    "maximumPrimaryColumnWidth()": {
      "code": "- (CGFloat) maximumPrimaryColumnWidth\n{\n    return [self maximumPrimaryColumnWidth__];\n}\n\n"
    },
    "minimumPrimaryColumnWidth()": {
      "code": "- (CGFloat) minimumPrimaryColumnWidth\n{\n    return [self minimumPrimaryColumnWidth__];\n}\n\n"
    },
    "preferredDisplayMode()": {
      "code": "- (UISplitViewControllerDisplayMode) preferredDisplayMode\n{\n    return [self preferredDisplayMode__];\n}\n\n"
    },
    "preferredPrimaryColumnWidthFraction()": {
      "code": "- (CGFloat) preferredPrimaryColumnWidthFraction\n{\n    return [self preferredPrimaryColumnWidthFraction__];\n}\n\n"
    },
    "presentsWithGesture()": {
      "code": "- (BOOL) presentsWithGesture\n{\n    return [self presentsWithGesture__];\n}\n\n"
    },
    "primaryColumnWidth()": {
      "code": "- (CGFloat) primaryColumnWidth\n{\n    return [self primaryColumnWidth__];\n}\n\n"
    },
    "setDelegate(crossmobile.ios.uikit.UISplitViewControllerDelegate)": {
      "code": "- (void) setDelegate:(id<UISplitViewControllerDelegate>) delegate\n{\n    [self setDelegate___crossmobile_ios_uikit_UISplitViewControllerDelegate:(delegate ? delegate : JAVA_NULL)];\n}\n\n"
    },
    "setMaximumPrimaryColumnWidth(double)": {
      "code": "- (void) setMaximumPrimaryColumnWidth:(CGFloat) maximumPrimaryColumnWidth\n{\n    [self setMaximumPrimaryColumnWidth___double:maximumPrimaryColumnWidth];\n}\n\n"
    },
    "setMinimumPrimaryColumnWidth(double)": {
      "code": "- (void) setMinimumPrimaryColumnWidth:(CGFloat) minimumPrimaryColumnWidth\n{\n    [self setMinimumPrimaryColumnWidth___double:minimumPrimaryColumnWidth];\n}\n\n"
    },
    "setPreferredDisplayMode(int)": {
      "code": "- (void) setPreferredDisplayMode:(UISplitViewControllerDisplayMode) preferredDisplayMode\n{\n    [self setPreferredDisplayMode___int:preferredDisplayMode];\n}\n\n"
    },
    "setPreferredPrimaryColumnWidthFraction(double)": {
      "code": "- (void) setPreferredPrimaryColumnWidthFraction:(CGFloat) preferredPrimaryColumnWidthFraction\n{\n    [self setPreferredPrimaryColumnWidthFraction___double:preferredPrimaryColumnWidthFraction];\n}\n\n"
    },
    "setPresentsWithGesture(boolean)": {
      "code": "- (void) setPresentsWithGesture:(BOOL) presentsWithGesture\n{\n    [self setPresentsWithGesture___boolean:presentsWithGesture];\n}\n\n"
    },
    "setViewControllers(java.util.List)": {
      "code": "- (void) setViewControllers:(NSArray<__kindof UIViewController *> *) viewControllers\n{\n    [self setViewControllers___java_util_List:(viewControllers ? viewControllers : JAVA_NULL)];\n}\n\n"
    },
    "viewControllers()": {
      "code": "- (NSArray<__kindof UIViewController *> *) viewControllers\n{\n    NSArray<__kindof UIViewController *> * re$ult = [self viewControllers__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UISplitViewControllerDelegate": {
    "collapseSecondaryViewController(crossmobile.ios.uikit.UISplitViewController,crossmobile.ios.uikit.UIViewController,crossmobile.ios.uikit.UIViewController)": {
      "code": "- (BOOL) splitViewController:(UISplitViewController *) splitViewController collapseSecondaryViewController:(UIViewController *) secondaryViewController ontoPrimaryViewController:(UIViewController *) primaryViewController\n{\n    return [self collapseSecondaryViewController___crossmobile_ios_uikit_UISplitViewController_crossmobile_ios_uikit_UIViewController_crossmobile_ios_uikit_UIViewController:(splitViewController ? splitViewController : JAVA_NULL) :(secondaryViewController ? secondaryViewController : JAVA_NULL) :(primaryViewController ? primaryViewController : JAVA_NULL)];\n}\n\n"
    },
    "popoverController(crossmobile.ios.uikit.UISplitViewController,crossmobile.ios.uikit.UIPopoverController,crossmobile.ios.uikit.UIViewController)": {
      "code": "- (void) splitViewController:(UISplitViewController *) svc popoverController:(UIPopoverController *) pc willPresentViewController:(UIViewController *) aViewController\n{\n    [self popoverController___crossmobile_ios_uikit_UISplitViewController_crossmobile_ios_uikit_UIPopoverController_crossmobile_ios_uikit_UIViewController:(svc ? svc : JAVA_NULL) :(pc ? pc : JAVA_NULL) :(aViewController ? aViewController : JAVA_NULL)];\n}\n\n"
    },
    "preferredInterfaceOrientationForPresentation(crossmobile.ios.uikit.UISplitViewController)": {
      "code": "- (UIInterfaceOrientation) splitViewControllerPreferredInterfaceOrientationForPresentation:(UISplitViewController *) splitViewController\n{\n    return [self preferredInterfaceOrientationForPresentation___crossmobile_ios_uikit_UISplitViewController:(splitViewController ? splitViewController : JAVA_NULL)];\n}\n\n"
    },
    "primaryViewControllerForCollapsingSplitViewController(crossmobile.ios.uikit.UISplitViewController)": {
      "code": "- (UIViewController *) primaryViewControllerForCollapsingSplitViewController:(UISplitViewController *) splitViewController\n{\n    UIViewController * re$ult = [self primaryViewControllerForCollapsingSplitViewController___crossmobile_ios_uikit_UISplitViewController:(splitViewController ? splitViewController : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "primaryViewControllerForExpandingSplitViewController(crossmobile.ios.uikit.UISplitViewController)": {
      "code": "- (UIViewController *) primaryViewControllerForExpandingSplitViewController:(UISplitViewController *) splitViewController\n{\n    UIViewController * re$ult = [self primaryViewControllerForExpandingSplitViewController___crossmobile_ios_uikit_UISplitViewController:(splitViewController ? splitViewController : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "separateSecondaryViewControllerFromPrimaryViewController(crossmobile.ios.uikit.UISplitViewController,crossmobile.ios.uikit.UIViewController)": {
      "code": "- (UIViewController *) splitViewController:(UISplitViewController *) splitViewController separateSecondaryViewControllerFromPrimaryViewController:(UIViewController *) primaryViewController\n{\n    UIViewController * re$ult = [self separateSecondaryViewControllerFromPrimaryViewController___crossmobile_ios_uikit_UISplitViewController_crossmobile_ios_uikit_UIViewController:(splitViewController ? splitViewController : JAVA_NULL) :(primaryViewController ? primaryViewController : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "shouldHideViewController(crossmobile.ios.uikit.UISplitViewController,crossmobile.ios.uikit.UIViewController,int)": {
      "code": "- (BOOL) splitViewController:(UISplitViewController *) svc shouldHideViewController:(UIViewController *) vc inOrientation:(UIInterfaceOrientation) orientation\n{\n    return [self shouldHideViewController___crossmobile_ios_uikit_UISplitViewController_crossmobile_ios_uikit_UIViewController_int:(svc ? svc : JAVA_NULL) :(vc ? vc : JAVA_NULL) :orientation];\n}\n\n"
    },
    "showDetailViewController(crossmobile.ios.uikit.UISplitViewController,crossmobile.ios.uikit.UIViewController,java.lang.Object)": {
      "code": "- (BOOL) splitViewController:(UISplitViewController *) splitViewController showDetailViewController:(UIViewController *) vc sender:(id) sender\n{\n    return [self showDetailViewController___crossmobile_ios_uikit_UISplitViewController_crossmobile_ios_uikit_UIViewController_java_lang_Object:(splitViewController ? splitViewController : JAVA_NULL) :(vc ? vc : JAVA_NULL) :(sender ? sender : JAVA_NULL)];\n}\n\n"
    },
    "showViewController(crossmobile.ios.uikit.UISplitViewController,crossmobile.ios.uikit.UIViewController,java.lang.Object)": {
      "code": "- (BOOL) splitViewController:(UISplitViewController *) splitViewController showViewController:(UIViewController *) vc sender:(id) sender\n{\n    return [self showViewController___crossmobile_ios_uikit_UISplitViewController_crossmobile_ios_uikit_UIViewController_java_lang_Object:(splitViewController ? splitViewController : JAVA_NULL) :(vc ? vc : JAVA_NULL) :(sender ? sender : JAVA_NULL)];\n}\n\n"
    },
    "supportedInterfaceOrientations(crossmobile.ios.uikit.UISplitViewController)": {
      "code": "- (UIInterfaceOrientationMask) splitViewControllerSupportedInterfaceOrientations:(UISplitViewController *) splitViewController\n{\n    return [self supportedInterfaceOrientations___crossmobile_ios_uikit_UISplitViewController:(splitViewController ? splitViewController : JAVA_NULL)];\n}\n\n"
    },
    "targetDisplayModeForActionInSplitViewController(crossmobile.ios.uikit.UISplitViewController)": {
      "code": "- (UISplitViewControllerDisplayMode) targetDisplayModeForActionInSplitViewController:(UISplitViewController *) svc\n{\n    return [self targetDisplayModeForActionInSplitViewController___crossmobile_ios_uikit_UISplitViewController:(svc ? svc : JAVA_NULL)];\n}\n\n"
    },
    "willChangeToDisplayMode(crossmobile.ios.uikit.UISplitViewController,int)": {
      "code": "- (void) splitViewController:(UISplitViewController *) svc willChangeToDisplayMode:(UISplitViewControllerDisplayMode) displayMode\n{\n    [self willChangeToDisplayMode___crossmobile_ios_uikit_UISplitViewController_int:(svc ? svc : JAVA_NULL) :displayMode];\n}\n\n"
    },
    "willHideViewController(crossmobile.ios.uikit.UISplitViewController,crossmobile.ios.uikit.UIViewController,crossmobile.ios.uikit.UIBarButtonItem,crossmobile.ios.uikit.UIPopoverController)": {
      "code": "- (void) splitViewController:(UISplitViewController *) svc willHideViewController:(UIViewController *) aViewController withBarButtonItem:(UIBarButtonItem *) barButtonItem forPopoverController:(UIPopoverController *) pc\n{\n    [self willHideViewController___crossmobile_ios_uikit_UISplitViewController_crossmobile_ios_uikit_UIViewController_crossmobile_ios_uikit_UIBarButtonItem_crossmobile_ios_uikit_UIPopoverController:(svc ? svc : JAVA_NULL) :(aViewController ? aViewController : JAVA_NULL) :(barButtonItem ? barButtonItem : JAVA_NULL) :(pc ? pc : JAVA_NULL)];\n}\n\n"
    },
    "willShowViewController(crossmobile.ios.uikit.UISplitViewController,crossmobile.ios.uikit.UIViewController,crossmobile.ios.uikit.UIBarButtonItem)": {
      "code": "- (void) splitViewController:(UISplitViewController *) svc willShowViewController:(UIViewController *) aViewController invalidatingBarButtonItem:(UIBarButtonItem *) barButtonItem\n{\n    [self willShowViewController___crossmobile_ios_uikit_UISplitViewController_crossmobile_ios_uikit_UIViewController_crossmobile_ios_uikit_UIBarButtonItem:(svc ? svc : JAVA_NULL) :(aViewController ? aViewController : JAVA_NULL) :(barButtonItem ? barButtonItem : JAVA_NULL)];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIStackView": {
    "addArrangedSubview(crossmobile.ios.uikit.UIView)": {
      "code": "- (void) addArrangedSubview:(UIView *) view\n{\n    [self addArrangedSubview___crossmobile_ios_uikit_UIView:(view ? view : JAVA_NULL)];\n}\n\n"
    },
    "alignment()": {
      "code": "- (UIStackViewAlignment) alignment\n{\n    return [self alignment__];\n}\n\n"
    },
    "arrangedSubviews()": {
      "code": "- (NSArray<__kindof UIView *> *) arrangedSubviews\n{\n    NSArray<__kindof UIView *> * re$ult = [self arrangedSubviews__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "axis()": {
      "code": "- (UILayoutConstraintAxis) axis\n{\n    return [self axis__];\n}\n\n"
    },
    "distribution()": {
      "code": "- (UIStackViewDistribution) distribution\n{\n    return [self distribution__];\n}\n\n"
    },
    "insertArrangedSubview(crossmobile.ios.uikit.UIView,int)": {
      "code": "- (void) insertArrangedSubview:(UIView *) view atIndex:(NSUInteger) stackIndex\n{\n    [self insertArrangedSubview___crossmobile_ios_uikit_UIView_int:(view ? view : JAVA_NULL) :stackIndex];\n}\n\n"
    },
    "isBaselineRelativeArrangement()": {
      "code": "- (BOOL) isBaselineRelativeArrangement\n{\n    return [self isBaselineRelativeArrangement__];\n}\n\n"
    },
    "isLayoutMarginsRelativeArrangement()": {
      "code": "- (BOOL) isLayoutMarginsRelativeArrangement\n{\n    return [self isLayoutMarginsRelativeArrangement__];\n}\n\n"
    },
    "removeArrangedSubview(crossmobile.ios.uikit.UIView)": {
      "code": "- (void) removeArrangedSubview:(UIView *) view\n{\n    [self removeArrangedSubview___crossmobile_ios_uikit_UIView:(view ? view : JAVA_NULL)];\n}\n\n"
    },
    "setAlignment(int)": {
      "code": "- (void) setAlignment:(UIStackViewAlignment) alignment\n{\n    [self setAlignment___int:alignment];\n}\n\n"
    },
    "setAxis(int)": {
      "code": "- (void) setAxis:(UILayoutConstraintAxis) axis\n{\n    [self setAxis___int:axis];\n}\n\n"
    },
    "setBaselineRelativeArrangement(boolean)": {
      "code": "- (void) setBaselineRelativeArrangement:(BOOL) baselineRelativeArrangement\n{\n    [self setBaselineRelativeArrangement___boolean:baselineRelativeArrangement];\n}\n\n"
    },
    "setDistribution(int)": {
      "code": "- (void) setDistribution:(UIStackViewDistribution) distribution\n{\n    [self setDistribution___int:distribution];\n}\n\n"
    },
    "setLayoutMarginsRelativeArrangement(boolean)": {
      "code": "- (void) setLayoutMarginsRelativeArrangement:(BOOL) layoutMarginsRelativeArrangement\n{\n    [self setLayoutMarginsRelativeArrangement___boolean:layoutMarginsRelativeArrangement];\n}\n\n"
    },
    "setSpacing(double)": {
      "code": "- (void) setSpacing:(CGFloat) spacing\n{\n    [self setSpacing___double:spacing];\n}\n\n"
    },
    "spacing()": {
      "code": "- (CGFloat) spacing\n{\n    return [self spacing__];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIStepper": {
    "autorepeat()": {
      "code": "- (BOOL) autorepeat\n{\n    return [self autorepeat__];\n}\n\n"
    },
    "backgroundImageForState(int)": {
      "code": "- (UIImage *) backgroundImageForState:(UIControlState) state\n{\n    UIImage * re$ult = [self backgroundImageForState___int:state];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "decrementImageForState(int)": {
      "code": "- (UIImage *) decrementImageForState:(UIControlState) state\n{\n    UIImage * re$ult = [self decrementImageForState___int:state];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "dividerImageForLeftSegmentState(int,int)": {
      "code": "- (UIImage *) dividerImageForLeftSegmentState:(UIControlState) state rightSegmentState:(UIControlState) state\n{\n    UIImage * re$ult = [self dividerImageForLeftSegmentState___int_int:state :state];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "incrementImageForState(int)": {
      "code": "- (UIImage *) incrementImageForState:(UIControlState) state\n{\n    UIImage * re$ult = [self incrementImageForState___int:state];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "isContinuous()": {
      "code": "- (BOOL) isContinuous\n{\n    return [self isContinuous__];\n}\n\n"
    },
    "maximumValue()": {
      "code": "- (double) maximumValue\n{\n    return [self maximumValue__];\n}\n\n"
    },
    "minimumValue()": {
      "code": "- (double) minimumValue\n{\n    return [self minimumValue__];\n}\n\n"
    },
    "setAutorepeat(boolean)": {
      "code": "- (void) setAutorepeat:(BOOL) autorepeat\n{\n    [self setAutorepeat___boolean:autorepeat];\n}\n\n"
    },
    "setBackgroundImage(crossmobile.ios.uikit.UIImage,int)": {
      "code": "- (void) setBackgroundImage:(UIImage *) image forState:(UIControlState) state\n{\n    [self setBackgroundImage___crossmobile_ios_uikit_UIImage_int:(image ? image : JAVA_NULL) :state];\n}\n\n"
    },
    "setContinuous(boolean)": {
      "code": "- (void) setContinuous:(BOOL) continuous\n{\n    [self setContinuous___boolean:continuous];\n}\n\n"
    },
    "setDecrementImage(crossmobile.ios.uikit.UIImage,int)": {
      "code": "- (void) setDecrementImage:(UIImage *) image forState:(UIControlState) state\n{\n    [self setDecrementImage___crossmobile_ios_uikit_UIImage_int:(image ? image : JAVA_NULL) :state];\n}\n\n"
    },
    "setDividerImage(crossmobile.ios.uikit.UIImage,int,int)": {
      "code": "- (void) setDividerImage:(UIImage *) image forLeftSegmentState:(UIControlState) leftState rightSegmentState:(UIControlState) rightState\n{\n    [self setDividerImage___crossmobile_ios_uikit_UIImage_int_int:(image ? image : JAVA_NULL) :leftState :rightState];\n}\n\n"
    },
    "setIncrementImage(crossmobile.ios.uikit.UIImage,int)": {
      "code": "- (void) setIncrementImage:(UIImage *) image forState:(UIControlState) state\n{\n    [self setIncrementImage___crossmobile_ios_uikit_UIImage_int:(image ? image : JAVA_NULL) :state];\n}\n\n"
    },
    "setMaximumValue(double)": {
      "code": "- (void) setMaximumValue:(double) maximumValue\n{\n    [self setMaximumValue___double:maximumValue];\n}\n\n"
    },
    "setMinimumValue(double)": {
      "code": "- (void) setMinimumValue:(double) minimumValue\n{\n    [self setMinimumValue___double:minimumValue];\n}\n\n"
    },
    "setStepValue(double)": {
      "code": "- (void) setStepValue:(double) stepValue\n{\n    [self setStepValue___double:stepValue];\n}\n\n"
    },
    "setValue(double)": {
      "code": "- (void) setValue:(double) value\n{\n    [self setValue___double:value];\n}\n\n"
    },
    "setWraps(boolean)": {
      "code": "- (void) setWraps:(BOOL) wraps\n{\n    [self setWraps___boolean:wraps];\n}\n\n"
    },
    "stepValue()": {
      "code": "- (double) stepValue\n{\n    return [self stepValue__];\n}\n\n"
    },
    "value()": {
      "code": "- (double) value\n{\n    return [self value__];\n}\n\n"
    },
    "wraps()": {
      "code": "- (BOOL) wraps\n{\n    return [self wraps__];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIStoryboard": {
    "instantiateInitialViewController()": {
      "code": "- (UIViewController *) instantiateInitialViewController\n{\n    UIViewController * re$ult = [self instantiateInitialViewController__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "instantiateViewControllerWithIdentifier(java.lang.String)": {
      "code": "- (UIViewController *) instantiateViewControllerWithIdentifier:(NSString *) identifier\n{\n    UIViewController * re$ult = [self instantiateViewControllerWithIdentifier___java_lang_String:(identifier ? identifier : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIStoryboardSegue": {
    "destinationViewController()": {
      "code": "- (UIViewController *) destinationViewController\n{\n    UIViewController * re$ult = [self destinationViewController__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "identifier()": {
      "code": "- (NSString *) identifier\n{\n    NSString * re$ult = [self identifier__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "perform()": {
      "code": "- (void) perform\n{\n    [self perform__];\n}\n\n"
    },
    "sourceViewController()": {
      "code": "- (UIViewController *) sourceViewController\n{\n    UIViewController * re$ult = [self sourceViewController__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIStoryboardUnwindSegueSource": {
    "sender()": {
      "code": "- (id) sender\n{\n    id re$ult = [self sender__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "sourceViewController()": {
      "code": "- (UIViewController *) sourceViewController\n{\n    UIViewController * re$ult = [self sourceViewController__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "unwindAction()": {
      "code": "- (SEL) unwindAction\n{\n    SEL re$ult = [self unwindAction__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UISwipeGestureRecognizer": {
    "direction()": {
      "code": "- (UISwipeGestureRecognizerDirection) direction\n{\n    return [self direction__];\n}\n\n"
    },
    "numberOfTouchesRequired()": {
      "code": "- (NSUInteger) numberOfTouchesRequired\n{\n    return [self numberOfTouchesRequired__];\n}\n\n"
    },
    "setDirection(int)": {
      "code": "- (void) setDirection:(UISwipeGestureRecognizerDirection) direction\n{\n    [self setDirection___int:direction];\n}\n\n"
    },
    "setNumberOfTouchesRequired(int)": {
      "code": "- (void) setNumberOfTouchesRequired:(NSUInteger) numberOfTouchesRequired\n{\n    [self setNumberOfTouchesRequired___int:numberOfTouchesRequired];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UISwitch": {
    "isOn()": {
      "code": "- (BOOL) isOn\n{\n    return [self isOn__];\n}\n\n"
    },
    "onTintColor()": {
      "code": "- (UIColor *) onTintColor\n{\n    UIColor * re$ult = [self onTintColor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "setOn(boolean)": {
      "code": "- (void) setOn:(BOOL) on\n{\n    [self setOn___boolean:on];\n}\n\n"
    },
    "setOn(boolean,boolean)": {
      "code": "- (void) setOn:(BOOL) on animated:(BOOL) animated\n{\n    [self setOn___boolean_boolean:on :animated];\n}\n\n"
    },
    "setOnTintColor(crossmobile.ios.uikit.UIColor)": {
      "code": "- (void) setOnTintColor:(UIColor *) onTintColor\n{\n    [self setOnTintColor___crossmobile_ios_uikit_UIColor:(onTintColor ? onTintColor : JAVA_NULL)];\n}\n\n"
    },
    "setThumbTintColor(crossmobile.ios.uikit.UIColor)": {
      "code": "- (void) setThumbTintColor:(UIColor *) thumbTintColor\n{\n    [self setThumbTintColor___crossmobile_ios_uikit_UIColor:(thumbTintColor ? thumbTintColor : JAVA_NULL)];\n}\n\n"
    },
    "thumbTintColor()": {
      "code": "- (UIColor *) thumbTintColor\n{\n    UIColor * re$ult = [self thumbTintColor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UITabBar": {
    "backgroundImage()": {
      "code": "- (UIImage *) backgroundImage\n{\n    UIImage * re$ult = [self backgroundImage__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "barStyle()": {
      "code": "- (UIBarStyle) barStyle\n{\n    return [self barStyle__];\n}\n\n"
    },
    "barTintColor()": {
      "code": "- (UIColor *) barTintColor\n{\n    UIColor * re$ult = [self barTintColor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "beginCustomizingItems(java.util.List)": {
      "code": "- (void) beginCustomizingItems:(NSArray<UITabBarItem *> *) items\n{\n    [self beginCustomizingItems___java_util_List:(items ? items : JAVA_NULL)];\n}\n\n"
    },
    "delegate()": {
      "code": "- (id<UITabBarDelegate>) delegate\n{\n    id<UITabBarDelegate> re$ult = [self delegate__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "endCustomizingAnimated(boolean)": {
      "code": "- (BOOL) endCustomizingAnimated:(BOOL) animated\n{\n    return [self endCustomizingAnimated___boolean:animated];\n}\n\n"
    },
    "isCustomizing()": {
      "code": "- (BOOL) isCustomizing\n{\n    return [self isCustomizing__];\n}\n\n"
    },
    "isTranslucent()": {
      "code": "- (BOOL) isTranslucent\n{\n    return [self isTranslucent__];\n}\n\n"
    },
    "itemPositioning()": {
      "code": "- (UITabBarItemPositioning) itemPositioning\n{\n    return [self itemPositioning__];\n}\n\n"
    },
    "itemSpacing()": {
      "code": "- (CGFloat) itemSpacing\n{\n    return [self itemSpacing__];\n}\n\n"
    },
    "itemWidth()": {
      "code": "- (CGFloat) itemWidth\n{\n    return [self itemWidth__];\n}\n\n"
    },
    "items()": {
      "code": "- (NSArray<UITabBarItem *> *) items\n{\n    NSArray<UITabBarItem *> * re$ult = [self items__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "selectedImageTintColor()": {
      "code": "- (UIColor *) selectedImageTintColor\n{\n    UIColor * re$ult = [self selectedImageTintColor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "selectedItem()": {
      "code": "- (UITabBarItem *) selectedItem\n{\n    UITabBarItem * re$ult = [self selectedItem__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "selectionIndicatorImage()": {
      "code": "- (UIImage *) selectionIndicatorImage\n{\n    UIImage * re$ult = [self selectionIndicatorImage__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "setBackgroundImage(crossmobile.ios.uikit.UIImage)": {
      "code": "- (void) setBackgroundImage:(UIImage *) backgroundImage\n{\n    [self setBackgroundImage___crossmobile_ios_uikit_UIImage:(backgroundImage ? backgroundImage : JAVA_NULL)];\n}\n\n"
    },
    "setBarStyle(int)": {
      "code": "- (void) setBarStyle:(UIBarStyle) barStyle\n{\n    [self setBarStyle___int:barStyle];\n}\n\n"
    },
    "setBarTintColor(crossmobile.ios.uikit.UIColor)": {
      "code": "- (void) setBarTintColor:(UIColor *) barTintColor\n{\n    [self setBarTintColor___crossmobile_ios_uikit_UIColor:(barTintColor ? barTintColor : JAVA_NULL)];\n}\n\n"
    },
    "setDelegate(crossmobile.ios.uikit.UITabBarDelegate)": {
      "code": "- (void) setDelegate:(id<UITabBarDelegate>) delegate\n{\n    [self setDelegate___crossmobile_ios_uikit_UITabBarDelegate:(delegate ? delegate : JAVA_NULL)];\n}\n\n"
    },
    "setItemPositioning(int)": {
      "code": "- (void) setItemPositioning:(UITabBarItemPositioning) itemPositioning\n{\n    [self setItemPositioning___int:itemPositioning];\n}\n\n"
    },
    "setItemSpacing(double)": {
      "code": "- (void) setItemSpacing:(CGFloat) itemSpacing\n{\n    [self setItemSpacing___double:itemSpacing];\n}\n\n"
    },
    "setItemWidth(double)": {
      "code": "- (void) setItemWidth:(CGFloat) itemWidth\n{\n    [self setItemWidth___double:itemWidth];\n}\n\n"
    },
    "setItems(java.util.List)": {
      "code": "- (void) setItems:(NSArray<UITabBarItem *> *) items\n{\n    [self setItems___java_util_List:(items ? items : JAVA_NULL)];\n}\n\n"
    },
    "setItems(java.util.List,boolean)": {
      "code": "- (void) setItems:(NSArray<UITabBarItem *> *) items animated:(BOOL) animated\n{\n    [self setItems___java_util_List_boolean:(items ? items : JAVA_NULL) :animated];\n}\n\n"
    },
    "setSelectedImageTintColor(crossmobile.ios.uikit.UIColor)": {
      "code": "- (void) setSelectedImageTintColor:(UIColor *) selectedImageTintColor\n{\n    [self setSelectedImageTintColor___crossmobile_ios_uikit_UIColor:(selectedImageTintColor ? selectedImageTintColor : JAVA_NULL)];\n}\n\n"
    },
    "setSelectedItem(crossmobile.ios.uikit.UITabBarItem)": {
      "code": "- (void) setSelectedItem:(UITabBarItem *) selectedItem\n{\n    [self setSelectedItem___crossmobile_ios_uikit_UITabBarItem:(selectedItem ? selectedItem : JAVA_NULL)];\n}\n\n"
    },
    "setSelectionIndicatorImage(crossmobile.ios.uikit.UIImage)": {
      "code": "- (void) setSelectionIndicatorImage:(UIImage *) selectionIndicatorImage\n{\n    [self setSelectionIndicatorImage___crossmobile_ios_uikit_UIImage:(selectionIndicatorImage ? selectionIndicatorImage : JAVA_NULL)];\n}\n\n"
    },
    "setShadowImage(crossmobile.ios.uikit.UIImage)": {
      "code": "- (void) setShadowImage:(UIImage *) shadowImage\n{\n    [self setShadowImage___crossmobile_ios_uikit_UIImage:(shadowImage ? shadowImage : JAVA_NULL)];\n}\n\n"
    },
    "setTranslucent(boolean)": {
      "code": "- (void) setTranslucent:(BOOL) translucent\n{\n    [self setTranslucent___boolean:translucent];\n}\n\n"
    },
    "shadowImage()": {
      "code": "- (UIImage *) shadowImage\n{\n    UIImage * re$ult = [self shadowImage__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UITabBarController": {
    "customizableViewControllers()": {
      "code": "- (NSArray<__kindof UIViewController *> *) customizableViewControllers\n{\n    NSArray<__kindof UIViewController *> * re$ult = [self customizableViewControllers__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "delegate()": {
      "code": "- (id<UITabBarControllerDelegate>) delegate\n{\n    id<UITabBarControllerDelegate> re$ult = [self delegate__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "moreNavigationController()": {
      "code": "- (UINavigationController *) moreNavigationController\n{\n    UINavigationController * re$ult = [self moreNavigationController__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "selectedIndex()": {
      "code": "- (NSUInteger) selectedIndex\n{\n    return [self selectedIndex__];\n}\n\n"
    },
    "selectedViewController()": {
      "code": "- (UIViewController *) selectedViewController\n{\n    UIViewController * re$ult = [self selectedViewController__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "setCustomizableViewControllers(java.util.List)": {
      "code": "- (void) setCustomizableViewControllers:(NSArray<__kindof UIViewController *> *) customizableViewControllers\n{\n    [self setCustomizableViewControllers___java_util_List:(customizableViewControllers ? customizableViewControllers : JAVA_NULL)];\n}\n\n"
    },
    "setDelegate(crossmobile.ios.uikit.UITabBarControllerDelegate)": {
      "code": "- (void) setDelegate:(id<UITabBarControllerDelegate>) delegate\n{\n    [self setDelegate___crossmobile_ios_uikit_UITabBarControllerDelegate:(delegate ? delegate : JAVA_NULL)];\n}\n\n"
    },
    "setSelectedIndex(int)": {
      "code": "- (void) setSelectedIndex:(NSUInteger) selectedIndex\n{\n    [self setSelectedIndex___int:selectedIndex];\n}\n\n"
    },
    "setSelectedViewController(crossmobile.ios.uikit.UIViewController)": {
      "code": "- (void) setSelectedViewController:(UIViewController *) selectedViewController\n{\n    [self setSelectedViewController___crossmobile_ios_uikit_UIViewController:(selectedViewController ? selectedViewController : JAVA_NULL)];\n}\n\n"
    },
    "setViewControllers(java.util.List)": {
      "code": "- (void) setViewControllers:(NSArray<__kindof UIViewController *> *) viewControllers\n{\n    [self setViewControllers___java_util_List:(viewControllers ? viewControllers : JAVA_NULL)];\n}\n\n"
    },
    "setViewControllers(java.util.List,boolean)": {
      "code": "- (void) setViewControllers:(NSArray<__kindof UIViewController *> *) viewControllers animated:(BOOL) animated\n{\n    [self setViewControllers___java_util_List_boolean:(viewControllers ? viewControllers : JAVA_NULL) :animated];\n}\n\n"
    },
    "tabBar()": {
      "code": "- (UITabBar *) tabBar\n{\n    UITabBar * re$ult = [self tabBar__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "viewControllers()": {
      "code": "- (NSArray<__kindof UIViewController *> *) viewControllers\n{\n    NSArray<__kindof UIViewController *> * re$ult = [self viewControllers__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UITabBarControllerDelegate": {
    "didEndCustomizingViewControllers(crossmobile.ios.uikit.UITabBarController,java.util.List,boolean)": {
      "code": "- (void) tabBarController:(UITabBarController *) tabBarController didEndCustomizingViewControllers:(NSArray<__kindof UIViewController *> *) viewControllers changed:(BOOL) changed\n{\n    [self didEndCustomizingViewControllers___crossmobile_ios_uikit_UITabBarController_java_util_List_boolean:(tabBarController ? tabBarController : JAVA_NULL) :(viewControllers ? viewControllers : JAVA_NULL) :changed];\n}\n\n"
    },
    "didSelectViewController(crossmobile.ios.uikit.UITabBarController,crossmobile.ios.uikit.UIViewController)": {
      "code": "- (void) tabBarController:(UITabBarController *) tabBarController didSelectViewController:(UIViewController *) viewController\n{\n    [self didSelectViewController___crossmobile_ios_uikit_UITabBarController_crossmobile_ios_uikit_UIViewController:(tabBarController ? tabBarController : JAVA_NULL) :(viewController ? viewController : JAVA_NULL)];\n}\n\n"
    },
    "shouldSelectViewController(crossmobile.ios.uikit.UITabBarController,crossmobile.ios.uikit.UIViewController)": {
      "code": "- (BOOL) tabBarController:(UITabBarController *) tabBarController shouldSelectViewController:(UIViewController *) viewController\n{\n    return [self shouldSelectViewController___crossmobile_ios_uikit_UITabBarController_crossmobile_ios_uikit_UIViewController:(tabBarController ? tabBarController : JAVA_NULL) :(viewController ? viewController : JAVA_NULL)];\n}\n\n"
    },
    "willBeginCustomizingViewControllers(crossmobile.ios.uikit.UITabBarController,java.util.List)": {
      "code": "- (void) tabBarController:(UITabBarController *) tabBarController willBeginCustomizingViewControllers:(NSArray<__kindof UIViewController *> *) viewControllers\n{\n    [self willBeginCustomizingViewControllers___crossmobile_ios_uikit_UITabBarController_java_util_List:(tabBarController ? tabBarController : JAVA_NULL) :(viewControllers ? viewControllers : JAVA_NULL)];\n}\n\n"
    },
    "willEndCustomizingViewControllers(crossmobile.ios.uikit.UITabBarController,java.util.List,boolean)": {
      "code": "- (void) tabBarController:(UITabBarController *) tabBarController willEndCustomizingViewControllers:(NSArray<__kindof UIViewController *> *) viewControllers changed:(BOOL) changed\n{\n    [self willEndCustomizingViewControllers___crossmobile_ios_uikit_UITabBarController_java_util_List_boolean:(tabBarController ? tabBarController : JAVA_NULL) :(viewControllers ? viewControllers : JAVA_NULL) :changed];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UITabBarDelegate": {
    "didBeginCustomizingItems(crossmobile.ios.uikit.UITabBar,java.util.List)": {
      "code": "- (void) tabBar:(UITabBar *) tabBar didBeginCustomizingItems:(NSArray<UITabBarItem *> *) items\n{\n    [self didBeginCustomizingItems___crossmobile_ios_uikit_UITabBar_java_util_List:(tabBar ? tabBar : JAVA_NULL) :(items ? items : JAVA_NULL)];\n}\n\n"
    },
    "didEndCustomizingItems(crossmobile.ios.uikit.UITabBar,java.util.List,boolean)": {
      "code": "- (void) tabBar:(UITabBar *) tabBar didEndCustomizingItems:(NSArray<UITabBarItem *> *) items changed:(BOOL) changed\n{\n    [self didEndCustomizingItems___crossmobile_ios_uikit_UITabBar_java_util_List_boolean:(tabBar ? tabBar : JAVA_NULL) :(items ? items : JAVA_NULL) :changed];\n}\n\n"
    },
    "didSelectItem(crossmobile.ios.uikit.UITabBar,crossmobile.ios.uikit.UITabBarItem)": {
      "code": "- (void) tabBar:(UITabBar *) tabBar didSelectItem:(UITabBarItem *) item\n{\n    [self didSelectItem___crossmobile_ios_uikit_UITabBar_crossmobile_ios_uikit_UITabBarItem:(tabBar ? tabBar : JAVA_NULL) :(item ? item : JAVA_NULL)];\n}\n\n"
    },
    "willBeginCustomizingItems(crossmobile.ios.uikit.UITabBar,java.util.List)": {
      "code": "- (void) tabBar:(UITabBar *) tabBar willBeginCustomizingItems:(NSArray<UITabBarItem *> *) items\n{\n    [self willBeginCustomizingItems___crossmobile_ios_uikit_UITabBar_java_util_List:(tabBar ? tabBar : JAVA_NULL) :(items ? items : JAVA_NULL)];\n}\n\n"
    },
    "willEndCustomizingItems(crossmobile.ios.uikit.UITabBar,java.util.List,boolean)": {
      "code": "- (void) tabBar:(UITabBar *) tabBar willEndCustomizingItems:(NSArray<UITabBarItem *> *) items changed:(BOOL) changed\n{\n    [self willEndCustomizingItems___crossmobile_ios_uikit_UITabBar_java_util_List_boolean:(tabBar ? tabBar : JAVA_NULL) :(items ? items : JAVA_NULL) :changed];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UITabBarItem": {
    "badgeValue()": {
      "code": "- (NSString *) badgeValue\n{\n    NSString * re$ult = [self badgeValue__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "setBadgeValue(java.lang.String)": {
      "code": "- (void) setBadgeValue:(NSString *) badgeValue\n{\n    [self setBadgeValue___java_lang_String:(badgeValue ? badgeValue : JAVA_NULL)];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UITableView": {
    "allowsMultipleSelection()": {
      "code": "- (BOOL) allowsMultipleSelection\n{\n    return [self allowsMultipleSelection__];\n}\n\n"
    },
    "allowsSelection()": {
      "code": "- (BOOL) allowsSelection\n{\n    return [self allowsSelection__];\n}\n\n"
    },
    "dataSource()": {
      "code": "- (id<UITableViewDataSource>) dataSource\n{\n    id<UITableViewDataSource> re$ult = [self dataSource__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "deleteRowsAtIndexPaths(java.util.List,int)": {
      "code": "- (void) deleteRowsAtIndexPaths:(NSArray<NSIndexPath *> *) indexPaths withRowAnimation:(UITableViewRowAnimation) animation\n{\n    [self deleteRowsAtIndexPaths___java_util_List_int:(indexPaths ? indexPaths : JAVA_NULL) :animation];\n}\n\n"
    },
    "dequeueReusableCellWithIdentifier(java.lang.String)": {
      "code": "- (UITableViewCell *) dequeueReusableCellWithIdentifier:(NSString *) identifier\n{\n    UITableViewCell * re$ult = [self dequeueReusableCellWithIdentifier___java_lang_String:(identifier ? identifier : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "deselectRowAtIndexPath(crossmobile.ios.foundation.NSIndexPath,boolean)": {
      "code": "- (void) deselectRowAtIndexPath:(NSIndexPath *) indexPath animated:(BOOL) animated\n{\n    [self deselectRowAtIndexPath___crossmobile_ios_foundation_NSIndexPath_boolean:(indexPath ? indexPath : JAVA_NULL) :animated];\n}\n\n"
    },
    "estimatedRowHeight()": {
      "code": "- (CGFloat) estimatedRowHeight\n{\n    return [self estimatedRowHeight__];\n}\n\n"
    },
    "indexPathForRowAtPoint(crossmobile.ios.coregraphics.CGPoint)": {
      "code": "- (NSIndexPath *) indexPathForRowAtPoint:(CGPoint) point\n{\n    crossmobile_ios_coregraphics_CGPoint* point$conv = [[crossmobile_ios_coregraphics_CGPoint alloc] initWithCGPoint:point];\n    NSIndexPath * re$ult = [self indexPathForRowAtPoint___crossmobile_ios_coregraphics_CGPoint:point$conv];\n    [point$conv release];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "indexPathForSelectedRow()": {
      "code": "- (NSIndexPath *) indexPathForSelectedRow\n{\n    NSIndexPath * re$ult = [self indexPathForSelectedRow__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "indexPathsForSelectedRows()": {
      "code": "- (NSArray<NSIndexPath *> *) indexPathsForSelectedRows\n{\n    NSArray<NSIndexPath *> * re$ult = [self indexPathsForSelectedRows__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "indexPathsForVisibleRows()": {
      "code": "- (NSArray<NSIndexPath *> *) indexPathsForVisibleRows\n{\n    NSArray<NSIndexPath *> * re$ult = [self indexPathsForVisibleRows__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "insertRowsAtIndexPaths(java.util.List,int)": {
      "code": "- (void) insertRowsAtIndexPaths:(NSArray<NSIndexPath *> *) indexPaths withRowAnimation:(UITableViewRowAnimation) animation\n{\n    [self insertRowsAtIndexPaths___java_util_List_int:(indexPaths ? indexPaths : JAVA_NULL) :animation];\n}\n\n"
    },
    "isEditing()": {
      "code": "- (BOOL) isEditing\n{\n    return [self isEditing__];\n}\n\n"
    },
    "registerClass(java.lang.Class,java.lang.String)": {
      "code": "- (void) registerClass:(Class) cellClass forCellReuseIdentifier:(NSString *) identifier\n{\n    [self registerClass___java_lang_Class_java_lang_String:(cellClass ? cellClass : JAVA_NULL) :(identifier ? identifier : JAVA_NULL)];\n}\n\n"
    },
    "registerNib(crossmobile.ios.uikit.UINib,java.lang.String)": {
      "code": "- (void) registerNib:(UINib *) nib forCellReuseIdentifier:(NSString *) identifier\n{\n    [self registerNib___crossmobile_ios_uikit_UINib_java_lang_String:(nib ? nib : JAVA_NULL) :(identifier ? identifier : JAVA_NULL)];\n}\n\n"
    },
    "reloadData()": {
      "code": "- (void) reloadData\n{\n    [self reloadData__];\n}\n\n"
    },
    "reloadRowsAtIndexPaths(java.util.List,int)": {
      "code": "- (void) reloadRowsAtIndexPaths:(NSArray<NSIndexPath *> *) indexPaths withRowAnimation:(UITableViewRowAnimation) animation\n{\n    [self reloadRowsAtIndexPaths___java_util_List_int:(indexPaths ? indexPaths : JAVA_NULL) :animation];\n}\n\n"
    },
    "rowHeight()": {
      "code": "- (CGFloat) rowHeight\n{\n    return [self rowHeight__];\n}\n\n"
    },
    "scrollToNearestSelectedRowAtScrollPosition(int,boolean)": {
      "code": "- (void) scrollToNearestSelectedRowAtScrollPosition:(UITableViewScrollPosition) scrollPosition animated:(BOOL) animated\n{\n    [self scrollToNearestSelectedRowAtScrollPosition___int_boolean:scrollPosition :animated];\n}\n\n"
    },
    "scrollToRowAtIndexPath(crossmobile.ios.foundation.NSIndexPath,int,boolean)": {
      "code": "- (void) scrollToRowAtIndexPath:(NSIndexPath *) indexPath atScrollPosition:(UITableViewScrollPosition) scrollPosition animated:(BOOL) animated\n{\n    [self scrollToRowAtIndexPath___crossmobile_ios_foundation_NSIndexPath_int_boolean:(indexPath ? indexPath : JAVA_NULL) :scrollPosition :animated];\n}\n\n"
    },
    "sectionFooterHeight()": {
      "code": "- (CGFloat) sectionFooterHeight\n{\n    return [self sectionFooterHeight__];\n}\n\n"
    },
    "sectionHeaderHeight()": {
      "code": "- (CGFloat) sectionHeaderHeight\n{\n    return [self sectionHeaderHeight__];\n}\n\n"
    },
    "selectRowAtIndexPath(crossmobile.ios.foundation.NSIndexPath,boolean,int)": {
      "code": "- (void) selectRowAtIndexPath:(NSIndexPath *) indexPath animated:(BOOL) animated scrollPosition:(UITableViewScrollPosition) scrollPosition\n{\n    [self selectRowAtIndexPath___crossmobile_ios_foundation_NSIndexPath_boolean_int:(indexPath ? indexPath : JAVA_NULL) :animated :scrollPosition];\n}\n\n"
    },
    "separatorColor()": {
      "code": "- (UIColor *) separatorColor\n{\n    UIColor * re$ult = [self separatorColor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "separatorStyle()": {
      "code": "- (UITableViewCellSeparatorStyle) separatorStyle\n{\n    return [self separatorStyle__];\n}\n\n"
    },
    "setAllowsMultipleSelection(boolean)": {
      "code": "- (void) setAllowsMultipleSelection:(BOOL) allowsMultipleSelection\n{\n    [self setAllowsMultipleSelection___boolean:allowsMultipleSelection];\n}\n\n"
    },
    "setAllowsSelection(boolean)": {
      "code": "- (void) setAllowsSelection:(BOOL) allowsSelection\n{\n    [self setAllowsSelection___boolean:allowsSelection];\n}\n\n"
    },
    "setDataSource(crossmobile.ios.uikit.UITableViewDataSource)": {
      "code": "- (void) setDataSource:(id<UITableViewDataSource>) dataSource\n{\n    [self setDataSource___crossmobile_ios_uikit_UITableViewDataSource:(dataSource ? dataSource : JAVA_NULL)];\n}\n\n"
    },
    "setDelegate(crossmobile.ios.uikit.UITableViewDelegate)": {
      "code": "- (void) setDelegate:(id<UITableViewDelegate>) delegate\n{\n    [self setDelegate___crossmobile_ios_uikit_UITableViewDelegate:(delegate ? delegate : JAVA_NULL)];\n}\n\n"
    },
    "setEditing(boolean)": {
      "code": "- (void) setEditing:(BOOL) editing\n{\n    [self setEditing___boolean:editing];\n}\n\n"
    },
    "setEditing(boolean,boolean)": {
      "code": "- (void) setEditing:(BOOL) editing animated:(BOOL) animated\n{\n    [self setEditing___boolean_boolean:editing :animated];\n}\n\n"
    },
    "setEstimatedRowHeight(double)": {
      "code": "- (void) setEstimatedRowHeight:(CGFloat) estimatedRowHeight\n{\n    [self setEstimatedRowHeight___double:estimatedRowHeight];\n}\n\n"
    },
    "setRowHeight(double)": {
      "code": "- (void) setRowHeight:(CGFloat) rowHeight\n{\n    [self setRowHeight___double:rowHeight];\n}\n\n"
    },
    "setSectionFooterHeight(double)": {
      "code": "- (void) setSectionFooterHeight:(CGFloat) sectionFooterHeight\n{\n    [self setSectionFooterHeight___double:sectionFooterHeight];\n}\n\n"
    },
    "setSectionHeaderHeight(double)": {
      "code": "- (void) setSectionHeaderHeight:(CGFloat) sectionHeaderHeight\n{\n    [self setSectionHeaderHeight___double:sectionHeaderHeight];\n}\n\n"
    },
    "setSeparatorColor(crossmobile.ios.uikit.UIColor)": {
      "code": "- (void) setSeparatorColor:(UIColor *) separatorColor\n{\n    [self setSeparatorColor___crossmobile_ios_uikit_UIColor:(separatorColor ? separatorColor : JAVA_NULL)];\n}\n\n"
    },
    "setSeparatorStyle(int)": {
      "code": "- (void) setSeparatorStyle:(UITableViewCellSeparatorStyle) separatorStyle\n{\n    [self setSeparatorStyle___int:separatorStyle];\n}\n\n"
    },
    "tableViewDelegate()": {
      "code": "- (id<UITableViewDelegate>) delegate\n{\n    id<UITableViewDelegate> re$ult = [self tableViewDelegate__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UITableViewCell": {
    "accessoryType()": {
      "code": "- (UITableViewCellAccessoryType) accessoryType\n{\n    return [self accessoryType__];\n}\n\n"
    },
    "accessoryView()": {
      "code": "- (UIView *) accessoryView\n{\n    UIView * re$ult = [self accessoryView__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "backgroundView()": {
      "code": "- (UIView *) backgroundView\n{\n    UIView * re$ult = [self backgroundView__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "contentView()": {
      "code": "- (UIView *) contentView\n{\n    UIView * re$ult = [self contentView__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "detailTextLabel()": {
      "code": "- (UILabel *) detailTextLabel\n{\n    UILabel * re$ult = [self detailTextLabel__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "editingStyle()": {
      "code": "- (UITableViewCellEditingStyle) editingStyle\n{\n    return [self editingStyle__];\n}\n\n"
    },
    "imageView()": {
      "code": "- (UIImageView *) imageView\n{\n    UIImageView * re$ult = [self imageView__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "isHighlighted()": {
      "code": "- (BOOL) isHighlighted\n{\n    return [self isHighlighted__];\n}\n\n"
    },
    "isSelected()": {
      "code": "- (BOOL) isSelected\n{\n    return [self isSelected__];\n}\n\n"
    },
    "prepareForReuse()": {
      "code": "- (void) prepareForReuse\n{\n    [self prepareForReuse__];\n}\n\n"
    },
    "reuseIdentifier()": {
      "code": "- (NSString *) reuseIdentifier\n{\n    NSString * re$ult = [self reuseIdentifier__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "selectedBackgroundView()": {
      "code": "- (UIView *) selectedBackgroundView\n{\n    UIView * re$ult = [self selectedBackgroundView__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "selectionStyle()": {
      "code": "- (UITableViewCellSelectionStyle) selectionStyle\n{\n    return [self selectionStyle__];\n}\n\n"
    },
    "setAccessoryType(int)": {
      "code": "- (void) setAccessoryType:(UITableViewCellAccessoryType) accessoryType\n{\n    [self setAccessoryType___int:accessoryType];\n}\n\n"
    },
    "setAccessoryView(crossmobile.ios.uikit.UIView)": {
      "code": "- (void) setAccessoryView:(UIView *) accessoryView\n{\n    [self setAccessoryView___crossmobile_ios_uikit_UIView:(accessoryView ? accessoryView : JAVA_NULL)];\n}\n\n"
    },
    "setBackgroundView(crossmobile.ios.uikit.UIView)": {
      "code": "- (void) setBackgroundView:(UIView *) backgroundView\n{\n    [self setBackgroundView___crossmobile_ios_uikit_UIView:(backgroundView ? backgroundView : JAVA_NULL)];\n}\n\n"
    },
    "setHighlighted(boolean)": {
      "code": "- (void) setHighlighted:(BOOL) highlighted\n{\n    [self setHighlighted___boolean:highlighted];\n}\n\n"
    },
    "setSelected(boolean)": {
      "code": "- (void) setSelected:(BOOL) selected\n{\n    [self setSelected___boolean:selected];\n}\n\n"
    },
    "setSelectedBackgroundView(crossmobile.ios.uikit.UIView)": {
      "code": "- (void) setSelectedBackgroundView:(UIView *) selectedBackgroundView\n{\n    [self setSelectedBackgroundView___crossmobile_ios_uikit_UIView:(selectedBackgroundView ? selectedBackgroundView : JAVA_NULL)];\n}\n\n"
    },
    "setSelectionStyle(int)": {
      "code": "- (void) setSelectionStyle:(UITableViewCellSelectionStyle) selectionStyle\n{\n    [self setSelectionStyle___int:selectionStyle];\n}\n\n"
    },
    "textLabel()": {
      "code": "- (UILabel *) textLabel\n{\n    UILabel * re$ult = [self textLabel__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UITableViewController": {
    "setTableView(crossmobile.ios.uikit.UITableView)": {
      "code": "- (void) setTableView:(UITableView *) tableView\n{\n    [self setTableView___crossmobile_ios_uikit_UITableView:(tableView ? tableView : JAVA_NULL)];\n}\n\n"
    },
    "tableView()": {
      "code": "- (UITableView *) tableView\n{\n    UITableView * re$ult = [self tableView__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UITableViewDataSource": {
    "canEditRowAtIndexPath(crossmobile.ios.uikit.UITableView,crossmobile.ios.foundation.NSIndexPath)": {
      "code": "- (BOOL) tableView:(UITableView *) tableView canEditRowAtIndexPath:(NSIndexPath *) indexPath\n{\n    return [self canEditRowAtIndexPath___crossmobile_ios_uikit_UITableView_crossmobile_ios_foundation_NSIndexPath:(tableView ? tableView : JAVA_NULL) :(indexPath ? indexPath : JAVA_NULL)];\n}\n\n"
    },
    "canMoveRowAtIndexPath(crossmobile.ios.uikit.UITableView,crossmobile.ios.foundation.NSIndexPath)": {
      "code": "- (BOOL) tableView:(UITableView *) tableView canMoveRowAtIndexPath:(NSIndexPath *) indexPath\n{\n    return [self canMoveRowAtIndexPath___crossmobile_ios_uikit_UITableView_crossmobile_ios_foundation_NSIndexPath:(tableView ? tableView : JAVA_NULL) :(indexPath ? indexPath : JAVA_NULL)];\n}\n\n"
    },
    "cellForRowAtIndexPath(crossmobile.ios.uikit.UITableView,crossmobile.ios.foundation.NSIndexPath)": {
      "code": "- (UITableViewCell *) tableView:(UITableView *) tableView cellForRowAtIndexPath:(NSIndexPath *) indexPath\n{\n    UITableViewCell * re$ult = [self cellForRowAtIndexPath___crossmobile_ios_uikit_UITableView_crossmobile_ios_foundation_NSIndexPath:(tableView ? tableView : JAVA_NULL) :(indexPath ? indexPath : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "commitEditingStyle(crossmobile.ios.uikit.UITableView,int,crossmobile.ios.foundation.NSIndexPath)": {
      "code": "- (void) tableView:(UITableView *) tableView commitEditingStyle:(UITableViewCellEditingStyle) editingStyle forRowAtIndexPath:(NSIndexPath *) indexPath\n{\n    [self commitEditingStyle___crossmobile_ios_uikit_UITableView_int_crossmobile_ios_foundation_NSIndexPath:(tableView ? tableView : JAVA_NULL) :editingStyle :(indexPath ? indexPath : JAVA_NULL)];\n}\n\n"
    },
    "moveRowAtIndexPath(crossmobile.ios.uikit.UITableView,crossmobile.ios.foundation.NSIndexPath,crossmobile.ios.foundation.NSIndexPath)": {
      "code": "- (void) tableView:(UITableView *) tableView moveRowAtIndexPath:(NSIndexPath *) sourceIndexPath toIndexPath:(NSIndexPath *) destinationIndexPath\n{\n    [self moveRowAtIndexPath___crossmobile_ios_uikit_UITableView_crossmobile_ios_foundation_NSIndexPath_crossmobile_ios_foundation_NSIndexPath:(tableView ? tableView : JAVA_NULL) :(sourceIndexPath ? sourceIndexPath : JAVA_NULL) :(destinationIndexPath ? destinationIndexPath : JAVA_NULL)];\n}\n\n"
    },
    "numberOfRowsInSection(crossmobile.ios.uikit.UITableView,int)": {
      "code": "- (NSInteger) tableView:(UITableView *) tableView numberOfRowsInSection:(NSInteger) section\n{\n    return [self numberOfRowsInSection___crossmobile_ios_uikit_UITableView_int:(tableView ? tableView : JAVA_NULL) :section];\n}\n\n"
    },
    "numberOfSectionsInTableView(crossmobile.ios.uikit.UITableView)": {
      "code": "- (NSInteger) numberOfSectionsInTableView:(UITableView *) tableView\n{\n    return [self numberOfSectionsInTableView___crossmobile_ios_uikit_UITableView:(tableView ? tableView : JAVA_NULL)];\n}\n\n"
    },
    "titleForFooterInSection(crossmobile.ios.uikit.UITableView,int)": {
      "code": "- (NSString *) tableView:(UITableView *) tableView titleForFooterInSection:(NSInteger) section\n{\n    NSString * re$ult = [self titleForFooterInSection___crossmobile_ios_uikit_UITableView_int:(tableView ? tableView : JAVA_NULL) :section];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "titleForHeaderInSection(crossmobile.ios.uikit.UITableView,int)": {
      "code": "- (NSString *) tableView:(UITableView *) tableView titleForHeaderInSection:(NSInteger) section\n{\n    NSString * re$ult = [self titleForHeaderInSection___crossmobile_ios_uikit_UITableView_int:(tableView ? tableView : JAVA_NULL) :section];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UITableViewDelegate": {
    "accessoryButtonTappedForRowWithIndexPath(crossmobile.ios.uikit.UITableView,crossmobile.ios.foundation.NSIndexPath)": {
      "code": "- (void) tableView:(UITableView *) tableView accessoryButtonTappedForRowWithIndexPath:(NSIndexPath *) indexPath\n{\n    [self accessoryButtonTappedForRowWithIndexPath___crossmobile_ios_uikit_UITableView_crossmobile_ios_foundation_NSIndexPath:(tableView ? tableView : JAVA_NULL) :(indexPath ? indexPath : JAVA_NULL)];\n}\n\n"
    },
    "didDeselectRowAtIndexPath(crossmobile.ios.uikit.UITableView,crossmobile.ios.foundation.NSIndexPath)": {
      "code": "- (void) tableView:(UITableView *) tableView didDeselectRowAtIndexPath:(NSIndexPath *) indexPath\n{\n    [self didDeselectRowAtIndexPath___crossmobile_ios_uikit_UITableView_crossmobile_ios_foundation_NSIndexPath:(tableView ? tableView : JAVA_NULL) :(indexPath ? indexPath : JAVA_NULL)];\n}\n\n"
    },
    "didEndEditingRowAtIndexPath(crossmobile.ios.uikit.UITableView,crossmobile.ios.foundation.NSIndexPath)": {
      "code": "- (void) tableView:(UITableView *) tableView didEndEditingRowAtIndexPath:(NSIndexPath *) indexPath\n{\n    [self didEndEditingRowAtIndexPath___crossmobile_ios_uikit_UITableView_crossmobile_ios_foundation_NSIndexPath:(tableView ? tableView : JAVA_NULL) :(indexPath ? indexPath : JAVA_NULL)];\n}\n\n"
    },
    "didSelectRowAtIndexPath(crossmobile.ios.uikit.UITableView,crossmobile.ios.foundation.NSIndexPath)": {
      "code": "- (void) tableView:(UITableView *) tableView didSelectRowAtIndexPath:(NSIndexPath *) indexPath\n{\n    [self didSelectRowAtIndexPath___crossmobile_ios_uikit_UITableView_crossmobile_ios_foundation_NSIndexPath:(tableView ? tableView : JAVA_NULL) :(indexPath ? indexPath : JAVA_NULL)];\n}\n\n"
    },
    "editingStyleForRowAtIndexPath(crossmobile.ios.uikit.UITableView,crossmobile.ios.foundation.NSIndexPath)": {
      "code": "- (UITableViewCellEditingStyle) tableView:(UITableView *) tableView editingStyleForRowAtIndexPath:(NSIndexPath *) indexPath\n{\n    return [self editingStyleForRowAtIndexPath___crossmobile_ios_uikit_UITableView_crossmobile_ios_foundation_NSIndexPath:(tableView ? tableView : JAVA_NULL) :(indexPath ? indexPath : JAVA_NULL)];\n}\n\n"
    },
    "heightForFooterInSection(crossmobile.ios.uikit.UITableView,int)": {
      "code": "- (CGFloat) tableView:(UITableView *) tableView heightForFooterInSection:(NSInteger) section\n{\n    return [self heightForFooterInSection___crossmobile_ios_uikit_UITableView_int:(tableView ? tableView : JAVA_NULL) :section];\n}\n\n"
    },
    "heightForHeaderInSection(crossmobile.ios.uikit.UITableView,int)": {
      "code": "- (CGFloat) tableView:(UITableView *) tableView heightForHeaderInSection:(NSInteger) section\n{\n    return [self heightForHeaderInSection___crossmobile_ios_uikit_UITableView_int:(tableView ? tableView : JAVA_NULL) :section];\n}\n\n"
    },
    "heightForRowAtIndexPath(crossmobile.ios.uikit.UITableView,crossmobile.ios.foundation.NSIndexPath)": {
      "code": "- (CGFloat) tableView:(UITableView *) tableView heightForRowAtIndexPath:(NSIndexPath *) indexPath\n{\n    return [self heightForRowAtIndexPath___crossmobile_ios_uikit_UITableView_crossmobile_ios_foundation_NSIndexPath:(tableView ? tableView : JAVA_NULL) :(indexPath ? indexPath : JAVA_NULL)];\n}\n\n"
    },
    "shouldIndentWhileEditingRowAtIndexPath(crossmobile.ios.uikit.UITableView,crossmobile.ios.foundation.NSIndexPath)": {
      "code": "- (BOOL) tableView:(UITableView *) tableView shouldIndentWhileEditingRowAtIndexPath:(NSIndexPath *) indexPath\n{\n    return [self shouldIndentWhileEditingRowAtIndexPath___crossmobile_ios_uikit_UITableView_crossmobile_ios_foundation_NSIndexPath:(tableView ? tableView : JAVA_NULL) :(indexPath ? indexPath : JAVA_NULL)];\n}\n\n"
    },
    "titleForDeleteConfirmationButtonForRowAtIndexPath(crossmobile.ios.uikit.UITableView,crossmobile.ios.foundation.NSIndexPath)": {
      "code": "- (NSString *) tableView:(UITableView *) tableView titleForDeleteConfirmationButtonForRowAtIndexPath:(NSIndexPath *) indexPath\n{\n    NSString * re$ult = [self titleForDeleteConfirmationButtonForRowAtIndexPath___crossmobile_ios_uikit_UITableView_crossmobile_ios_foundation_NSIndexPath:(tableView ? tableView : JAVA_NULL) :(indexPath ? indexPath : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "viewForFooterInSection(crossmobile.ios.uikit.UITableView,int)": {
      "code": "- (UIView *) tableView:(UITableView *) tableView viewForFooterInSection:(NSInteger) section\n{\n    UIView * re$ult = [self viewForFooterInSection___crossmobile_ios_uikit_UITableView_int:(tableView ? tableView : JAVA_NULL) :section];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "viewForHeaderInSection(crossmobile.ios.uikit.UITableView,int)": {
      "code": "- (UIView *) tableView:(UITableView *) tableView viewForHeaderInSection:(NSInteger) section\n{\n    UIView * re$ult = [self viewForHeaderInSection___crossmobile_ios_uikit_UITableView_int:(tableView ? tableView : JAVA_NULL) :section];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "willBeginEditingRowAtIndexPath(crossmobile.ios.uikit.UITableView,crossmobile.ios.foundation.NSIndexPath)": {
      "code": "- (void) tableView:(UITableView *) tableView willBeginEditingRowAtIndexPath:(NSIndexPath *) indexPath\n{\n    [self willBeginEditingRowAtIndexPath___crossmobile_ios_uikit_UITableView_crossmobile_ios_foundation_NSIndexPath:(tableView ? tableView : JAVA_NULL) :(indexPath ? indexPath : JAVA_NULL)];\n}\n\n"
    },
    "willDisplayCell(crossmobile.ios.uikit.UITableView,crossmobile.ios.uikit.UITableViewCell,crossmobile.ios.foundation.NSIndexPath)": {
      "code": "- (void) tableView:(UITableView *) tableView willDisplayCell:(UITableViewCell *) cell forRowAtIndexPath:(NSIndexPath *) indexPath\n{\n    [self willDisplayCell___crossmobile_ios_uikit_UITableView_crossmobile_ios_uikit_UITableViewCell_crossmobile_ios_foundation_NSIndexPath:(tableView ? tableView : JAVA_NULL) :(cell ? cell : JAVA_NULL) :(indexPath ? indexPath : JAVA_NULL)];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UITapGestureRecognizer": {
    "numberOfTapsRequired()": {
      "code": "- (NSUInteger) numberOfTapsRequired\n{\n    return [self numberOfTapsRequired__];\n}\n\n"
    },
    "numberOfTouchesRequired()": {
      "code": "- (NSUInteger) numberOfTouchesRequired\n{\n    return [self numberOfTouchesRequired__];\n}\n\n"
    },
    "setNumberOfTapsRequired(int)": {
      "code": "- (void) setNumberOfTapsRequired:(NSUInteger) numberOfTapsRequired\n{\n    [self setNumberOfTapsRequired___int:numberOfTapsRequired];\n}\n\n"
    },
    "setNumberOfTouchesRequired(int)": {
      "code": "- (void) setNumberOfTouchesRequired:(NSUInteger) numberOfTouchesRequired\n{\n    [self setNumberOfTouchesRequired___int:numberOfTouchesRequired];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UITextField": {
    "adjustsFontSizeToFitWidth()": {
      "code": "- (BOOL) adjustsFontSizeToFitWidth\n{\n    return [self adjustsFontSizeToFitWidth__];\n}\n\n"
    },
    "borderStyle()": {
      "code": "- (UITextBorderStyle) borderStyle\n{\n    return [self borderStyle__];\n}\n\n"
    },
    "delegate()": {
      "code": "- (id<UITextFieldDelegate>) delegate\n{\n    id<UITextFieldDelegate> re$ult = [self delegate__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "font()": {
      "code": "- (UIFont *) font\n{\n    UIFont * re$ult = [self font__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "placeholder()": {
      "code": "- (NSString *) placeholder\n{\n    NSString * re$ult = [self placeholder__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "setAdjustsFontSizeToFitWidth(boolean)": {
      "code": "- (void) setAdjustsFontSizeToFitWidth:(BOOL) adjustsFontSizeToFitWidth\n{\n    [self setAdjustsFontSizeToFitWidth___boolean:adjustsFontSizeToFitWidth];\n}\n\n"
    },
    "setBorderStyle(int)": {
      "code": "- (void) setBorderStyle:(UITextBorderStyle) borderStyle\n{\n    [self setBorderStyle___int:borderStyle];\n}\n\n"
    },
    "setDelegate(crossmobile.ios.uikit.UITextFieldDelegate)": {
      "code": "- (void) setDelegate:(id<UITextFieldDelegate>) delegate\n{\n    [self setDelegate___crossmobile_ios_uikit_UITextFieldDelegate:(delegate ? delegate : JAVA_NULL)];\n}\n\n"
    },
    "setFont(crossmobile.ios.uikit.UIFont)": {
      "code": "- (void) setFont:(UIFont *) font\n{\n    [self setFont___crossmobile_ios_uikit_UIFont:(font ? font : JAVA_NULL)];\n}\n\n"
    },
    "setPlaceholder(java.lang.String)": {
      "code": "- (void) setPlaceholder:(NSString *) placeholder\n{\n    [self setPlaceholder___java_lang_String:(placeholder ? placeholder : JAVA_NULL)];\n}\n\n"
    },
    "setText(java.lang.String)": {
      "code": "- (void) setText:(NSString *) text\n{\n    [self setText___java_lang_String:(text ? text : JAVA_NULL)];\n}\n\n"
    },
    "setTextAlignment(int)": {
      "code": "- (void) setTextAlignment:(NSTextAlignment) textAlignment\n{\n    [self setTextAlignment___int:textAlignment];\n}\n\n"
    },
    "setTextColor(crossmobile.ios.uikit.UIColor)": {
      "code": "- (void) setTextColor:(UIColor *) textColor\n{\n    [self setTextColor___crossmobile_ios_uikit_UIColor:(textColor ? textColor : JAVA_NULL)];\n}\n\n"
    },
    "text()": {
      "code": "- (NSString *) text\n{\n    NSString * re$ult = [self text__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "textAlignment()": {
      "code": "- (NSTextAlignment) textAlignment\n{\n    return [self textAlignment__];\n}\n\n"
    },
    "textColor()": {
      "code": "- (UIColor *) textColor\n{\n    UIColor * re$ult = [self textColor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UITextFieldDelegate": {
    "didBeginEditing(crossmobile.ios.uikit.UITextField)": {
      "code": "- (void) textFieldDidBeginEditing:(UITextField *) textField\n{\n    [self didBeginEditing___crossmobile_ios_uikit_UITextField:(textField ? textField : JAVA_NULL)];\n}\n\n"
    },
    "didEndEditing(crossmobile.ios.uikit.UITextField)": {
      "code": "- (void) textFieldDidEndEditing:(UITextField *) textField\n{\n    [self didEndEditing___crossmobile_ios_uikit_UITextField:(textField ? textField : JAVA_NULL)];\n}\n\n"
    },
    "shouldBeginEditing(crossmobile.ios.uikit.UITextField)": {
      "code": "- (BOOL) textFieldShouldBeginEditing:(UITextField *) textField\n{\n    return [self shouldBeginEditing___crossmobile_ios_uikit_UITextField:(textField ? textField : JAVA_NULL)];\n}\n\n"
    },
    "shouldChangeCharactersInRange(crossmobile.ios.uikit.UITextField,crossmobile.ios.foundation.NSRange,java.lang.String)": {
      "code": "- (BOOL) textField:(UITextField *) textField shouldChangeCharactersInRange:(NSRange) range replacementString:(NSString *) string\n{\n    crossmobile_ios_foundation_NSRange* range$conv = [[crossmobile_ios_foundation_NSRange alloc] initWithNSRange:range];\n    BOOL re$ult = [self shouldChangeCharactersInRange___crossmobile_ios_uikit_UITextField_crossmobile_ios_foundation_NSRange_java_lang_String:(textField ? textField : JAVA_NULL) :range$conv :(string ? string : JAVA_NULL)];\n    [range$conv release];\n    return re$ult;\n}\n\n"
    },
    "shouldClear(crossmobile.ios.uikit.UITextField)": {
      "code": "- (BOOL) textFieldShouldClear:(UITextField *) textField\n{\n    return [self shouldClear___crossmobile_ios_uikit_UITextField:(textField ? textField : JAVA_NULL)];\n}\n\n"
    },
    "shouldEndEditing(crossmobile.ios.uikit.UITextField)": {
      "code": "- (BOOL) textFieldShouldEndEditing:(UITextField *) textField\n{\n    return [self shouldEndEditing___crossmobile_ios_uikit_UITextField:(textField ? textField : JAVA_NULL)];\n}\n\n"
    },
    "shouldReturn(crossmobile.ios.uikit.UITextField)": {
      "code": "- (BOOL) textFieldShouldReturn:(UITextField *) textField\n{\n    return [self shouldReturn___crossmobile_ios_uikit_UITextField:(textField ? textField : JAVA_NULL)];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UITextInputTraits": {
    "autocapitalizationType()": {
      "code": "- (UITextAutocapitalizationType) autocapitalizationType\n{\n    return [self autocapitalizationType__];\n}\n\n"
    },
    "autocorrectionType()": {
      "code": "- (UITextAutocorrectionType) autocorrectionType\n{\n    return [self autocorrectionType__];\n}\n\n"
    },
    "enablesReturnKeyAutomatically()": {
      "code": "- (BOOL) enablesReturnKeyAutomatically\n{\n    return [self enablesReturnKeyAutomatically__];\n}\n\n"
    },
    "isSecureTextEntry()": {
      "code": "- (BOOL) isSecureTextEntry\n{\n    return [self isSecureTextEntry__];\n}\n\n"
    },
    "keyboardAppearance()": {
      "code": "- (UIKeyboardAppearance) keyboardAppearance\n{\n    return [self keyboardAppearance__];\n}\n\n"
    },
    "keyboardType()": {
      "code": "- (UIKeyboardType) keyboardType\n{\n    return [self keyboardType__];\n}\n\n"
    },
    "returnKeyType()": {
      "code": "- (UIReturnKeyType) returnKeyType\n{\n    return [self returnKeyType__];\n}\n\n"
    },
    "setAutocapitalizationType(int)": {
      "code": "- (void) setAutocapitalizationType:(UITextAutocapitalizationType) autocapitalizationType\n{\n    [self setAutocapitalizationType___int:autocapitalizationType];\n}\n\n"
    },
    "setAutocorrectionType(int)": {
      "code": "- (void) setAutocorrectionType:(UITextAutocorrectionType) autocorrectionType\n{\n    [self setAutocorrectionType___int:autocorrectionType];\n}\n\n"
    },
    "setEnablesReturnKeyAutomatically(boolean)": {
      "code": "- (void) setEnablesReturnKeyAutomatically:(BOOL) enablesReturnKeyAutomatically\n{\n    [self setEnablesReturnKeyAutomatically___boolean:enablesReturnKeyAutomatically];\n}\n\n"
    },
    "setKeyboardAppearance(int)": {
      "code": "- (void) setKeyboardAppearance:(UIKeyboardAppearance) keyboardAppearance\n{\n    [self setKeyboardAppearance___int:keyboardAppearance];\n}\n\n"
    },
    "setKeyboardType(int)": {
      "code": "- (void) setKeyboardType:(UIKeyboardType) keyboardType\n{\n    [self setKeyboardType___int:keyboardType];\n}\n\n"
    },
    "setReturnKeyType(int)": {
      "code": "- (void) setReturnKeyType:(UIReturnKeyType) returnKeyType\n{\n    [self setReturnKeyType___int:returnKeyType];\n}\n\n"
    },
    "setSecureTextEntry(boolean)": {
      "code": "- (void) setSecureTextEntry:(BOOL) secureTextEntry\n{\n    [self setSecureTextEntry___boolean:secureTextEntry];\n}\n\n"
    },
    "setSmartDashesType(int)": {
      "code": "- (void) setSmartDashesType:(UITextSmartDashesType) smartDashesType\n{\n    [self setSmartDashesType___int:smartDashesType];\n}\n\n"
    },
    "setSmartInsertDeleteType(int)": {
      "code": "- (void) setSmartInsertDeleteType:(UITextSmartInsertDeleteType) smartInsertDeleteType\n{\n    [self setSmartInsertDeleteType___int:smartInsertDeleteType];\n}\n\n"
    },
    "setSmartQuotesType(int)": {
      "code": "- (void) setSmartQuotesType:(UITextSmartQuotesType) smartQuotesType\n{\n    [self setSmartQuotesType___int:smartQuotesType];\n}\n\n"
    },
    "setSpellCheckingType(int)": {
      "code": "- (void) setSpellCheckingType:(UITextSpellCheckingType) spellCheckingType\n{\n    [self setSpellCheckingType___int:spellCheckingType];\n}\n\n"
    },
    "setTextContentType(java.lang.String)": {
      "code": "- (void) setTextContentType:(UITextContentType) textContentType\n{\n    [self setTextContentType___java_lang_String:(textContentType ? textContentType : JAVA_NULL)];\n}\n\n"
    },
    "smartDashesType()": {
      "code": "- (UITextSmartDashesType) smartDashesType\n{\n    return [self smartDashesType__];\n}\n\n"
    },
    "smartInsertDeleteType()": {
      "code": "- (UITextSmartInsertDeleteType) smartInsertDeleteType\n{\n    return [self smartInsertDeleteType__];\n}\n\n"
    },
    "smartQuotesType()": {
      "code": "- (UITextSmartQuotesType) smartQuotesType\n{\n    return [self smartQuotesType__];\n}\n\n"
    },
    "spellCheckingType()": {
      "code": "- (UITextSpellCheckingType) spellCheckingType\n{\n    return [self spellCheckingType__];\n}\n\n"
    },
    "textContentType()": {
      "code": "- (UITextContentType) textContentType\n{\n    UITextContentType re$ult = [self textContentType__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UITextView": {
    "autocapitalizationType()": {
      "code": "- (UITextAutocapitalizationType) autocapitalizationType\n{\n    return [self autocapitalizationType__];\n}\n\n"
    },
    "autocorrectionType()": {
      "code": "- (UITextAutocorrectionType) autocorrectionType\n{\n    return [self autocorrectionType__];\n}\n\n"
    },
    "dataDetectorTypes()": {
      "code": "- (UIDataDetectorTypes) dataDetectorTypes\n{\n    return [self dataDetectorTypes__];\n}\n\n"
    },
    "delegate()": {
      "code": "- (id<UITextViewDelegate>) delegate\n{\n    id<UITextViewDelegate> re$ult = [self delegate__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "enablesReturnKeyAutomatically()": {
      "code": "- (BOOL) enablesReturnKeyAutomatically\n{\n    return [self enablesReturnKeyAutomatically__];\n}\n\n"
    },
    "font()": {
      "code": "- (UIFont *) font\n{\n    UIFont * re$ult = [self font__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "isEditable()": {
      "code": "- (BOOL) isEditable\n{\n    return [self isEditable__];\n}\n\n"
    },
    "isSecureTextEntry()": {
      "code": "- (BOOL) isSecureTextEntry\n{\n    return [self isSecureTextEntry__];\n}\n\n"
    },
    "keyboardAppearance()": {
      "code": "- (UIKeyboardAppearance) keyboardAppearance\n{\n    return [self keyboardAppearance__];\n}\n\n"
    },
    "keyboardType()": {
      "code": "- (UIKeyboardType) keyboardType\n{\n    return [self keyboardType__];\n}\n\n"
    },
    "returnKeyType()": {
      "code": "- (UIReturnKeyType) returnKeyType\n{\n    return [self returnKeyType__];\n}\n\n"
    },
    "setAutocapitalizationType(int)": {
      "code": "- (void) setAutocapitalizationType:(UITextAutocapitalizationType) autocapitalizationType\n{\n    [self setAutocapitalizationType___int:autocapitalizationType];\n}\n\n"
    },
    "setAutocorrectionType(int)": {
      "code": "- (void) setAutocorrectionType:(UITextAutocorrectionType) autocorrectionType\n{\n    [self setAutocorrectionType___int:autocorrectionType];\n}\n\n"
    },
    "setDataDetectorTypes(long)": {
      "code": "- (void) setDataDetectorTypes:(UIDataDetectorTypes) dataDetectorTypes\n{\n    [self setDataDetectorTypes___long:dataDetectorTypes];\n}\n\n"
    },
    "setDelegate(crossmobile.ios.uikit.UITextViewDelegate)": {
      "code": "- (void) setDelegate:(id<UITextViewDelegate>) delegate\n{\n    [self setDelegate___crossmobile_ios_uikit_UITextViewDelegate:(delegate ? delegate : JAVA_NULL)];\n}\n\n"
    },
    "setEditable(boolean)": {
      "code": "- (void) setEditable:(BOOL) editable\n{\n    [self setEditable___boolean:editable];\n}\n\n"
    },
    "setEnablesReturnKeyAutomatically(boolean)": {
      "code": "- (void) setEnablesReturnKeyAutomatically:(BOOL) enablesReturnKeyAutomatically\n{\n    [self setEnablesReturnKeyAutomatically___boolean:enablesReturnKeyAutomatically];\n}\n\n"
    },
    "setFont(crossmobile.ios.uikit.UIFont)": {
      "code": "- (void) setFont:(UIFont *) font\n{\n    [self setFont___crossmobile_ios_uikit_UIFont:(font ? font : JAVA_NULL)];\n}\n\n"
    },
    "setKeyboardAppearance(int)": {
      "code": "- (void) setKeyboardAppearance:(UIKeyboardAppearance) keyboardAppearance\n{\n    [self setKeyboardAppearance___int:keyboardAppearance];\n}\n\n"
    },
    "setKeyboardType(int)": {
      "code": "- (void) setKeyboardType:(UIKeyboardType) keyboardType\n{\n    [self setKeyboardType___int:keyboardType];\n}\n\n"
    },
    "setReturnKeyType(int)": {
      "code": "- (void) setReturnKeyType:(UIReturnKeyType) returnKeyType\n{\n    [self setReturnKeyType___int:returnKeyType];\n}\n\n"
    },
    "setSecureTextEntry(boolean)": {
      "code": "- (void) setSecureTextEntry:(BOOL) secureTextEntry\n{\n    [self setSecureTextEntry___boolean:secureTextEntry];\n}\n\n"
    },
    "setText(java.lang.String)": {
      "code": "- (void) setText:(NSString *) text\n{\n    [self setText___java_lang_String:(text ? text : JAVA_NULL)];\n}\n\n"
    },
    "setTextAlignment(int)": {
      "code": "- (void) setTextAlignment:(NSTextAlignment) textAlignment\n{\n    [self setTextAlignment___int:textAlignment];\n}\n\n"
    },
    "setTextColor(crossmobile.ios.uikit.UIColor)": {
      "code": "- (void) setTextColor:(UIColor *) textColor\n{\n    [self setTextColor___crossmobile_ios_uikit_UIColor:(textColor ? textColor : JAVA_NULL)];\n}\n\n"
    },
    "setTextContainerInset(crossmobile.ios.uikit.UIEdgeInsets)": {
      "code": "- (void) setTextContainerInset:(UIEdgeInsets) textContainerInset\n{\n    crossmobile_ios_uikit_UIEdgeInsets* textContainerInset$conv = [[crossmobile_ios_uikit_UIEdgeInsets alloc] initWithUIEdgeInsets:textContainerInset];\n    [self setTextContainerInset___crossmobile_ios_uikit_UIEdgeInsets:textContainerInset$conv];\n    [textContainerInset$conv release];\n}\n\n"
    },
    "text()": {
      "code": "- (NSString *) text\n{\n    NSString * re$ult = [self text__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "textAlignment()": {
      "code": "- (NSTextAlignment) textAlignment\n{\n    return [self textAlignment__];\n}\n\n"
    },
    "textColor()": {
      "code": "- (UIColor *) textColor\n{\n    UIColor * re$ult = [self textColor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "textContainerInset()": {
      "code": "- (UIEdgeInsets) textContainerInset\n{\n    crossmobile_ios_uikit_UIEdgeInsets* re$ult = [self textContainerInset__];\n    UIEdgeInsets re$ult$conv = [re$ult getUIEdgeInsets];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UITextViewDelegate": {
    "didBeginEditing(crossmobile.ios.uikit.UITextView)": {
      "code": "- (void) textViewDidBeginEditing:(UITextView *) textView\n{\n    [self didBeginEditing___crossmobile_ios_uikit_UITextView:(textView ? textView : JAVA_NULL)];\n}\n\n"
    },
    "didChange(crossmobile.ios.uikit.UITextView)": {
      "code": "- (void) textViewDidChange:(UITextView *) textView\n{\n    [self didChange___crossmobile_ios_uikit_UITextView:(textView ? textView : JAVA_NULL)];\n}\n\n"
    },
    "didChangeSelection(crossmobile.ios.uikit.UITextView)": {
      "code": "- (void) textViewDidChangeSelection:(UITextView *) textView\n{\n    [self didChangeSelection___crossmobile_ios_uikit_UITextView:(textView ? textView : JAVA_NULL)];\n}\n\n"
    },
    "didEndEditing(crossmobile.ios.uikit.UITextView)": {
      "code": "- (void) textViewDidEndEditing:(UITextView *) textView\n{\n    [self didEndEditing___crossmobile_ios_uikit_UITextView:(textView ? textView : JAVA_NULL)];\n}\n\n"
    },
    "shouldBeginEditing(crossmobile.ios.uikit.UITextView)": {
      "code": "- (BOOL) textViewShouldBeginEditing:(UITextView *) textView\n{\n    return [self shouldBeginEditing___crossmobile_ios_uikit_UITextView:(textView ? textView : JAVA_NULL)];\n}\n\n"
    },
    "shouldChangeTextInRange(crossmobile.ios.uikit.UITextView,crossmobile.ios.foundation.NSRange,java.lang.String)": {
      "code": "- (BOOL) textView:(UITextView *) textView shouldChangeTextInRange:(NSRange) range replacementText:(NSString *) text\n{\n    crossmobile_ios_foundation_NSRange* range$conv = [[crossmobile_ios_foundation_NSRange alloc] initWithNSRange:range];\n    BOOL re$ult = [self shouldChangeTextInRange___crossmobile_ios_uikit_UITextView_crossmobile_ios_foundation_NSRange_java_lang_String:(textView ? textView : JAVA_NULL) :range$conv :(text ? text : JAVA_NULL)];\n    [range$conv release];\n    return re$ult;\n}\n\n"
    },
    "shouldEndEditing(crossmobile.ios.uikit.UITextView)": {
      "code": "- (BOOL) textViewShouldEndEditing:(UITextView *) textView\n{\n    return [self shouldEndEditing___crossmobile_ios_uikit_UITextView:(textView ? textView : JAVA_NULL)];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIToolbar": {
    "barStyle()": {
      "code": "- (UIBarStyle) barStyle\n{\n    return [self barStyle__];\n}\n\n"
    },
    "barTintColor()": {
      "code": "- (UIColor *) barTintColor\n{\n    UIColor * re$ult = [self barTintColor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "isTranslucent()": {
      "code": "- (BOOL) isTranslucent\n{\n    return [self isTranslucent__];\n}\n\n"
    },
    "items()": {
      "code": "- (NSArray<UIBarButtonItem *> *) items\n{\n    NSArray<UIBarButtonItem *> * re$ult = [self items__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "setBarStyle(int)": {
      "code": "- (void) setBarStyle:(UIBarStyle) barStyle\n{\n    [self setBarStyle___int:barStyle];\n}\n\n"
    },
    "setBarTintColor(crossmobile.ios.uikit.UIColor)": {
      "code": "- (void) setBarTintColor:(UIColor *) barTintColor\n{\n    [self setBarTintColor___crossmobile_ios_uikit_UIColor:(barTintColor ? barTintColor : JAVA_NULL)];\n}\n\n"
    },
    "setItems(java.util.List)": {
      "code": "- (void) setItems:(NSArray<UIBarButtonItem *> *) items\n{\n    [self setItems___java_util_List:(items ? items : JAVA_NULL)];\n}\n\n"
    },
    "setItems(java.util.List,boolean)": {
      "code": "- (void) setItems:(NSArray<UIBarButtonItem *> *) items animated:(BOOL) animated\n{\n    [self setItems___java_util_List_boolean:(items ? items : JAVA_NULL) :animated];\n}\n\n"
    },
    "setTranslucent(boolean)": {
      "code": "- (void) setTranslucent:(BOOL) translucent\n{\n    [self setTranslucent___boolean:translucent];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UITouch": {
    "locationInView(crossmobile.ios.uikit.UIView)": {
      "code": "- (CGPoint) locationInView:(UIView *) view\n{\n    crossmobile_ios_coregraphics_CGPoint* re$ult = [self locationInView___crossmobile_ios_uikit_UIView:(view ? view : JAVA_NULL)];\n    CGPoint re$ult$conv = [re$ult getCGPoint];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
    },
    "phase()": {
      "code": "- (UITouchPhase) phase\n{\n    return [self phase__];\n}\n\n"
    },
    "tapCount()": {
      "code": "- (NSUInteger) tapCount\n{\n    return [self tapCount__];\n}\n\n"
    },
    "timestamp()": {
      "code": "- (NSTimeInterval) timestamp\n{\n    return [self timestamp__];\n}\n\n"
    },
    "view()": {
      "code": "- (UIView *) view\n{\n    UIView * re$ult = [self view__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "window()": {
      "code": "- (UIWindow *) window\n{\n    UIWindow * re$ult = [self window__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIUserNotificationSettings": {
    "categories()": {
      "code": "- (NSSet<UIUserNotificationCategory *> *) categories\n{\n    NSSet<UIUserNotificationCategory *> * re$ult = [self categories__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "types()": {
      "code": "- (UIUserNotificationType) types\n{\n    return [self types__];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIView": {
    "addConstraint(crossmobile.ios.uikit.NSLayoutConstraint)": {
      "code": "- (void) addConstraint:(NSLayoutConstraint *) constraint\n{\n    [self addConstraint___crossmobile_ios_uikit_NSLayoutConstraint:(constraint ? constraint : JAVA_NULL)];\n}\n\n"
    },
    "addConstraints(java.util.List)": {
      "code": "- (void) addConstraints:(NSArray<__kindof NSLayoutConstraint *> *) constraints\n{\n    [self addConstraints___java_util_List:(constraints ? constraints : JAVA_NULL)];\n}\n\n"
    },
    "addGestureRecognizer(crossmobile.ios.uikit.UIGestureRecognizer)": {
      "code": "- (void) addGestureRecognizer:(UIGestureRecognizer *) gestureRecognizer\n{\n    [self addGestureRecognizer___crossmobile_ios_uikit_UIGestureRecognizer:(gestureRecognizer ? gestureRecognizer : JAVA_NULL)];\n}\n\n"
    },
    "addLayoutGuide(crossmobile.ios.uikit.UILayoutGuide)": {
      "code": "- (void) addLayoutGuide:(UILayoutGuide *) layoutGuide\n{\n    [self addLayoutGuide___crossmobile_ios_uikit_UILayoutGuide:(layoutGuide ? layoutGuide : JAVA_NULL)];\n}\n\n"
    },
    "addSubview(crossmobile.ios.uikit.UIView)": {
      "code": "- (void) addSubview:(UIView *) view\n{\n    [self addSubview___crossmobile_ios_uikit_UIView:(view ? view : JAVA_NULL)];\n}\n\n"
    },
    "alpha()": {
      "code": "- (CGFloat) alpha\n{\n    return [self alpha__];\n}\n\n"
    },
    "autoresizesSubviews()": {
      "code": "- (BOOL) autoresizesSubviews\n{\n    return [self autoresizesSubviews__];\n}\n\n"
    },
    "autoresizingMask()": {
      "code": "- (UIViewAutoresizing) autoresizingMask\n{\n    return [self autoresizingMask__];\n}\n\n"
    },
    "backgroundColor()": {
      "code": "- (UIColor *) backgroundColor\n{\n    UIColor * re$ult = [self backgroundColor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "bottomAnchor()": {
      "code": "- (NSLayoutYAxisAnchor *) bottomAnchor\n{\n    NSLayoutYAxisAnchor * re$ult = [self bottomAnchor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "bounds()": {
      "code": "- (CGRect) bounds\n{\n    crossmobile_ios_coregraphics_CGRect* re$ult = [self bounds__];\n    CGRect re$ult$conv = [re$ult getCGRect];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
    },
    "bringSubviewToFront(crossmobile.ios.uikit.UIView)": {
      "code": "- (void) bringSubviewToFront:(UIView *) view\n{\n    [self bringSubviewToFront___crossmobile_ios_uikit_UIView:(view ? view : JAVA_NULL)];\n}\n\n"
    },
    "center()": {
      "code": "- (CGPoint) center\n{\n    crossmobile_ios_coregraphics_CGPoint* re$ult = [self center__];\n    CGPoint re$ult$conv = [re$ult getCGPoint];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
    },
    "centerXAnchor()": {
      "code": "- (NSLayoutXAxisAnchor *) centerXAnchor\n{\n    NSLayoutXAxisAnchor * re$ult = [self centerXAnchor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "centerYAnchor()": {
      "code": "- (NSLayoutYAxisAnchor *) centerYAnchor\n{\n    NSLayoutYAxisAnchor * re$ult = [self centerYAnchor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "clipsToBounds()": {
      "code": "- (BOOL) clipsToBounds\n{\n    return [self clipsToBounds__];\n}\n\n"
    },
    "constraints()": {
      "code": "- (NSArray<__kindof NSLayoutConstraint *> *) constraints\n{\n    NSArray<__kindof NSLayoutConstraint *> * re$ult = [self constraints__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "contentCompressionResistancePriorityForAxis(int)": {
      "code": "- (UILayoutPriority) contentCompressionResistancePriorityForAxis:(UILayoutConstraintAxis) axis\n{\n    return [self contentCompressionResistancePriorityForAxis___int:axis];\n}\n\n"
    },
    "contentHuggingPriorityForAxis(int)": {
      "code": "- (UILayoutPriority) contentHuggingPriorityForAxis:(UILayoutConstraintAxis) axis\n{\n    return [self contentHuggingPriorityForAxis___int:axis];\n}\n\n"
    },
    "contentMode()": {
      "code": "- (UIViewContentMode) contentMode\n{\n    return [self contentMode__];\n}\n\n"
    },
    "convertPointFromView(crossmobile.ios.coregraphics.CGPoint,crossmobile.ios.uikit.UIView)": {
      "code": "- (CGPoint) convertPoint:(CGPoint) point fromView:(UIView *) view\n{\n    crossmobile_ios_coregraphics_CGPoint* point$conv = [[crossmobile_ios_coregraphics_CGPoint alloc] initWithCGPoint:point];\n    crossmobile_ios_coregraphics_CGPoint* re$ult = [self convertPointFromView___crossmobile_ios_coregraphics_CGPoint_crossmobile_ios_uikit_UIView:point$conv :(view ? view : JAVA_NULL)];\n    CGPoint re$ult$conv = [re$ult getCGPoint];\n    [re$ult release];\n    [point$conv release];\n    return re$ult$conv;\n}\n\n"
    },
    "convertPointToView(crossmobile.ios.coregraphics.CGPoint,crossmobile.ios.uikit.UIView)": {
      "code": "- (CGPoint) convertPoint:(CGPoint) point toView:(UIView *) view\n{\n    crossmobile_ios_coregraphics_CGPoint* point$conv = [[crossmobile_ios_coregraphics_CGPoint alloc] initWithCGPoint:point];\n    crossmobile_ios_coregraphics_CGPoint* re$ult = [self convertPointToView___crossmobile_ios_coregraphics_CGPoint_crossmobile_ios_uikit_UIView:point$conv :(view ? view : JAVA_NULL)];\n    CGPoint re$ult$conv = [re$ult getCGPoint];\n    [re$ult release];\n    [point$conv release];\n    return re$ult$conv;\n}\n\n"
    },
    "convertRectFromView(crossmobile.ios.coregraphics.CGRect,crossmobile.ios.uikit.UIView)": {
      "code": "- (CGRect) convertRect:(CGRect) rect fromView:(UIView *) view\n{\n    crossmobile_ios_coregraphics_CGRect* rect$conv = [[crossmobile_ios_coregraphics_CGRect alloc] initWithCGRect:rect];\n    crossmobile_ios_coregraphics_CGRect* re$ult = [self convertRectFromView___crossmobile_ios_coregraphics_CGRect_crossmobile_ios_uikit_UIView:rect$conv :(view ? view : JAVA_NULL)];\n    CGRect re$ult$conv = [re$ult getCGRect];\n    [re$ult release];\n    [rect$conv release];\n    return re$ult$conv;\n}\n\n"
    },
    "convertRectToView(crossmobile.ios.coregraphics.CGRect,crossmobile.ios.uikit.UIView)": {
      "code": "- (CGRect) convertRect:(CGRect) rect toView:(UIView *) view\n{\n    crossmobile_ios_coregraphics_CGRect* rect$conv = [[crossmobile_ios_coregraphics_CGRect alloc] initWithCGRect:rect];\n    crossmobile_ios_coregraphics_CGRect* re$ult = [self convertRectToView___crossmobile_ios_coregraphics_CGRect_crossmobile_ios_uikit_UIView:rect$conv :(view ? view : JAVA_NULL)];\n    CGRect re$ult$conv = [re$ult getCGRect];\n    [re$ult release];\n    [rect$conv release];\n    return re$ult$conv;\n}\n\n"
    },
    "didAddSubview(crossmobile.ios.uikit.UIView)": {
      "code": "- (void) didAddSubview:(UIView *) subview\n{\n    [self didAddSubview___crossmobile_ios_uikit_UIView:(subview ? subview : JAVA_NULL)];\n}\n\n"
    },
    "didMoveToSuperview()": {
      "code": "- (void) didMoveToSuperview\n{\n    [self didMoveToSuperview__];\n}\n\n"
    },
    "didMoveToWindow()": {
      "code": "- (void) didMoveToWindow\n{\n    [self didMoveToWindow__];\n}\n\n"
    },
    "drawRect(crossmobile.ios.coregraphics.CGRect)": {
      "code": "- (void) drawRect:(CGRect) rect\n{\n    crossmobile_ios_coregraphics_CGRect* rect$conv = [[crossmobile_ios_coregraphics_CGRect alloc] initWithCGRect:rect];\n    [self drawRect___crossmobile_ios_coregraphics_CGRect:rect$conv];\n    [rect$conv release];\n}\n\n"
    },
    "frame()": {
      "code": "- (CGRect) frame\n{\n    crossmobile_ios_coregraphics_CGRect* re$ult = [self frame__];\n    CGRect re$ult$conv = [re$ult getCGRect];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
    },
    "gestureRecognizers()": {
      "code": "- (NSArray<__kindof UIGestureRecognizer *> *) gestureRecognizers\n{\n    NSArray<__kindof UIGestureRecognizer *> * re$ult = [self gestureRecognizers__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "heightAnchor()": {
      "code": "- (NSLayoutDimension *) heightAnchor\n{\n    NSLayoutDimension * re$ult = [self heightAnchor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "hitTest(crossmobile.ios.coregraphics.CGPoint,crossmobile.ios.uikit.UIEvent)": {
      "code": "- (UIView *) hitTest:(CGPoint) point withEvent:(UIEvent *) event\n{\n    crossmobile_ios_coregraphics_CGPoint* point$conv = [[crossmobile_ios_coregraphics_CGPoint alloc] initWithCGPoint:point];\n    UIView * re$ult = [self hitTest___crossmobile_ios_coregraphics_CGPoint_crossmobile_ios_uikit_UIEvent:point$conv :(event ? event : JAVA_NULL)];\n    [point$conv release];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "insertSubview(crossmobile.ios.uikit.UIView,int)": {
      "code": "- (void) insertSubview:(UIView *) view atIndex:(NSInteger) index\n{\n    [self insertSubview___crossmobile_ios_uikit_UIView_int:(view ? view : JAVA_NULL) :index];\n}\n\n"
    },
    "insetsLayoutMarginsFromSafeArea()": {
      "code": "- (BOOL) insetsLayoutMarginsFromSafeArea\n{\n    return [self insetsLayoutMarginsFromSafeArea__];\n}\n\n"
    },
    "intrinsicContentSize()": {
      "code": "- (CGSize) intrinsicContentSize\n{\n    crossmobile_ios_coregraphics_CGSize* re$ult = [self intrinsicContentSize__];\n    CGSize re$ult$conv = [re$ult getCGSize];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
    },
    "invalidateIntrinsicContentSize()": {
      "code": "- (void) invalidateIntrinsicContentSize\n{\n    [self invalidateIntrinsicContentSize__];\n}\n\n"
    },
    "isHidden()": {
      "code": "- (BOOL) isHidden\n{\n    return [self isHidden__];\n}\n\n"
    },
    "isMultipleTouchEnabled()": {
      "code": "- (BOOL) isMultipleTouchEnabled\n{\n    return [self isMultipleTouchEnabled__];\n}\n\n"
    },
    "isOpaque()": {
      "code": "- (BOOL) isOpaque\n{\n    return [self isOpaque__];\n}\n\n"
    },
    "isUserInteractionEnabled()": {
      "code": "- (BOOL) isUserInteractionEnabled\n{\n    return [self isUserInteractionEnabled__];\n}\n\n"
    },
    "layer()": {
      "code": "- (CALayer *) layer\n{\n    CALayer * re$ult = [self layer__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "layoutIfNeeded()": {
      "code": "- (void) layoutIfNeeded\n{\n    [self layoutIfNeeded__];\n}\n\n"
    },
    "layoutMargins()": {
      "code": "- (UIEdgeInsets) layoutMargins\n{\n    crossmobile_ios_uikit_UIEdgeInsets* re$ult = [self layoutMargins__];\n    UIEdgeInsets re$ult$conv = [re$ult getUIEdgeInsets];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
    },
    "layoutMarginsDidChange()": {
      "code": "- (void) layoutMarginsDidChange\n{\n    [self layoutMarginsDidChange__];\n}\n\n"
    },
    "layoutMarginsGuide()": {
      "code": "- (UILayoutGuide *) layoutMarginsGuide\n{\n    UILayoutGuide * re$ult = [self layoutMarginsGuide__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "layoutSubviews()": {
      "code": "- (void) layoutSubviews\n{\n    [self layoutSubviews__];\n}\n\n"
    },
    "leadingAnchor()": {
      "code": "- (NSLayoutXAxisAnchor *) leadingAnchor\n{\n    NSLayoutXAxisAnchor * re$ult = [self leadingAnchor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "leftAnchor()": {
      "code": "- (NSLayoutXAxisAnchor *) leftAnchor\n{\n    NSLayoutXAxisAnchor * re$ult = [self leftAnchor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "needsUpdateConstraints()": {
      "code": "- (BOOL) needsUpdateConstraints\n{\n    return [self needsUpdateConstraints__];\n}\n\n"
    },
    "pointInside(crossmobile.ios.coregraphics.CGPoint,crossmobile.ios.uikit.UIEvent)": {
      "code": "- (BOOL) pointInside:(CGPoint) point withEvent:(UIEvent *) event\n{\n    crossmobile_ios_coregraphics_CGPoint* point$conv = [[crossmobile_ios_coregraphics_CGPoint alloc] initWithCGPoint:point];\n    BOOL re$ult = [self pointInside___crossmobile_ios_coregraphics_CGPoint_crossmobile_ios_uikit_UIEvent:point$conv :(event ? event : JAVA_NULL)];\n    [point$conv release];\n    return re$ult;\n}\n\n"
    },
    "preservesSuperviewLayoutMargins()": {
      "code": "- (BOOL) preservesSuperviewLayoutMargins\n{\n    return [self preservesSuperviewLayoutMargins__];\n}\n\n"
    },
    "removeConstraint(crossmobile.ios.uikit.NSLayoutConstraint)": {
      "code": "- (void) removeConstraint:(NSLayoutConstraint *) constraint\n{\n    [self removeConstraint___crossmobile_ios_uikit_NSLayoutConstraint:(constraint ? constraint : JAVA_NULL)];\n}\n\n"
    },
    "removeConstraints(java.util.List)": {
      "code": "- (void) removeConstraints:(NSArray<__kindof NSLayoutConstraint *> *) constraints\n{\n    [self removeConstraints___java_util_List:(constraints ? constraints : JAVA_NULL)];\n}\n\n"
    },
    "removeFromSuperview()": {
      "code": "- (void) removeFromSuperview\n{\n    [self removeFromSuperview__];\n}\n\n"
    },
    "removeGestureRecognizer(crossmobile.ios.uikit.UIGestureRecognizer)": {
      "code": "- (void) removeGestureRecognizer:(UIGestureRecognizer *) gestureRecognizer\n{\n    [self removeGestureRecognizer___crossmobile_ios_uikit_UIGestureRecognizer:(gestureRecognizer ? gestureRecognizer : JAVA_NULL)];\n}\n\n"
    },
    "removeLayoutGuide(crossmobile.ios.uikit.UILayoutGuide)": {
      "code": "- (void) removeLayoutGuide:(UILayoutGuide *) layoutGuide\n{\n    [self removeLayoutGuide___crossmobile_ios_uikit_UILayoutGuide:(layoutGuide ? layoutGuide : JAVA_NULL)];\n}\n\n"
    },
    "restorationIdentifier()": {
      "code": "- (NSString *) restorationIdentifier\n{\n    NSString * re$ult = [self restorationIdentifier__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "rightAnchor()": {
      "code": "- (NSLayoutXAxisAnchor *) rightAnchor\n{\n    NSLayoutXAxisAnchor * re$ult = [self rightAnchor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "safeAreaInsets()": {
      "code": "- (UIEdgeInsets) safeAreaInsets\n{\n    crossmobile_ios_uikit_UIEdgeInsets* re$ult = [self safeAreaInsets__];\n    UIEdgeInsets re$ult$conv = [re$ult getUIEdgeInsets];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
    },
    "safeAreaLayoutGuide()": {
      "code": "- (UILayoutGuide *) safeAreaLayoutGuide\n{\n    UILayoutGuide * re$ult = [self safeAreaLayoutGuide__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "sendSubviewToBack(crossmobile.ios.uikit.UIView)": {
      "code": "- (void) sendSubviewToBack:(UIView *) view\n{\n    [self sendSubviewToBack___crossmobile_ios_uikit_UIView:(view ? view : JAVA_NULL)];\n}\n\n"
    },
    "setAlpha(double)": {
      "code": "- (void) setAlpha:(CGFloat) alpha\n{\n    [self setAlpha___double:alpha];\n}\n\n"
    },
    "setAutoresizesSubviews(boolean)": {
      "code": "- (void) setAutoresizesSubviews:(BOOL) autoresizesSubviews\n{\n    [self setAutoresizesSubviews___boolean:autoresizesSubviews];\n}\n\n"
    },
    "setAutoresizingMask(int)": {
      "code": "- (void) setAutoresizingMask:(UIViewAutoresizing) autoresizingMask\n{\n    [self setAutoresizingMask___int:autoresizingMask];\n}\n\n"
    },
    "setBackgroundColor(crossmobile.ios.uikit.UIColor)": {
      "code": "- (void) setBackgroundColor:(UIColor *) backgroundColor\n{\n    [self setBackgroundColor___crossmobile_ios_uikit_UIColor:(backgroundColor ? backgroundColor : JAVA_NULL)];\n}\n\n"
    },
    "setBounds(crossmobile.ios.coregraphics.CGRect)": {
      "code": "- (void) setBounds:(CGRect) bounds\n{\n    crossmobile_ios_coregraphics_CGRect* bounds$conv = [[crossmobile_ios_coregraphics_CGRect alloc] initWithCGRect:bounds];\n    [self setBounds___crossmobile_ios_coregraphics_CGRect:bounds$conv];\n    [bounds$conv release];\n}\n\n"
    },
    "setCenter(crossmobile.ios.coregraphics.CGPoint)": {
      "code": "- (void) setCenter:(CGPoint) center\n{\n    crossmobile_ios_coregraphics_CGPoint* center$conv = [[crossmobile_ios_coregraphics_CGPoint alloc] initWithCGPoint:center];\n    [self setCenter___crossmobile_ios_coregraphics_CGPoint:center$conv];\n    [center$conv release];\n}\n\n"
    },
    "setClearsContextBeforeDrawing(boolean)": {
      "code": "- (void) setClearsContextBeforeDrawing:(BOOL) clearsContextBeforeDrawing\n{\n    [self setClearsContextBeforeDrawing___boolean:clearsContextBeforeDrawing];\n}\n\n"
    },
    "setClipsToBounds(boolean)": {
      "code": "- (void) setClipsToBounds:(BOOL) clipsToBounds\n{\n    [self setClipsToBounds___boolean:clipsToBounds];\n}\n\n"
    },
    "setContentCompressionResistancePriority(float,int)": {
      "code": "- (void) setContentCompressionResistancePriority:(UILayoutPriority) priority forAxis:(UILayoutConstraintAxis) axis\n{\n    [self setContentCompressionResistancePriority___float_int:priority :axis];\n}\n\n"
    },
    "setContentHuggingPriority(float,int)": {
      "code": "- (void) setContentHuggingPriority:(UILayoutPriority) priority forAxis:(UILayoutConstraintAxis) axis\n{\n    [self setContentHuggingPriority___float_int:priority :axis];\n}\n\n"
    },
    "setContentMode(int)": {
      "code": "- (void) setContentMode:(UIViewContentMode) contentMode\n{\n    [self setContentMode___int:contentMode];\n}\n\n"
    },
    "setFrame(crossmobile.ios.coregraphics.CGRect)": {
      "code": "- (void) setFrame:(CGRect) frame\n{\n    crossmobile_ios_coregraphics_CGRect* frame$conv = [[crossmobile_ios_coregraphics_CGRect alloc] initWithCGRect:frame];\n    [self setFrame___crossmobile_ios_coregraphics_CGRect:frame$conv];\n    [frame$conv release];\n}\n\n"
    },
    "setGestureRecognizers(java.util.List)": {
      "code": "- (void) setGestureRecognizers:(NSArray<__kindof UIGestureRecognizer *> *) gestureRecognizers\n{\n    [self setGestureRecognizers___java_util_List:(gestureRecognizers ? gestureRecognizers : JAVA_NULL)];\n}\n\n"
    },
    "setHidden(boolean)": {
      "code": "- (void) setHidden:(BOOL) hidden\n{\n    [self setHidden___boolean:hidden];\n}\n\n"
    },
    "setInsetsLayoutMarginsFromSafeArea(boolean)": {
      "code": "- (void) setInsetsLayoutMarginsFromSafeArea:(BOOL) insetsLayoutMarginsFromSafeArea\n{\n    [self setInsetsLayoutMarginsFromSafeArea___boolean:insetsLayoutMarginsFromSafeArea];\n}\n\n"
    },
    "setLayoutMargins(crossmobile.ios.uikit.UIEdgeInsets)": {
      "code": "- (void) setLayoutMargins:(UIEdgeInsets) layoutMargins\n{\n    crossmobile_ios_uikit_UIEdgeInsets* layoutMargins$conv = [[crossmobile_ios_uikit_UIEdgeInsets alloc] initWithUIEdgeInsets:layoutMargins];\n    [self setLayoutMargins___crossmobile_ios_uikit_UIEdgeInsets:layoutMargins$conv];\n    [layoutMargins$conv release];\n}\n\n"
    },
    "setMultipleTouchEnabled(boolean)": {
      "code": "- (void) setMultipleTouchEnabled:(BOOL) multipleTouchEnabled\n{\n    [self setMultipleTouchEnabled___boolean:multipleTouchEnabled];\n}\n\n"
    },
    "setNeedsDisplay()": {
      "code": "- (void) setNeedsDisplay\n{\n    [self setNeedsDisplay__];\n}\n\n"
    },
    "setNeedsLayout()": {
      "code": "- (void) setNeedsLayout\n{\n    [self setNeedsLayout__];\n}\n\n"
    },
    "setNeedsUpdateConstraints()": {
      "code": "- (void) setNeedsUpdateConstraints\n{\n    [self setNeedsUpdateConstraints__];\n}\n\n"
    },
    "setOpaque(boolean)": {
      "code": "- (void) setOpaque:(BOOL) opaque\n{\n    [self setOpaque___boolean:opaque];\n}\n\n"
    },
    "setPreservesSuperviewLayoutMargins(boolean)": {
      "code": "- (void) setPreservesSuperviewLayoutMargins:(BOOL) preservesSuperviewLayoutMargins\n{\n    [self setPreservesSuperviewLayoutMargins___boolean:preservesSuperviewLayoutMargins];\n}\n\n"
    },
    "setRestorationIdentifier(java.lang.String)": {
      "code": "- (void) setRestorationIdentifier:(NSString *) restorationIdentifier\n{\n    [self setRestorationIdentifier___java_lang_String:(restorationIdentifier ? restorationIdentifier : JAVA_NULL)];\n}\n\n"
    },
    "setTag(int)": {
      "code": "- (void) setTag:(NSInteger) tag\n{\n    [self setTag___int:tag];\n}\n\n"
    },
    "setTintAdjustmentMode(int)": {
      "code": "- (void) setTintAdjustmentMode:(UIViewTintAdjustmentMode) tintAdjustmentMode\n{\n    [self setTintAdjustmentMode___int:tintAdjustmentMode];\n}\n\n"
    },
    "setTintColor(crossmobile.ios.uikit.UIColor)": {
      "code": "- (void) setTintColor:(UIColor *) tintColor\n{\n    [self setTintColor___crossmobile_ios_uikit_UIColor:(tintColor ? tintColor : JAVA_NULL)];\n}\n\n"
    },
    "setTransform(crossmobile.ios.coregraphics.CGAffineTransform)": {
      "code": "- (void) setTransform:(CGAffineTransform) transform\n{\n    crossmobile_ios_coregraphics_CGAffineTransform* transform$conv = [[crossmobile_ios_coregraphics_CGAffineTransform alloc] initWithCGAffineTransform:transform];\n    [self setTransform___crossmobile_ios_coregraphics_CGAffineTransform:transform$conv];\n    [transform$conv release];\n}\n\n"
    },
    "setTranslatesAutoresizingMaskIntoConstraints(boolean)": {
      "code": "- (void) setTranslatesAutoresizingMaskIntoConstraints:(BOOL) translatesAutoresizingMaskIntoConstraints\n{\n    [self setTranslatesAutoresizingMaskIntoConstraints___boolean:translatesAutoresizingMaskIntoConstraints];\n}\n\n"
    },
    "setUserInteractionEnabled(boolean)": {
      "code": "- (void) setUserInteractionEnabled:(BOOL) userInteractionEnabled\n{\n    [self setUserInteractionEnabled___boolean:userInteractionEnabled];\n}\n\n"
    },
    "sizeThatFits(crossmobile.ios.coregraphics.CGSize)": {
      "code": "- (CGSize) sizeThatFits:(CGSize) size\n{\n    crossmobile_ios_coregraphics_CGSize* size$conv = [[crossmobile_ios_coregraphics_CGSize alloc] initWithCGSize:size];\n    crossmobile_ios_coregraphics_CGSize* re$ult = [self sizeThatFits___crossmobile_ios_coregraphics_CGSize:size$conv];\n    CGSize re$ult$conv = [re$ult getCGSize];\n    [re$ult release];\n    [size$conv release];\n    return re$ult$conv;\n}\n\n"
    },
    "sizeToFit()": {
      "code": "- (void) sizeToFit\n{\n    [self sizeToFit__];\n}\n\n"
    },
    "subviews()": {
      "code": "- (NSArray<__kindof UIView *> *) subviews\n{\n    NSArray<__kindof UIView *> * re$ult = [self subviews__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "superview()": {
      "code": "- (UIView *) superview\n{\n    UIView * re$ult = [self superview__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "tag()": {
      "code": "- (NSInteger) tag\n{\n    return [self tag__];\n}\n\n"
    },
    "tintAdjustmentMode()": {
      "code": "- (UIViewTintAdjustmentMode) tintAdjustmentMode\n{\n    return [self tintAdjustmentMode__];\n}\n\n"
    },
    "tintColor()": {
      "code": "- (UIColor *) tintColor\n{\n    UIColor * re$ult = [self tintColor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "tintColorDidChange()": {
      "code": "- (void) tintColorDidChange\n{\n    [self tintColorDidChange__];\n}\n\n"
    },
    "topAnchor()": {
      "code": "- (NSLayoutYAxisAnchor *) topAnchor\n{\n    NSLayoutYAxisAnchor * re$ult = [self topAnchor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "trailingAnchor()": {
      "code": "- (NSLayoutXAxisAnchor *) trailingAnchor\n{\n    NSLayoutXAxisAnchor * re$ult = [self trailingAnchor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "transform()": {
      "code": "- (CGAffineTransform) transform\n{\n    crossmobile_ios_coregraphics_CGAffineTransform* re$ult = [self transform__];\n    CGAffineTransform re$ult$conv = [re$ult getCGAffineTransform];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
    },
    "translatesAutoresizingMaskIntoConstraints()": {
      "code": "- (BOOL) translatesAutoresizingMaskIntoConstraints\n{\n    return [self translatesAutoresizingMaskIntoConstraints__];\n}\n\n"
    },
    "updateConstraints()": {
      "code": "- (void) updateConstraints\n{\n    [self updateConstraints__];\n}\n\n"
    },
    "updateConstraintsIfNeeded()": {
      "code": "- (void) updateConstraintsIfNeeded\n{\n    [self updateConstraintsIfNeeded__];\n}\n\n"
    },
    "userInterfaceLayoutDirection()": {
      "code": "- (UIUserInterfaceLayoutDirection) userInterfaceLayoutDirection\n{\n    return [self userInterfaceLayoutDirection__];\n}\n\n"
    },
    "viewForFirstBaselineLayout()": {
      "code": "- (UIView *) viewForFirstBaselineLayout\n{\n    UIView * re$ult = [self viewForFirstBaselineLayout__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "viewForLastBaselineLayout()": {
      "code": "- (UIView *) viewForLastBaselineLayout\n{\n    UIView * re$ult = [self viewForLastBaselineLayout__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "widthAnchor()": {
      "code": "- (NSLayoutDimension *) widthAnchor\n{\n    NSLayoutDimension * re$ult = [self widthAnchor__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "willMoveToSuperview(crossmobile.ios.uikit.UIView)": {
      "code": "- (void) willMoveToSuperview:(UIView *) newSuperview\n{\n    [self willMoveToSuperview___crossmobile_ios_uikit_UIView:(newSuperview ? newSuperview : JAVA_NULL)];\n}\n\n"
    },
    "willMoveToWindow(crossmobile.ios.uikit.UIWindow)": {
      "code": "- (void) willMoveToWindow:(UIWindow *) newWindow\n{\n    [self willMoveToWindow___crossmobile_ios_uikit_UIWindow:(newWindow ? newWindow : JAVA_NULL)];\n}\n\n"
    },
    "willRemoveSubview(crossmobile.ios.uikit.UIView)": {
      "code": "- (void) willRemoveSubview:(UIView *) subview\n{\n    [self willRemoveSubview___crossmobile_ios_uikit_UIView:(subview ? subview : JAVA_NULL)];\n}\n\n"
    },
    "window()": {
      "code": "- (UIWindow *) window\n{\n    UIWindow * re$ult = [self window__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIViewController": {
    "addChildViewController(crossmobile.ios.uikit.UIViewController)": {
      "code": "- (void) addChildViewController:(UIViewController *) childController\n{\n    [self addChildViewController___crossmobile_ios_uikit_UIViewController:(childController ? childController : JAVA_NULL)];\n}\n\n"
    },
    "additionalSafeAreaInsets()": {
      "code": "- (UIEdgeInsets) additionalSafeAreaInsets\n{\n    crossmobile_ios_uikit_UIEdgeInsets* re$ult = [self additionalSafeAreaInsets__];\n    UIEdgeInsets re$ult$conv = [re$ult getUIEdgeInsets];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
    },
    "allowedChildViewControllersForUnwindingFromSource(crossmobile.ios.uikit.UIStoryboardUnwindSegueSource)": {
      "code": "- (NSArray<UIViewController *> *) allowedChildViewControllersForUnwindingFromSource:(UIStoryboardUnwindSegueSource *) source\n{\n    NSArray<UIViewController *> * re$ult = [self allowedChildViewControllersForUnwindingFromSource___crossmobile_ios_uikit_UIStoryboardUnwindSegueSource:(source ? source : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "automaticallyAdjustsScrollViewInsets()": {
      "code": "- (BOOL) automaticallyAdjustsScrollViewInsets\n{\n    return [self automaticallyAdjustsScrollViewInsets__];\n}\n\n"
    },
    "beginAppearanceTransition(boolean,boolean)": {
      "code": "- (void) beginAppearanceTransition:(BOOL) isAppearing animated:(BOOL) animated\n{\n    [self beginAppearanceTransition___boolean_boolean:isAppearing :animated];\n}\n\n"
    },
    "bottomLayoutGuide()": {
      "code": "- (id<UILayoutSupport>) bottomLayoutGuide\n{\n    id<UILayoutSupport> re$ult = [self bottomLayoutGuide__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "childViewControllerContainingSegueSource(crossmobile.ios.uikit.UIStoryboardUnwindSegueSource)": {
      "code": "- (UIViewController *) childViewControllerContainingSegueSource:(UIStoryboardUnwindSegueSource *) source\n{\n    UIViewController * re$ult = [self childViewControllerContainingSegueSource___crossmobile_ios_uikit_UIStoryboardUnwindSegueSource:(source ? source : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "childViewControllers()": {
      "code": "- (NSArray<__kindof UIViewController *> *) childViewControllers\n{\n    NSArray<__kindof UIViewController *> * re$ult = [self childViewControllers__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "contentSizeForViewInPopover()": {
      "code": "- (CGSize) contentSizeForViewInPopover\n{\n    crossmobile_ios_coregraphics_CGSize* re$ult = [self contentSizeForViewInPopover__];\n    CGSize re$ult$conv = [re$ult getCGSize];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
    },
    "definesPresentationContext()": {
      "code": "- (BOOL) definesPresentationContext\n{\n    return [self definesPresentationContext__];\n}\n\n"
    },
    "didReceiveMemoryWarning()": {
      "code": "- (void) didReceiveMemoryWarning\n{\n    [self didReceiveMemoryWarning__];\n}\n\n"
    },
    "didRotateFromInterfaceOrientation(int)": {
      "code": "- (void) didRotateFromInterfaceOrientation:(UIInterfaceOrientation) fromInterfaceOrientation\n{\n    [self didRotateFromInterfaceOrientation___int:fromInterfaceOrientation];\n}\n\n"
    },
    "disablesAutomaticKeyboardDismissal()": {
      "code": "- (BOOL) disablesAutomaticKeyboardDismissal\n{\n    return [self disablesAutomaticKeyboardDismissal__];\n}\n\n"
    },
    "dismissModalViewControllerAnimated(boolean)": {
      "code": "- (void) dismissModalViewControllerAnimated:(BOOL) animated\n{\n    [self dismissModalViewControllerAnimated___boolean:animated];\n}\n\n"
    },
    "edgesForExtendedLayout()": {
      "code": "- (UIRectEdge) edgesForExtendedLayout\n{\n    return [self edgesForExtendedLayout__];\n}\n\n"
    },
    "editButtonItem()": {
      "code": "- (UIBarButtonItem *) editButtonItem\n{\n    UIBarButtonItem * re$ult = [self editButtonItem__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "endAppearanceTransition()": {
      "code": "- (void) endAppearanceTransition\n{\n    [self endAppearanceTransition__];\n}\n\n"
    },
    "extensionContext()": {
      "code": "- (NSExtensionContext *) extensionContext\n{\n    NSExtensionContext * re$ult = [self extensionContext__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "hidesBottomBarWhenPushed()": {
      "code": "- (BOOL) hidesBottomBarWhenPushed\n{\n    return [self hidesBottomBarWhenPushed__];\n}\n\n"
    },
    "interfaceOrientation()": {
      "code": "- (UIInterfaceOrientation) interfaceOrientation\n{\n    return [self interfaceOrientation__];\n}\n\n"
    },
    "isEditing()": {
      "code": "- (BOOL) isEditing\n{\n    return [self isEditing__];\n}\n\n"
    },
    "isModalInPopover()": {
      "code": "- (BOOL) isModalInPopover\n{\n    return [self isModalInPopover__];\n}\n\n"
    },
    "isViewLoaded()": {
      "code": "- (BOOL) isViewLoaded\n{\n    return [self isViewLoaded__];\n}\n\n"
    },
    "loadView()": {
      "code": "- (void) loadView\n{\n    [self loadView__];\n}\n\n"
    },
    "loadViewIfNeeded()": {
      "code": "- (void) loadViewIfNeeded\n{\n    [self loadViewIfNeeded__];\n}\n\n"
    },
    "modalPresentationStyle()": {
      "code": "- (UIModalPresentationStyle) modalPresentationStyle\n{\n    return [self modalPresentationStyle__];\n}\n\n"
    },
    "modalTransitionStyle()": {
      "code": "- (UIModalTransitionStyle) modalTransitionStyle\n{\n    return [self modalTransitionStyle__];\n}\n\n"
    },
    "navigationController()": {
      "code": "- (UINavigationController *) navigationController\n{\n    UINavigationController * re$ult = [self navigationController__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "navigationItem()": {
      "code": "- (UINavigationItem *) navigationItem\n{\n    UINavigationItem * re$ult = [self navigationItem__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "nibName()": {
      "code": "- (NSString *) nibName\n{\n    NSString * re$ult = [self nibName__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "parentViewController()": {
      "code": "- (UIViewController *) parentViewController\n{\n    UIViewController * re$ult = [self parentViewController__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "performSegueWithIdentifier(java.lang.String,java.lang.Object)": {
      "code": "- (void) performSegueWithIdentifier:(NSString *) identifier sender:(id) sender\n{\n    [self performSegueWithIdentifier___java_lang_String_java_lang_Object:(identifier ? identifier : JAVA_NULL) :(sender ? sender : JAVA_NULL)];\n}\n\n"
    },
    "preferredInterfaceOrientationForPresentation()": {
      "code": "- (UIInterfaceOrientation) preferredInterfaceOrientationForPresentation\n{\n    return [self preferredInterfaceOrientationForPresentation__];\n}\n\n"
    },
    "prefersStatusBarHidden()": {
      "code": "- (BOOL) prefersStatusBarHidden\n{\n    return [self prefersStatusBarHidden__];\n}\n\n"
    },
    "prepareForSegue(crossmobile.ios.uikit.UIStoryboardSegue,java.lang.Object)": {
      "code": "- (void) prepareForSegue:(UIStoryboardSegue *) segue sender:(id) sender\n{\n    [self prepareForSegue___crossmobile_ios_uikit_UIStoryboardSegue_java_lang_Object:(segue ? segue : JAVA_NULL) :(sender ? sender : JAVA_NULL)];\n}\n\n"
    },
    "presentModalViewController(crossmobile.ios.uikit.UIViewController,boolean)": {
      "code": "- (void) presentModalViewController:(UIViewController *) modalViewController animated:(BOOL) animated\n{\n    [self presentModalViewController___crossmobile_ios_uikit_UIViewController_boolean:(modalViewController ? modalViewController : JAVA_NULL) :animated];\n}\n\n"
    },
    "presentedViewController()": {
      "code": "- (UIViewController *) presentedViewController\n{\n    UIViewController * re$ult = [self presentedViewController__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "presentingViewController()": {
      "code": "- (UIViewController *) presentingViewController\n{\n    UIViewController * re$ult = [self presentingViewController__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "providesPresentationContextTransitionStyle()": {
      "code": "- (BOOL) providesPresentationContextTransitionStyle\n{\n    return [self providesPresentationContextTransitionStyle__];\n}\n\n"
    },
    "removeFromParentViewController()": {
      "code": "- (void) removeFromParentViewController\n{\n    [self removeFromParentViewController__];\n}\n\n"
    },
    "restorationIdentifier()": {
      "code": "- (NSString *) restorationIdentifier\n{\n    NSString * re$ult = [self restorationIdentifier__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "rotatingFooterView()": {
      "code": "- (UIView *) rotatingFooterView\n{\n    UIView * re$ult = [self rotatingFooterView__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "rotatingHeaderView()": {
      "code": "- (UIView *) rotatingHeaderView\n{\n    UIView * re$ult = [self rotatingHeaderView__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "setAdditionalSafeAreaInsets(crossmobile.ios.uikit.UIEdgeInsets)": {
      "code": "- (void) setAdditionalSafeAreaInsets:(UIEdgeInsets) additionalSafeAreaInsets\n{\n    crossmobile_ios_uikit_UIEdgeInsets* additionalSafeAreaInsets$conv = [[crossmobile_ios_uikit_UIEdgeInsets alloc] initWithUIEdgeInsets:additionalSafeAreaInsets];\n    [self setAdditionalSafeAreaInsets___crossmobile_ios_uikit_UIEdgeInsets:additionalSafeAreaInsets$conv];\n    [additionalSafeAreaInsets$conv release];\n}\n\n"
    },
    "setAutomaticallyAdjustsScrollViewInsets(boolean)": {
      "code": "- (void) setAutomaticallyAdjustsScrollViewInsets:(BOOL) automaticallyAdjustsScrollViewInsets\n{\n    [self setAutomaticallyAdjustsScrollViewInsets___boolean:automaticallyAdjustsScrollViewInsets];\n}\n\n"
    },
    "setContentSizeForViewInPopover(crossmobile.ios.coregraphics.CGSize)": {
      "code": "- (void) setContentSizeForViewInPopover:(CGSize) contentSizeForViewInPopover\n{\n    crossmobile_ios_coregraphics_CGSize* contentSizeForViewInPopover$conv = [[crossmobile_ios_coregraphics_CGSize alloc] initWithCGSize:contentSizeForViewInPopover];\n    [self setContentSizeForViewInPopover___crossmobile_ios_coregraphics_CGSize:contentSizeForViewInPopover$conv];\n    [contentSizeForViewInPopover$conv release];\n}\n\n"
    },
    "setDefinesPresentationContext(boolean)": {
      "code": "- (void) setDefinesPresentationContext:(BOOL) definesPresentationContext\n{\n    [self setDefinesPresentationContext___boolean:definesPresentationContext];\n}\n\n"
    },
    "setEdgesForExtendedLayout(int)": {
      "code": "- (void) setEdgesForExtendedLayout:(UIRectEdge) edgesForExtendedLayout\n{\n    [self setEdgesForExtendedLayout___int:edgesForExtendedLayout];\n}\n\n"
    },
    "setEditing(boolean)": {
      "code": "- (void) setEditing:(BOOL) editing\n{\n    [self setEditing___boolean:editing];\n}\n\n"
    },
    "setEditing(boolean,boolean)": {
      "code": "- (void) setEditing:(BOOL) editing animated:(BOOL) animated\n{\n    [self setEditing___boolean_boolean:editing :animated];\n}\n\n"
    },
    "setHidesBottomBarWhenPushed(boolean)": {
      "code": "- (void) setHidesBottomBarWhenPushed:(BOOL) hidesBottomBarWhenPushed\n{\n    [self setHidesBottomBarWhenPushed___boolean:hidesBottomBarWhenPushed];\n}\n\n"
    },
    "setModalInPopover(boolean)": {
      "code": "- (void) setModalInPopover:(BOOL) modalInPopover\n{\n    [self setModalInPopover___boolean:modalInPopover];\n}\n\n"
    },
    "setModalPresentationStyle(int)": {
      "code": "- (void) setModalPresentationStyle:(UIModalPresentationStyle) modalPresentationStyle\n{\n    [self setModalPresentationStyle___int:modalPresentationStyle];\n}\n\n"
    },
    "setModalTransitionStyle(int)": {
      "code": "- (void) setModalTransitionStyle:(UIModalTransitionStyle) modalTransitionStyle\n{\n    [self setModalTransitionStyle___int:modalTransitionStyle];\n}\n\n"
    },
    "setProvidesPresentationContextTransitionStyle(boolean)": {
      "code": "- (void) setProvidesPresentationContextTransitionStyle:(BOOL) providesPresentationContextTransitionStyle\n{\n    [self setProvidesPresentationContextTransitionStyle___boolean:providesPresentationContextTransitionStyle];\n}\n\n"
    },
    "setRestorationIdentifier(java.lang.String)": {
      "code": "- (void) setRestorationIdentifier:(NSString *) restorationIdentifier\n{\n    [self setRestorationIdentifier___java_lang_String:(restorationIdentifier ? restorationIdentifier : JAVA_NULL)];\n}\n\n"
    },
    "setTabBarItem(crossmobile.ios.uikit.UITabBarItem)": {
      "code": "- (void) setTabBarItem:(UITabBarItem *) tabBarItem\n{\n    [self setTabBarItem___crossmobile_ios_uikit_UITabBarItem:(tabBarItem ? tabBarItem : JAVA_NULL)];\n}\n\n"
    },
    "setTitle(java.lang.String)": {
      "code": "- (void) setTitle:(NSString *) title\n{\n    [self setTitle___java_lang_String:(title ? title : JAVA_NULL)];\n}\n\n"
    },
    "setToolbarItems(java.util.List)": {
      "code": "- (void) setToolbarItems:(NSArray<__kindof UIBarButtonItem *> *) toolbarItems\n{\n    [self setToolbarItems___java_util_List:(toolbarItems ? toolbarItems : JAVA_NULL)];\n}\n\n"
    },
    "setToolbarItems(java.util.List,boolean)": {
      "code": "- (void) setToolbarItems:(NSArray<UIBarButtonItem *> *) toolbarItems animated:(BOOL) animated\n{\n    [self setToolbarItems___java_util_List_boolean:(toolbarItems ? toolbarItems : JAVA_NULL) :animated];\n}\n\n"
    },
    "setView(crossmobile.ios.uikit.UIView)": {
      "code": "- (void) setView:(UIView *) view\n{\n    [self setView___crossmobile_ios_uikit_UIView:(view ? view : JAVA_NULL)];\n}\n\n"
    },
    "setWantsFullScreenLayout(boolean)": {
      "code": "- (void) setWantsFullScreenLayout:(BOOL) wantsFullScreenLayout\n{\n    [self setWantsFullScreenLayout___boolean:wantsFullScreenLayout];\n}\n\n"
    },
    "shouldAutomaticallyForwardAppearanceMethods()": {
      "code": "- (BOOL) shouldAutomaticallyForwardAppearanceMethods\n{\n    return [self shouldAutomaticallyForwardAppearanceMethods__];\n}\n\n"
    },
    "shouldAutorotate()": {
      "code": "- (BOOL) shouldAutorotate\n{\n    return [self shouldAutorotate__];\n}\n\n"
    },
    "shouldAutorotateToInterfaceOrientation(int)": {
      "code": "- (BOOL) shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation) toInterfaceOrientation\n{\n    return [self shouldAutorotateToInterfaceOrientation___int:toInterfaceOrientation];\n}\n\n"
    },
    "shouldPerformSegueWithIdentifier(java.lang.String,java.lang.Object)": {
      "code": "- (BOOL) shouldPerformSegueWithIdentifier:(NSString *) identifier sender:(id) sender\n{\n    return [self shouldPerformSegueWithIdentifier___java_lang_String_java_lang_Object:(identifier ? identifier : JAVA_NULL) :(sender ? sender : JAVA_NULL)];\n}\n\n"
    },
    "showDetailViewController(crossmobile.ios.uikit.UIViewController,java.lang.Object)": {
      "code": "- (void) showDetailViewController:(UIViewController *) vc sender:(id) sender\n{\n    [self showDetailViewController___crossmobile_ios_uikit_UIViewController_java_lang_Object:(vc ? vc : JAVA_NULL) :(sender ? sender : JAVA_NULL)];\n}\n\n"
    },
    "showViewController(crossmobile.ios.uikit.UIViewController,java.lang.Object)": {
      "code": "- (void) showViewController:(UIViewController *) vc sender:(id) sender\n{\n    [self showViewController___crossmobile_ios_uikit_UIViewController_java_lang_Object:(vc ? vc : JAVA_NULL) :(sender ? sender : JAVA_NULL)];\n}\n\n"
    },
    "splitViewController()": {
      "code": "- (UISplitViewController *) splitViewController\n{\n    UISplitViewController * re$ult = [self splitViewController__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "storyboard()": {
      "code": "- (UIStoryboard *) storyboard\n{\n    UIStoryboard * re$ult = [self storyboard__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "supportedInterfaceOrientations()": {
      "code": "- (UIInterfaceOrientationMask) supportedInterfaceOrientations\n{\n    return [self supportedInterfaceOrientations__];\n}\n\n"
    },
    "tabBarController()": {
      "code": "- (UITabBarController *) tabBarController\n{\n    UITabBarController * re$ult = [self tabBarController__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "tabBarItem()": {
      "code": "- (UITabBarItem *) tabBarItem\n{\n    UITabBarItem * re$ult = [self tabBarItem__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "title()": {
      "code": "- (NSString *) title\n{\n    NSString * re$ult = [self title__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "toolbarItems()": {
      "code": "- (NSArray<__kindof UIBarButtonItem *> *) toolbarItems\n{\n    NSArray<__kindof UIBarButtonItem *> * re$ult = [self toolbarItems__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "topLayoutGuide()": {
      "code": "- (id<UILayoutSupport>) topLayoutGuide\n{\n    id<UILayoutSupport> re$ult = [self topLayoutGuide__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "view()": {
      "code": "- (UIView *) view\n{\n    UIView * re$ult = [self view__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "viewDidAppear(boolean)": {
      "code": "- (void) viewDidAppear:(BOOL) animated\n{\n    [self viewDidAppear___boolean:animated];\n}\n\n"
    },
    "viewDidDisappear(boolean)": {
      "code": "- (void) viewDidDisappear:(BOOL) animated\n{\n    [self viewDidDisappear___boolean:animated];\n}\n\n"
    },
    "viewDidLayoutSubviews()": {
      "code": "- (void) viewDidLayoutSubviews\n{\n    [self viewDidLayoutSubviews__];\n}\n\n"
    },
    "viewDidLoad()": {
      "code": "- (void) viewDidLoad\n{\n    [self viewDidLoad__];\n}\n\n"
    },
    "viewDidUnload()": {
      "code": "- (void) viewDidUnload\n{\n    [self viewDidUnload__];\n}\n\n"
    },
    "viewIfLoaded()": {
      "code": "- (UIView *) viewIfLoaded\n{\n    UIView * re$ult = [self viewIfLoaded__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "viewSafeAreaInsetsDidChange()": {
      "code": "- (void) viewSafeAreaInsetsDidChange\n{\n    [self viewSafeAreaInsetsDidChange__];\n}\n\n"
    },
    "viewWillAppear(boolean)": {
      "code": "- (void) viewWillAppear:(BOOL) animated\n{\n    [self viewWillAppear___boolean:animated];\n}\n\n"
    },
    "viewWillDisappear(boolean)": {
      "code": "- (void) viewWillDisappear:(BOOL) animated\n{\n    [self viewWillDisappear___boolean:animated];\n}\n\n"
    },
    "viewWillLayoutSubviews()": {
      "code": "- (void) viewWillLayoutSubviews\n{\n    [self viewWillLayoutSubviews__];\n}\n\n"
    },
    "wantsFullScreenLayout()": {
      "code": "- (BOOL) wantsFullScreenLayout\n{\n    return [self wantsFullScreenLayout__];\n}\n\n"
    },
    "willAnimateRotationToInterfaceOrientation(int,double)": {
      "code": "- (void) willAnimateRotationToInterfaceOrientation:(UIInterfaceOrientation) toInterfaceOrientation duration:(NSTimeInterval) duration\n{\n    [self willAnimateRotationToInterfaceOrientation___int_double:toInterfaceOrientation :duration];\n}\n\n"
    },
    "willRotateToInterfaceOrientation(int,double)": {
      "code": "- (void) willRotateToInterfaceOrientation:(UIInterfaceOrientation) toInterfaceOrientation duration:(NSTimeInterval) duration\n{\n    [self willRotateToInterfaceOrientation___int_double:toInterfaceOrientation :duration];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIWebView": {
    "canGoBack()": {
      "code": "- (BOOL) canGoBack\n{\n    return [self canGoBack__];\n}\n\n"
    },
    "canGoForward()": {
      "code": "- (BOOL) canGoForward\n{\n    return [self canGoForward__];\n}\n\n"
    },
    "dataDetectorTypes()": {
      "code": "- (UIDataDetectorTypes) dataDetectorTypes\n{\n    return [self dataDetectorTypes__];\n}\n\n"
    },
    "delegate()": {
      "code": "- (id<UIWebViewDelegate>) delegate\n{\n    id<UIWebViewDelegate> re$ult = [self delegate__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "goBack()": {
      "code": "- (void) goBack\n{\n    [self goBack__];\n}\n\n"
    },
    "goForward()": {
      "code": "- (void) goForward\n{\n    [self goForward__];\n}\n\n"
    },
    "isLoading()": {
      "code": "- (BOOL) isLoading\n{\n    return [self isLoading__];\n}\n\n"
    },
    "loadData(crossmobile.ios.foundation.NSData,java.lang.String,java.lang.String,crossmobile.ios.foundation.NSURL)": {
      "code": "- (void) loadData:(NSData *) data MIMEType:(NSString *) MIMEType textEncodingName:(NSString *) textEncodingName baseURL:(NSURL *) baseURL\n{\n    [self loadData___crossmobile_ios_foundation_NSData_java_lang_String_java_lang_String_crossmobile_ios_foundation_NSURL:(data ? data : JAVA_NULL) :(MIMEType ? MIMEType : JAVA_NULL) :(textEncodingName ? textEncodingName : JAVA_NULL) :(baseURL ? baseURL : JAVA_NULL)];\n}\n\n"
    },
    "loadHTMLString(java.lang.String,crossmobile.ios.foundation.NSURL)": {
      "code": "- (void) loadHTMLString:(NSString *) string baseURL:(NSURL *) baseURL\n{\n    [self loadHTMLString___java_lang_String_crossmobile_ios_foundation_NSURL:(string ? string : JAVA_NULL) :(baseURL ? baseURL : JAVA_NULL)];\n}\n\n"
    },
    "loadRequest(crossmobile.ios.foundation.NSURLRequest)": {
      "code": "- (void) loadRequest:(NSURLRequest *) request\n{\n    [self loadRequest___crossmobile_ios_foundation_NSURLRequest:(request ? request : JAVA_NULL)];\n}\n\n"
    },
    "mediaPlaybackRequiresUserAction()": {
      "code": "- (BOOL) mediaPlaybackRequiresUserAction\n{\n    return [self mediaPlaybackRequiresUserAction__];\n}\n\n"
    },
    "reload()": {
      "code": "- (void) reload\n{\n    [self reload__];\n}\n\n"
    },
    "scalesPageToFit()": {
      "code": "- (BOOL) scalesPageToFit\n{\n    return [self scalesPageToFit__];\n}\n\n"
    },
    "scrollView()": {
      "code": "- (UIScrollView *) scrollView\n{\n    UIScrollView * re$ult = [self scrollView__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "setDataDetectorTypes(long)": {
      "code": "- (void) setDataDetectorTypes:(UIDataDetectorTypes) dataDetectorTypes\n{\n    [self setDataDetectorTypes___long:dataDetectorTypes];\n}\n\n"
    },
    "setDelegate(crossmobile.ios.uikit.UIWebViewDelegate)": {
      "code": "- (void) setDelegate:(id<UIWebViewDelegate>) delegate\n{\n    [self setDelegate___crossmobile_ios_uikit_UIWebViewDelegate:(delegate ? delegate : JAVA_NULL)];\n}\n\n"
    },
    "setMediaPlaybackRequiresUserAction(boolean)": {
      "code": "- (void) setMediaPlaybackRequiresUserAction:(BOOL) mediaPlaybackRequiresUserAction\n{\n    [self setMediaPlaybackRequiresUserAction___boolean:mediaPlaybackRequiresUserAction];\n}\n\n"
    },
    "setScalesPageToFit(boolean)": {
      "code": "- (void) setScalesPageToFit:(BOOL) scalesPageToFit\n{\n    [self setScalesPageToFit___boolean:scalesPageToFit];\n}\n\n"
    },
    "stringByEvaluatingJavaScriptFromString(java.lang.String)": {
      "code": "- (NSString *) stringByEvaluatingJavaScriptFromString:(NSString *) script\n{\n    NSString * re$ult = [self stringByEvaluatingJavaScriptFromString___java_lang_String:(script ? script : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIWebViewDelegate": {
    "didFailLoadWithError(crossmobile.ios.uikit.UIWebView,crossmobile.ios.foundation.NSError)": {
      "code": "- (void) webView:(UIWebView *) webView didFailLoadWithError:(NSError *) error\n{\n    [self didFailLoadWithError___crossmobile_ios_uikit_UIWebView_crossmobile_ios_foundation_NSError:(webView ? webView : JAVA_NULL) :(error ? error : JAVA_NULL)];\n}\n\n"
    },
    "didFinishLoad(crossmobile.ios.uikit.UIWebView)": {
      "code": "- (void) webViewDidFinishLoad:(UIWebView *) webView\n{\n    [self didFinishLoad___crossmobile_ios_uikit_UIWebView:(webView ? webView : JAVA_NULL)];\n}\n\n"
    },
    "didStartLoad(crossmobile.ios.uikit.UIWebView)": {
      "code": "- (void) webViewDidStartLoad:(UIWebView *) webView\n{\n    [self didStartLoad___crossmobile_ios_uikit_UIWebView:(webView ? webView : JAVA_NULL)];\n}\n\n"
    },
    "shouldStartLoadWithRequest(crossmobile.ios.uikit.UIWebView,crossmobile.ios.foundation.NSURLRequest,int)": {
      "code": "- (BOOL) webView:(UIWebView *) webView shouldStartLoadWithRequest:(NSURLRequest *) request navigationType:(UIWebViewNavigationType) navigationType\n{\n    return [self shouldStartLoadWithRequest___crossmobile_ios_uikit_UIWebView_crossmobile_ios_foundation_NSURLRequest_int:(webView ? webView : JAVA_NULL) :(request ? request : JAVA_NULL) :navigationType];\n}\n\n"
    }
  },
  "crossmobile.ios.uikit.UIWindow": {
    "convertPointFromWindow(crossmobile.ios.coregraphics.CGPoint,crossmobile.ios.uikit.UIWindow)": {
      "code": "- (CGPoint) convertPoint:(CGPoint) point fromWindow:(UIWindow *) window\n{\n    crossmobile_ios_coregraphics_CGPoint* point$conv = [[crossmobile_ios_coregraphics_CGPoint alloc] initWithCGPoint:point];\n    crossmobile_ios_coregraphics_CGPoint* re$ult = [self convertPointFromWindow___crossmobile_ios_coregraphics_CGPoint_crossmobile_ios_uikit_UIWindow:point$conv :(window ? window : JAVA_NULL)];\n    CGPoint re$ult$conv = [re$ult getCGPoint];\n    [re$ult release];\n    [point$conv release];\n    return re$ult$conv;\n}\n\n"
    },
    "convertPointToWindow(crossmobile.ios.coregraphics.CGPoint,crossmobile.ios.uikit.UIWindow)": {
      "code": "- (CGPoint) convertPoint:(CGPoint) point toWindow:(UIWindow *) window\n{\n    crossmobile_ios_coregraphics_CGPoint* point$conv = [[crossmobile_ios_coregraphics_CGPoint alloc] initWithCGPoint:point];\n    crossmobile_ios_coregraphics_CGPoint* re$ult = [self convertPointToWindow___crossmobile_ios_coregraphics_CGPoint_crossmobile_ios_uikit_UIWindow:point$conv :(window ? window : JAVA_NULL)];\n    CGPoint re$ult$conv = [re$ult getCGPoint];\n    [re$ult release];\n    [point$conv release];\n    return re$ult$conv;\n}\n\n"
    },
    "convertRectFromWindow(crossmobile.ios.coregraphics.CGRect,crossmobile.ios.uikit.UIWindow)": {
      "code": "- (CGRect) convertRect:(CGRect) rect fromWindow:(UIWindow *) window\n{\n    crossmobile_ios_coregraphics_CGRect* rect$conv = [[crossmobile_ios_coregraphics_CGRect alloc] initWithCGRect:rect];\n    crossmobile_ios_coregraphics_CGRect* re$ult = [self convertRectFromWindow___crossmobile_ios_coregraphics_CGRect_crossmobile_ios_uikit_UIWindow:rect$conv :(window ? window : JAVA_NULL)];\n    CGRect re$ult$conv = [re$ult getCGRect];\n    [re$ult release];\n    [rect$conv release];\n    return re$ult$conv;\n}\n\n"
    },
    "convertRectToWindow(crossmobile.ios.coregraphics.CGRect,crossmobile.ios.uikit.UIWindow)": {
      "code": "- (CGRect) convertRect:(CGRect) rect toWindow:(UIWindow *) window\n{\n    crossmobile_ios_coregraphics_CGRect* rect$conv = [[crossmobile_ios_coregraphics_CGRect alloc] initWithCGRect:rect];\n    crossmobile_ios_coregraphics_CGRect* re$ult = [self convertRectToWindow___crossmobile_ios_coregraphics_CGRect_crossmobile_ios_uikit_UIWindow:rect$conv :(window ? window : JAVA_NULL)];\n    CGRect re$ult$conv = [re$ult getCGRect];\n    [re$ult release];\n    [rect$conv release];\n    return re$ult$conv;\n}\n\n"
    },
    "makeKeyAndVisible()": {
      "code": "- (void) makeKeyAndVisible\n{\n    [self makeKeyAndVisible__];\n}\n\n"
    },
    "rootViewController()": {
      "code": "- (UIViewController *) rootViewController\n{\n    UIViewController * re$ult = [self rootViewController__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
    },
    "sendEvent(crossmobile.ios.uikit.UIEvent)": {
      "code": "- (void) sendEvent:(UIEvent *) event\n{\n    [self sendEvent___crossmobile_ios_uikit_UIEvent:(event ? event : JAVA_NULL)];\n}\n\n"
    },
    "setRootViewController(crossmobile.ios.uikit.UIViewController)": {
      "code": "- (void) setRootViewController:(UIViewController *) rootViewController\n{\n    [self setRootViewController___crossmobile_ios_uikit_UIViewController:(rootViewController ? rootViewController : JAVA_NULL)];\n}\n\n"
    }
  }
}