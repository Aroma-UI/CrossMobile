{
  "crossmobile.ios.gamekit.GKPeerPickerController": {
    "addObserver(crossmobile.ios.foundation.NSObject,java.lang.String,int,java.lang.Object)": null,
    "connectionTypesMask()": {
      "reverse": "- (GKPeerPickerConnectionType) connectionTypesMask\n{\n    return [self connectionTypesMask__];\n}\n\n",
      "super": "- (int) connectionTypesMask__\n{\n    return [super connectionTypesMask];\n}\n\n"
    },
    "delegate()": {
      "reverse": "- (id<GKPeerPickerControllerDelegate>) delegate\n{\n    id<GKPeerPickerControllerDelegate> re$ult = [self delegate__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
      "super": "- (id<GKPeerPickerControllerDelegate>) delegate__\n{\n    id<GKPeerPickerControllerDelegate> re$ult = [super delegate];\n    return [(re$ult ? re$ult : JAVA_NULL) retain];\n}\n\n",
      "supimport": [
        "crossmobile_ios_gamekit_GKPeerPickerControllerDelegate"
      ]
    },
    "dismiss()": {
      "reverse": "- (void) dismiss\n{\n    [self dismiss__];\n}\n\n",
      "super": "- (void) dismiss__\n{\n    [super dismiss];\n}\n\n"
    },
    "isVisible()": {
      "reverse": "- (BOOL) isVisible\n{\n    return [self isVisible__];\n}\n\n",
      "super": "- (BOOL) isVisible__\n{\n    return [super isVisible];\n}\n\n"
    },
    "observeValueForKeyPath(java.lang.String,java.lang.Object,java.util.Map,java.lang.Object)": null,
    "removeObserver(crossmobile.ios.foundation.NSObject,java.lang.String)": null,
    "removeObserver(crossmobile.ios.foundation.NSObject,java.lang.String,java.lang.Object)": null,
    "setConnectionTypesMask(int)": {
      "reverse": "- (void) setConnectionTypesMask:(GKPeerPickerConnectionType) connectionTypesMask\n{\n    [self setConnectionTypesMask___int:connectionTypesMask];\n}\n\n",
      "super": "- (void) setConnectionTypesMask___int:(int) connectionTypesMask \n{\n    [super setConnectionTypesMask:connectionTypesMask];\n}\n\n"
    },
    "setDelegate(crossmobile.ios.gamekit.GKPeerPickerControllerDelegate)": {
      "reverse": "- (void) setDelegate:(id<GKPeerPickerControllerDelegate>) delegate\n{\n    [self setDelegate___crossmobile_ios_gamekit_GKPeerPickerControllerDelegate:(delegate ? delegate : JAVA_NULL)];\n}\n\n",
      "super": "- (void) setDelegate___crossmobile_ios_gamekit_GKPeerPickerControllerDelegate:(id<GKPeerPickerControllerDelegate>) delegate \n{\n    objc_setAssociatedObject(self, @selector(setDelegate:), delegate, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n    [super setDelegate:(delegate == JAVA_NULL ? nil : delegate)];\n}\n\n",
      "supimport": [
        "crossmobile_ios_gamekit_GKPeerPickerControllerDelegate"
      ]
    },
    "setValueForKey(java.lang.Object,java.lang.String)": null,
    "setValueForUndefinedKey(java.lang.Object,java.lang.String)": null,
    "show()": {
      "reverse": "- (void) show\n{\n    [self show__];\n}\n\n",
      "super": "- (void) show__\n{\n    [super show];\n}\n\n"
    },
    "valueForKey(java.lang.String)": null,
    "valueForUndefinedKey(java.lang.String)": null
  },
  "crossmobile.ios.gamekit.GKPeerPickerControllerDelegate": {
    "didCancel(crossmobile.ios.gamekit.GKPeerPickerController)": {
      "reverse": "- (void) peerPickerControllerDidCancel:(GKPeerPickerController *) picker\n{\n    [self didCancel___crossmobile_ios_gamekit_GKPeerPickerController:(picker ? picker : JAVA_NULL)];\n}\n\n",
      "super": "- (void) didCancel___crossmobile_ios_gamekit_GKPeerPickerController:(GKPeerPickerController*) picker \n{\n    [super peerPickerControllerDidCancel:(picker == JAVA_NULL ? nil : picker)];\n}\n\n",
      "supimport": [
        "crossmobile_ios_gamekit_GKPeerPickerController"
      ]
    },
    "didConnectPeer(crossmobile.ios.gamekit.GKPeerPickerController,java.lang.String,crossmobile.ios.gamekit.GKSession)": {
      "reverse": "- (void) peerPickerController:(GKPeerPickerController *) picker didConnectPeer:(NSString *) peerID toSession:(GKSession *) session\n{\n    [self didConnectPeer___crossmobile_ios_gamekit_GKPeerPickerController_java_lang_String_crossmobile_ios_gamekit_GKSession:(picker ? picker : JAVA_NULL) :(peerID ? peerID : JAVA_NULL) :(session ? session : JAVA_NULL)];\n}\n\n",
      "super": "- (void) didConnectPeer___crossmobile_ios_gamekit_GKPeerPickerController_java_lang_String_crossmobile_ios_gamekit_GKSession:(GKPeerPickerController*) picker :(NSString*) peerID :(GKSession*) session \n{\n    [super peerPickerController:(picker == JAVA_NULL ? nil : picker) didConnectPeer:(peerID == JAVA_NULL ? nil : peerID) toSession:(session == JAVA_NULL ? nil : session)];\n}\n\n",
      "supimport": [
        "crossmobile_ios_gamekit_GKPeerPickerController",
        "crossmobile_ios_gamekit_GKSession",
        "java_lang_String"
      ]
    },
    "didSelectConnectionType(crossmobile.ios.gamekit.GKPeerPickerController,int)": {
      "reverse": "- (void) peerPickerController:(GKPeerPickerController *) picker didSelectConnectionType:(GKPeerPickerConnectionType) type\n{\n    [self didSelectConnectionType___crossmobile_ios_gamekit_GKPeerPickerController_int:(picker ? picker : JAVA_NULL) :type];\n}\n\n",
      "super": "- (void) didSelectConnectionType___crossmobile_ios_gamekit_GKPeerPickerController_int:(GKPeerPickerController*) picker :(int) type \n{\n    [super peerPickerController:(picker == JAVA_NULL ? nil : picker) didSelectConnectionType:type];\n}\n\n",
      "supimport": [
        "crossmobile_ios_gamekit_GKPeerPickerController"
      ]
    },
    "sessionForConnectionType(crossmobile.ios.gamekit.GKPeerPickerController,int)": {
      "reverse": "- (GKSession *) peerPickerController:(GKPeerPickerController *) picker sessionForConnectionType:(GKPeerPickerConnectionType) type\n{\n    GKSession * re$ult = [self sessionForConnectionType___crossmobile_ios_gamekit_GKPeerPickerController_int:(picker ? picker : JAVA_NULL) :type];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
      "super": "- (GKSession*) sessionForConnectionType___crossmobile_ios_gamekit_GKPeerPickerController_int:(GKPeerPickerController*) picker :(int) type \n{\n    GKSession* re$ult = [super peerPickerController:(picker == JAVA_NULL ? nil : picker) sessionForConnectionType:type];\n    return [(re$ult ? re$ult : JAVA_NULL) retain];\n}\n\n",
      "supimport": [
        "crossmobile_ios_gamekit_GKPeerPickerController",
        "crossmobile_ios_gamekit_GKSession"
      ]
    }
  },
  "crossmobile.ios.gamekit.GKSession": {
    "acceptConnectionFromPeer(java.lang.String,crossmobile.rt.StrongReference)": {
      "reverse": "- (BOOL) acceptConnectionFromPeer:(NSString *) peerID error:(NSError **) error\n{\n    crossmobile_rt_StrongReference* error$conv = error ? [[crossmobile_rt_StrongReference alloc] __init_crossmobile_ios_StrongReference___java_lang_Object:*error] : JAVA_NULL;\n    BOOL re$ult = [self acceptConnectionFromPeer___java_lang_String_crossmobile_rt_StrongReference:(peerID ? peerID : JAVA_NULL) :error$conv];\n    [error$conv release];\n    return re$ult;\n}\n\n",
      "super": "- (BOOL) acceptConnectionFromPeer___java_lang_String_crossmobile_rt_StrongReference:(NSString*) peerID :(crossmobile_rt_StrongReference*) error \n{\n    error = error == JAVA_NULL ? nil : error;\n    id error$conv = nil;\n    BOOL re$ult = [super acceptConnectionFromPeer:(peerID == JAVA_NULL ? nil : peerID) error:(error ? &error$conv : nil)];\n    if (error)\n        [error set___java_lang_Object:(error$conv ? error$conv : JAVA_NULL)];\n    return re$ult;\n}\n\n",
      "supimport": [
        "crossmobile_ios_foundation_NSError",
        "java_lang_String"
      ]
    },
    "addObserver(crossmobile.ios.foundation.NSObject,java.lang.String,int,java.lang.Object)": null,
    "cancelConnectToPeer(java.lang.String)": {
      "reverse": "- (void) cancelConnectToPeer:(NSString *) peerID\n{\n    [self cancelConnectToPeer___java_lang_String:(peerID ? peerID : JAVA_NULL)];\n}\n\n",
      "super": "- (void) cancelConnectToPeer___java_lang_String:(NSString*) peerID \n{\n    [super cancelConnectToPeer:(peerID == JAVA_NULL ? nil : peerID)];\n}\n\n",
      "supimport": [
        "java_lang_String"
      ]
    },
    "connectToPeer(java.lang.String,double)": {
      "reverse": "- (void) connectToPeer:(NSString *) peerID withTimeout:(NSTimeInterval) timeout\n{\n    [self connectToPeer___java_lang_String_double:(peerID ? peerID : JAVA_NULL) :timeout];\n}\n\n",
      "super": "- (void) connectToPeer___java_lang_String_double:(NSString*) peerID :(double) timeout \n{\n    [super connectToPeer:(peerID == JAVA_NULL ? nil : peerID) withTimeout:timeout];\n}\n\n",
      "supimport": [
        "java_lang_String"
      ]
    },
    "delegate()": {
      "reverse": "- (id<GKSessionDelegate>) delegate\n{\n    id<GKSessionDelegate> re$ult = [self delegate__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
      "super": "- (id<GKSessionDelegate>) delegate__\n{\n    id<GKSessionDelegate> re$ult = [super delegate];\n    return [(re$ult ? re$ult : JAVA_NULL) retain];\n}\n\n",
      "supimport": [
        "crossmobile_ios_gamekit_GKSessionDelegate"
      ]
    },
    "denyConnectionFromPeer(java.lang.String)": {
      "reverse": "- (void) denyConnectionFromPeer:(NSString *) peerID\n{\n    [self denyConnectionFromPeer___java_lang_String:(peerID ? peerID : JAVA_NULL)];\n}\n\n",
      "super": "- (void) denyConnectionFromPeer___java_lang_String:(NSString*) peerID \n{\n    [super denyConnectionFromPeer:(peerID == JAVA_NULL ? nil : peerID)];\n}\n\n",
      "supimport": [
        "java_lang_String"
      ]
    },
    "disconnectFromAllPeers()": {
      "reverse": "- (void) disconnectFromAllPeers\n{\n    [self disconnectFromAllPeers__];\n}\n\n",
      "super": "- (void) disconnectFromAllPeers__\n{\n    [super disconnectFromAllPeers];\n}\n\n"
    },
    "disconnectPeerFromAllPeers(java.lang.String)": {
      "reverse": "- (void) disconnectPeerFromAllPeers:(NSString *) peerID\n{\n    [self disconnectPeerFromAllPeers___java_lang_String:(peerID ? peerID : JAVA_NULL)];\n}\n\n",
      "super": "- (void) disconnectPeerFromAllPeers___java_lang_String:(NSString*) peerID \n{\n    [super disconnectPeerFromAllPeers:(peerID == JAVA_NULL ? nil : peerID)];\n}\n\n",
      "supimport": [
        "java_lang_String"
      ]
    },
    "disconnectTimeout()": {
      "reverse": "- (NSTimeInterval) disconnectTimeout\n{\n    return [self disconnectTimeout__];\n}\n\n",
      "super": "- (double) disconnectTimeout__\n{\n    return [super disconnectTimeout];\n}\n\n"
    },
    "displayName()": {
      "reverse": "- (NSString *) displayName\n{\n    NSString * re$ult = [self displayName__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
      "super": "- (NSString*) displayName__\n{\n    NSString* re$ult = [super displayName];\n    return [(re$ult ? re$ult : JAVA_NULL) retain];\n}\n\n",
      "supimport": [
        "java_lang_String"
      ]
    },
    "displayNameForPeer(java.lang.String)": {
      "reverse": "- (NSString *) displayNameForPeer:(NSString *) peerID\n{\n    NSString * re$ult = [self displayNameForPeer___java_lang_String:(peerID ? peerID : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
      "super": "- (NSString*) displayNameForPeer___java_lang_String:(NSString*) peerID \n{\n    NSString* re$ult = [super displayNameForPeer:(peerID == JAVA_NULL ? nil : peerID)];\n    return [(re$ult ? re$ult : JAVA_NULL) retain];\n}\n\n",
      "supimport": [
        "java_lang_String"
      ]
    },
    "isAvailable()": {
      "reverse": "- (BOOL) isAvailable\n{\n    return [self isAvailable__];\n}\n\n",
      "super": "- (BOOL) isAvailable__\n{\n    return [super isAvailable];\n}\n\n"
    },
    "observeValueForKeyPath(java.lang.String,java.lang.Object,java.util.Map,java.lang.Object)": null,
    "peerID()": {
      "reverse": "- (NSString *) peerID\n{\n    NSString * re$ult = [self peerID__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
      "super": "- (NSString*) peerID__\n{\n    NSString* re$ult = [super peerID];\n    return [(re$ult ? re$ult : JAVA_NULL) retain];\n}\n\n",
      "supimport": [
        "java_lang_String"
      ]
    },
    "peersWithConnectionState(int)": {
      "reverse": "- (NSArray *) peersWithConnectionState:(GKPeerConnectionState) state\n{\n    NSArray * re$ult = [self peersWithConnectionState___int:state];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
      "super": "- (NSArray*) peersWithConnectionState___int:(int) state \n{\n    NSArray* re$ult = [super peersWithConnectionState:state];\n    return [(re$ult ? re$ult : JAVA_NULL) retain];\n}\n\n",
      "supimport": [
        "java_util_List"
      ]
    },
    "removeObserver(crossmobile.ios.foundation.NSObject,java.lang.String)": null,
    "removeObserver(crossmobile.ios.foundation.NSObject,java.lang.String,java.lang.Object)": null,
    "sendData(crossmobile.ios.foundation.NSData,java.util.List,int,crossmobile.rt.StrongReference)": {
      "reverse": "- (BOOL) sendData:(NSData *) data toPeers:(NSArray *) peers withDataMode:(GKSendDataMode) mode error:(NSError **) error\n{\n    crossmobile_rt_StrongReference* error$conv = error ? [[crossmobile_rt_StrongReference alloc] __init_crossmobile_ios_StrongReference___java_lang_Object:*error] : JAVA_NULL;\n    BOOL re$ult = [self sendData___crossmobile_ios_foundation_NSData_java_util_List_int_crossmobile_rt_StrongReference:(data ? data : JAVA_NULL) :(peers ? peers : JAVA_NULL) :mode :error$conv];\n    [error$conv release];\n    return re$ult;\n}\n\n",
      "super": "- (BOOL) sendData___crossmobile_ios_foundation_NSData_java_util_List_int_crossmobile_rt_StrongReference:(NSData*) data :(NSArray*) peers :(int) mode :(crossmobile_rt_StrongReference*) error \n{\n    error = error == JAVA_NULL ? nil : error;\n    id error$conv = nil;\n    BOOL re$ult = [super sendData:(data == JAVA_NULL ? nil : data) toPeers:(peers == JAVA_NULL ? nil : peers) withDataMode:mode error:(error ? &error$conv : nil)];\n    if (error)\n        [error set___java_lang_Object:(error$conv ? error$conv : JAVA_NULL)];\n    return re$ult;\n}\n\n",
      "supimport": [
        "crossmobile_ios_foundation_NSData",
        "crossmobile_ios_foundation_NSError",
        "java_util_List"
      ]
    },
    "sendDataToAllPeers(crossmobile.ios.foundation.NSData,int,crossmobile.rt.StrongReference)": {
      "reverse": "- (BOOL) sendDataToAllPeers:(NSData *) data withDataMode:(GKSendDataMode) mode error:(NSError **) error\n{\n    crossmobile_rt_StrongReference* error$conv = error ? [[crossmobile_rt_StrongReference alloc] __init_crossmobile_ios_StrongReference___java_lang_Object:*error] : JAVA_NULL;\n    BOOL re$ult = [self sendDataToAllPeers___crossmobile_ios_foundation_NSData_int_crossmobile_rt_StrongReference:(data ? data : JAVA_NULL) :mode :error$conv];\n    [error$conv release];\n    return re$ult;\n}\n\n",
      "super": "- (BOOL) sendDataToAllPeers___crossmobile_ios_foundation_NSData_int_crossmobile_rt_StrongReference:(NSData*) data :(int) mode :(crossmobile_rt_StrongReference*) error \n{\n    error = error == JAVA_NULL ? nil : error;\n    id error$conv = nil;\n    BOOL re$ult = [super sendDataToAllPeers:(data == JAVA_NULL ? nil : data) withDataMode:mode error:(error ? &error$conv : nil)];\n    if (error)\n        [error set___java_lang_Object:(error$conv ? error$conv : JAVA_NULL)];\n    return re$ult;\n}\n\n",
      "supimport": [
        "crossmobile_ios_foundation_NSData",
        "crossmobile_ios_foundation_NSError"
      ]
    },
    "sessionID()": {
      "reverse": "- (NSString *) sessionID\n{\n    NSString * re$ult = [self sessionID__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
      "super": "- (NSString*) sessionID__\n{\n    NSString* re$ult = [super sessionID];\n    return [(re$ult ? re$ult : JAVA_NULL) retain];\n}\n\n",
      "supimport": [
        "java_lang_String"
      ]
    },
    "sessionMode()": {
      "reverse": "- (GKSessionMode) sessionMode\n{\n    return [self sessionMode__];\n}\n\n",
      "super": "- (int) sessionMode__\n{\n    return [super sessionMode];\n}\n\n"
    },
    "setAvailable(boolean)": {
      "reverse": "- (void) setAvailable:(BOOL) available\n{\n    [self setAvailable___boolean:available];\n}\n\n",
      "super": "- (void) setAvailable___boolean:(BOOL) available \n{\n    [super setAvailable:available];\n}\n\n"
    },
    "setDataReceiveHandler(crossmobile.ios.gamekit.GKDataReceiveHandler,java.lang.Object)": {
      "reverse": "- (void) setDataReceiveHandler:(id) handler withContext:(void *) context\n{\n    [self setDataReceiveHandler___crossmobile_ios_gamekit_GKDataReceiveHandler_java_lang_Object:(handler ? handler : JAVA_NULL) :(context ? context : JAVA_NULL)];\n}\n\n",
      "super": "- (void) setDataReceiveHandler___crossmobile_ios_gamekit_GKDataReceiveHandler_java_lang_Object:(id<crossmobile_ios_gamekit_GKDataReceiveHandler>) handler :(id) context \n{\n    [super setDataReceiveHandler:(handler == JAVA_NULL ? nil : handler) withContext:(context == JAVA_NULL ? nil : context)];\n}\n\n",
      "supimport": [
        "java_lang_Object"
      ]
    },
    "setDelegate(crossmobile.ios.gamekit.GKSessionDelegate)": {
      "reverse": "- (void) setDelegate:(id<GKSessionDelegate>) delegate\n{\n    [self setDelegate___crossmobile_ios_gamekit_GKSessionDelegate:(delegate ? delegate : JAVA_NULL)];\n}\n\n",
      "super": "- (void) setDelegate___crossmobile_ios_gamekit_GKSessionDelegate:(id<GKSessionDelegate>) delegate \n{\n    objc_setAssociatedObject(self, @selector(setDelegate:), delegate, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n    [super setDelegate:(delegate == JAVA_NULL ? nil : delegate)];\n}\n\n",
      "supimport": [
        "crossmobile_ios_gamekit_GKSessionDelegate"
      ]
    },
    "setDisconnectTimeout(double)": {
      "reverse": "- (void) setDisconnectTimeout:(NSTimeInterval) disconnectTimeout\n{\n    [self setDisconnectTimeout___double:disconnectTimeout];\n}\n\n",
      "super": "- (void) setDisconnectTimeout___double:(double) disconnectTimeout \n{\n    [super setDisconnectTimeout:disconnectTimeout];\n}\n\n"
    },
    "setValueForKey(java.lang.Object,java.lang.String)": null,
    "setValueForUndefinedKey(java.lang.Object,java.lang.String)": null,
    "valueForKey(java.lang.String)": null,
    "valueForUndefinedKey(java.lang.String)": null
  },
  "crossmobile.ios.gamekit.GKSessionDelegate": {
    "connectionWithPeerFailed(crossmobile.ios.gamekit.GKSession,java.lang.String,crossmobile.ios.foundation.NSError)": {
      "reverse": "- (void) session:(GKSession *) session connectionWithPeerFailed:(NSString *) peerID withError:(NSError *) error\n{\n    [self connectionWithPeerFailed___crossmobile_ios_gamekit_GKSession_java_lang_String_crossmobile_ios_foundation_NSError:(session ? session : JAVA_NULL) :(peerID ? peerID : JAVA_NULL) :(error ? error : JAVA_NULL)];\n}\n\n",
      "super": "- (void) connectionWithPeerFailed___crossmobile_ios_gamekit_GKSession_java_lang_String_crossmobile_ios_foundation_NSError:(GKSession*) session :(NSString*) peerID :(NSError*) error \n{\n    [super session:(session == JAVA_NULL ? nil : session) connectionWithPeerFailed:(peerID == JAVA_NULL ? nil : peerID) withError:(error == JAVA_NULL ? nil : error)];\n}\n\n",
      "supimport": [
        "crossmobile_ios_foundation_NSError",
        "crossmobile_ios_gamekit_GKSession",
        "java_lang_String"
      ]
    },
    "didFailWithError(crossmobile.ios.gamekit.GKSession,crossmobile.ios.foundation.NSError)": {
      "reverse": "- (void) session:(GKSession *) session didFailWithError:(NSError *) error\n{\n    [self didFailWithError___crossmobile_ios_gamekit_GKSession_crossmobile_ios_foundation_NSError:(session ? session : JAVA_NULL) :(error ? error : JAVA_NULL)];\n}\n\n",
      "super": "- (void) didFailWithError___crossmobile_ios_gamekit_GKSession_crossmobile_ios_foundation_NSError:(GKSession*) session :(NSError*) error \n{\n    [super session:(session == JAVA_NULL ? nil : session) didFailWithError:(error == JAVA_NULL ? nil : error)];\n}\n\n",
      "supimport": [
        "crossmobile_ios_foundation_NSError",
        "crossmobile_ios_gamekit_GKSession"
      ]
    },
    "didReceiveConnectionRequestFromPeer(crossmobile.ios.gamekit.GKSession,java.lang.String)": {
      "reverse": "- (void) session:(GKSession *) session didReceiveConnectionRequestFromPeer:(NSString *) peerID\n{\n    [self didReceiveConnectionRequestFromPeer___crossmobile_ios_gamekit_GKSession_java_lang_String:(session ? session : JAVA_NULL) :(peerID ? peerID : JAVA_NULL)];\n}\n\n",
      "super": "- (void) didReceiveConnectionRequestFromPeer___crossmobile_ios_gamekit_GKSession_java_lang_String:(GKSession*) session :(NSString*) peerID \n{\n    [super session:(session == JAVA_NULL ? nil : session) didReceiveConnectionRequestFromPeer:(peerID == JAVA_NULL ? nil : peerID)];\n}\n\n",
      "supimport": [
        "crossmobile_ios_gamekit_GKSession",
        "java_lang_String"
      ]
    },
    "peerDidChangeState(crossmobile.ios.gamekit.GKSession,java.lang.String,int)": {
      "reverse": "- (void) session:(GKSession *) session peer:(NSString *) peerID didChangeState:(GKPeerConnectionState) state\n{\n    [self peerDidChangeState___crossmobile_ios_gamekit_GKSession_java_lang_String_int:(session ? session : JAVA_NULL) :(peerID ? peerID : JAVA_NULL) :state];\n}\n\n",
      "super": "- (void) peerDidChangeState___crossmobile_ios_gamekit_GKSession_java_lang_String_int:(GKSession*) session :(NSString*) peerID :(int) state \n{\n    [super session:(session == JAVA_NULL ? nil : session) peer:(peerID == JAVA_NULL ? nil : peerID) didChangeState:state];\n}\n\n",
      "supimport": [
        "crossmobile_ios_gamekit_GKSession",
        "java_lang_String"
      ]
    }
  }
}