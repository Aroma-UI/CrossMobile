{
  "crossmobile.ios.corelocation.CLHeading": {
    "description()": "- (NSString *) description\n{\n    NSString * re$ult = [self description__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "headingAccuracy()": "- (CLLocationDirection) headingAccuracy\n{\n    return [self headingAccuracy__];\n}\n\n",
    "magneticHeading()": "- (CLLocationDirection) magneticHeading\n{\n    return [self magneticHeading__];\n}\n\n",
    "timestamp()": "- (NSDate *) timestamp\n{\n    NSDate * re$ult = [self timestamp__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "trueHeading()": "- (CLLocationDirection) trueHeading\n{\n    return [self trueHeading__];\n}\n\n",
    "x()": "- (CLHeadingComponentValue) x\n{\n    return [self x__];\n}\n\n",
    "y()": "- (CLHeadingComponentValue) y\n{\n    return [self y__];\n}\n\n",
    "z()": "- (CLHeadingComponentValue) z\n{\n    return [self z__];\n}\n\n"
  },
  "crossmobile.ios.corelocation.CLLocation": {
    "altitude()": "- (CLLocationDistance) altitude\n{\n    return [self altitude__];\n}\n\n",
    "coordinate()": "- (CLLocationCoordinate2D) coordinate\n{\n    crossmobile_ios_corelocation_CLLocationCoordinate2D* re$ult = [self coordinate__];\n    CLLocationCoordinate2D re$ult$conv = [re$ult getCLLocationCoordinate2D];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n",
    "course()": "- (CLLocationDirection) course\n{\n    return [self course__];\n}\n\n",
    "distanceFromLocation(crossmobile.ios.corelocation.CLLocation)": "- (CLLocationDistance) distanceFromLocation:(CLLocation *) location\n{\n    return [self distanceFromLocation___crossmobile_ios_corelocation_CLLocation:(location ? location : JAVA_NULL)];\n}\n\n",
    "horizontalAccuracy()": "- (CLLocationAccuracy) horizontalAccuracy\n{\n    return [self horizontalAccuracy__];\n}\n\n",
    "speed()": "- (CLLocationSpeed) speed\n{\n    return [self speed__];\n}\n\n",
    "timestamp()": "- (NSDate *) timestamp\n{\n    NSDate * re$ult = [self timestamp__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "verticalAccuracy()": "- (CLLocationAccuracy) verticalAccuracy\n{\n    return [self verticalAccuracy__];\n}\n\n"
  },
  "crossmobile.ios.corelocation.CLLocationManager": {
    "delegate()": "- (id<CLLocationManagerDelegate>) delegate\n{\n    id<CLLocationManagerDelegate> re$ult = [self delegate__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "desiredAccuracy()": "- (CLLocationAccuracy) desiredAccuracy\n{\n    return [self desiredAccuracy__];\n}\n\n",
    "dismissHeadingCalibrationDisplay()": "- (void) dismissHeadingCalibrationDisplay\n{\n    [self dismissHeadingCalibrationDisplay__];\n}\n\n",
    "distanceFilter()": "- (CLLocationDistance) distanceFilter\n{\n    return [self distanceFilter__];\n}\n\n",
    "heading()": "- (CLHeading *) heading\n{\n    CLHeading * re$ult = [self heading__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "headingFilter()": "- (CLLocationDegrees) headingFilter\n{\n    return [self headingFilter__];\n}\n\n",
    "headingOrientation()": "- (CLDeviceOrientation) headingOrientation\n{\n    return [self headingOrientation__];\n}\n\n",
    "location()": "- (CLLocation *) location\n{\n    CLLocation * re$ult = [self location__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "maximumRegionMonitoringDistance()": "- (CLLocationDistance) maximumRegionMonitoringDistance\n{\n    return [self maximumRegionMonitoringDistance__];\n}\n\n",
    "monitoredRegions()": "- (NSSet<__kindof CLRegion *> *) monitoredRegions\n{\n    NSSet<__kindof CLRegion *> * re$ult = [self monitoredRegions__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "purpose()": "- (NSString *) purpose\n{\n    NSString * re$ult = [self purpose__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "setDelegate(crossmobile.ios.corelocation.CLLocationManagerDelegate)": "- (void) setDelegate:(id<CLLocationManagerDelegate>) delegate\n{\n    [self setDelegate___crossmobile_ios_corelocation_CLLocationManagerDelegate:(delegate ? delegate : JAVA_NULL)];\n}\n\n",
    "setDesiredAccuracy(double)": "- (void) setDesiredAccuracy:(CLLocationAccuracy) desiredAccuracy\n{\n    [self setDesiredAccuracy___double:desiredAccuracy];\n}\n\n",
    "setDistanceFilter(double)": "- (void) setDistanceFilter:(CLLocationDistance) distanceFilter\n{\n    [self setDistanceFilter___double:distanceFilter];\n}\n\n",
    "setHeadingFilter(double)": "- (void) setHeadingFilter:(CLLocationDegrees) headingFilter\n{\n    [self setHeadingFilter___double:headingFilter];\n}\n\n",
    "setHeadingOrientation(int)": "- (void) setHeadingOrientation:(CLDeviceOrientation) headingOrientation\n{\n    [self setHeadingOrientation___int:headingOrientation];\n}\n\n",
    "setPurpose(java.lang.String)": "- (void) setPurpose:(NSString *) purpose\n{\n    [self setPurpose___java_lang_String:(purpose ? purpose : JAVA_NULL)];\n}\n\n",
    "startMonitoringForRegion(crossmobile.ios.corelocation.CLRegion,double)": "- (void) startMonitoringForRegion:(CLRegion *) region desiredAccuracy:(CLLocationAccuracy) accuracy\n{\n    [self startMonitoringForRegion___crossmobile_ios_corelocation_CLRegion_double:(region ? region : JAVA_NULL) :accuracy];\n}\n\n",
    "startMonitoringSignificantLocationChanges()": "- (void) startMonitoringSignificantLocationChanges\n{\n    [self startMonitoringSignificantLocationChanges__];\n}\n\n",
    "startUpdatingHeading()": "- (void) startUpdatingHeading\n{\n    [self startUpdatingHeading__];\n}\n\n",
    "startUpdatingLocation()": "- (void) startUpdatingLocation\n{\n    [self startUpdatingLocation__];\n}\n\n",
    "stopMonitoringForRegion(crossmobile.ios.corelocation.CLRegion)": "- (void) stopMonitoringForRegion:(CLRegion *) region\n{\n    [self stopMonitoringForRegion___crossmobile_ios_corelocation_CLRegion:(region ? region : JAVA_NULL)];\n}\n\n",
    "stopMonitoringSignificantLocationChanges()": "- (void) stopMonitoringSignificantLocationChanges\n{\n    [self stopMonitoringSignificantLocationChanges__];\n}\n\n",
    "stopUpdatingHeading()": "- (void) stopUpdatingHeading\n{\n    [self stopUpdatingHeading__];\n}\n\n",
    "stopUpdatingLocation()": "- (void) stopUpdatingLocation\n{\n    [self stopUpdatingLocation__];\n}\n\n"
  },
  "crossmobile.ios.corelocation.CLLocationManagerDelegate": {
    "didEnterRegion(crossmobile.ios.corelocation.CLLocationManager,crossmobile.ios.corelocation.CLRegion)": "- (void) locationManager:(CLLocationManager *) manager didEnterRegion:(CLRegion *) region\n{\n    [self didEnterRegion___crossmobile_ios_corelocation_CLLocationManager_crossmobile_ios_corelocation_CLRegion:(manager ? manager : JAVA_NULL) :(region ? region : JAVA_NULL)];\n}\n\n",
    "didExitRegion(crossmobile.ios.corelocation.CLLocationManager,crossmobile.ios.corelocation.CLRegion)": "- (void) locationManager:(CLLocationManager *) manager didExitRegion:(CLRegion *) region\n{\n    [self didExitRegion___crossmobile_ios_corelocation_CLLocationManager_crossmobile_ios_corelocation_CLRegion:(manager ? manager : JAVA_NULL) :(region ? region : JAVA_NULL)];\n}\n\n",
    "didFailWithError(crossmobile.ios.corelocation.CLLocationManager,crossmobile.ios.foundation.NSError)": "- (void) locationManager:(CLLocationManager *) manager didFailWithError:(NSError *) error\n{\n    [self didFailWithError___crossmobile_ios_corelocation_CLLocationManager_crossmobile_ios_foundation_NSError:(manager ? manager : JAVA_NULL) :(error ? error : JAVA_NULL)];\n}\n\n",
    "didUpdateHeading(crossmobile.ios.corelocation.CLLocationManager,crossmobile.ios.corelocation.CLHeading)": "- (void) locationManager:(CLLocationManager *) manager didUpdateHeading:(CLHeading *) newHeading\n{\n    [self didUpdateHeading___crossmobile_ios_corelocation_CLLocationManager_crossmobile_ios_corelocation_CLHeading:(manager ? manager : JAVA_NULL) :(newHeading ? newHeading : JAVA_NULL)];\n}\n\n",
    "didUpdateToLocation(crossmobile.ios.corelocation.CLLocationManager,crossmobile.ios.corelocation.CLLocation,crossmobile.ios.corelocation.CLLocation)": "- (void) locationManager:(CLLocationManager *) manager didUpdateToLocation:(CLLocation *) newLocation fromLocation:(CLLocation *) oldLocation\n{\n    [self didUpdateToLocation___crossmobile_ios_corelocation_CLLocationManager_crossmobile_ios_corelocation_CLLocation_crossmobile_ios_corelocation_CLLocation:(manager ? manager : JAVA_NULL) :(newLocation ? newLocation : JAVA_NULL) :(oldLocation ? oldLocation : JAVA_NULL)];\n}\n\n",
    "monitoringDidFailForRegion(crossmobile.ios.corelocation.CLLocationManager,crossmobile.ios.corelocation.CLRegion,crossmobile.ios.foundation.NSError)": "- (void) locationManager:(CLLocationManager *) manager monitoringDidFailForRegion:(CLRegion *) region withError:(NSError *) error\n{\n    [self monitoringDidFailForRegion___crossmobile_ios_corelocation_CLLocationManager_crossmobile_ios_corelocation_CLRegion_crossmobile_ios_foundation_NSError:(manager ? manager : JAVA_NULL) :(region ? region : JAVA_NULL) :(error ? error : JAVA_NULL)];\n}\n\n",
    "shouldDisplayHeadingCalibration(crossmobile.ios.corelocation.CLLocationManager)": "- (BOOL) locationManagerShouldDisplayHeadingCalibration:(CLLocationManager *) manager\n{\n    return [self shouldDisplayHeadingCalibration___crossmobile_ios_corelocation_CLLocationManager:(manager ? manager : JAVA_NULL)];\n}\n\n"
  },
  "crossmobile.ios.corelocation.CLPlacemark": {
    "ISOcountryCode()": "- (NSString *) ISOcountryCode\n{\n    NSString * re$ult = [self ISOcountryCode__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "addressDictionary()": "- (NSDictionary *) addressDictionary\n{\n    NSDictionary * re$ult = [self addressDictionary__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "administrativeArea()": "- (NSString *) administrativeArea\n{\n    NSString * re$ult = [self administrativeArea__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "areasOfInterest()": "- (NSArray <NSString *> *) areasOfInterest\n{\n    NSArray <NSString *> * re$ult = [self areasOfInterest__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "country()": "- (NSString *) country\n{\n    NSString * re$ult = [self country__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "inlandWater()": "- (NSString *) inlandWater\n{\n    NSString * re$ult = [self inlandWater__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "locality()": "- (NSString *) locality\n{\n    NSString * re$ult = [self locality__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "location()": "- (CLLocation *) location\n{\n    CLLocation * re$ult = [self location__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "ocean()": "- (NSString *) ocean\n{\n    NSString * re$ult = [self ocean__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "postalCode()": "- (NSString *) postalCode\n{\n    NSString * re$ult = [self postalCode__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "region()": "- (CLRegion *) region\n{\n    CLRegion * re$ult = [self region__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "subAdministrativeArea()": "- (NSString *) subAdministrativeArea\n{\n    NSString * re$ult = [self subAdministrativeArea__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "subLocality()": "- (NSString *) subLocality\n{\n    NSString * re$ult = [self subLocality__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "subThoroughfare()": "- (NSString *) subThoroughfare\n{\n    NSString * re$ult = [self subThoroughfare__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "thoroughfare()": "- (NSString *) thoroughfare\n{\n    NSString * re$ult = [self thoroughfare__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "timeZone()": "- (NSTimeZone *) timeZone\n{\n    NSTimeZone * re$ult = [self timeZone__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
  },
  "crossmobile.ios.corelocation.CLRegion": {
    "center()": "- (CLLocationCoordinate2D) center\n{\n    crossmobile_ios_corelocation_CLLocationCoordinate2D* re$ult = [self center__];\n    CLLocationCoordinate2D re$ult$conv = [re$ult getCLLocationCoordinate2D];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n",
    "containsCoordinate(crossmobile.ios.corelocation.CLLocationCoordinate2D)": "- (BOOL) containsCoordinate:(CLLocationCoordinate2D) coordinate\n{\n    crossmobile_ios_corelocation_CLLocationCoordinate2D* coordinate$conv = [[crossmobile_ios_corelocation_CLLocationCoordinate2D alloc] initWithCLLocationCoordinate2D:coordinate];\n    BOOL re$ult = [self containsCoordinate___crossmobile_ios_corelocation_CLLocationCoordinate2D:coordinate$conv];\n    [coordinate$conv release];\n    return re$ult;\n}\n\n",
    "identifier()": "- (NSString *) identifier\n{\n    NSString * re$ult = [self identifier__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "radius()": "- (CLLocationDistance) radius\n{\n    return [self radius__];\n}\n\n"
  },
  "crossmobile.ios.mapkit.MKAnnotation": {
    "coordinate()": "- (CLLocationCoordinate2D) coordinate\n{\n    crossmobile_ios_corelocation_CLLocationCoordinate2D* re$ult = [self coordinate__];\n    CLLocationCoordinate2D re$ult$conv = [re$ult getCLLocationCoordinate2D];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n",
    "setCoordinate(crossmobile.ios.corelocation.CLLocationCoordinate2D)": "- (void) setCoordinate:(CLLocationCoordinate2D) newCoordinate\n{\n    crossmobile_ios_corelocation_CLLocationCoordinate2D* newCoordinate$conv = [[crossmobile_ios_corelocation_CLLocationCoordinate2D alloc] initWithCLLocationCoordinate2D:newCoordinate];\n    [self setCoordinate___crossmobile_ios_corelocation_CLLocationCoordinate2D:newCoordinate$conv];\n    [newCoordinate$conv release];\n}\n\n",
    "subtitle()": "- (NSString *) subtitle\n{\n    NSString * re$ult = [self subtitle__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "title()": "- (NSString *) title\n{\n    NSString * re$ult = [self title__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
  },
  "crossmobile.ios.mapkit.MKAnnotationView": {
    "annotation()": "- (id<MKAnnotation>) annotation\n{\n    id<MKAnnotation> re$ult = [self annotation__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "calloutOffset()": "- (CGPoint) calloutOffset\n{\n    crossmobile_ios_coregraphics_CGPoint* re$ult = [self calloutOffset__];\n    CGPoint re$ult$conv = [re$ult getCGPoint];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n",
    "canShowCallout()": "- (BOOL) canShowCallout\n{\n    return [self canShowCallout__];\n}\n\n",
    "centerOffset()": "- (CGPoint) centerOffset\n{\n    crossmobile_ios_coregraphics_CGPoint* re$ult = [self centerOffset__];\n    CGPoint re$ult$conv = [re$ult getCGPoint];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n",
    "dragState()": "- (MKAnnotationViewDragState) dragState\n{\n    return [self dragState__];\n}\n\n",
    "image()": "- (UIImage *) image\n{\n    UIImage * re$ult = [self image__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "isDraggable()": "- (BOOL) isDraggable\n{\n    return [self isDraggable__];\n}\n\n",
    "isEnabled()": "- (BOOL) isEnabled\n{\n    return [self isEnabled__];\n}\n\n",
    "isHighlighted()": "- (BOOL) isHighlighted\n{\n    return [self isHighlighted__];\n}\n\n",
    "isSelected()": "- (BOOL) isSelected\n{\n    return [self isSelected__];\n}\n\n",
    "leftCalloutAccessoryView()": "- (UIView *) leftCalloutAccessoryView\n{\n    UIView * re$ult = [self leftCalloutAccessoryView__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "prepareForReuse()": "- (void) prepareForReuse\n{\n    [self prepareForReuse__];\n}\n\n",
    "reuseIdentifier()": "- (NSString *) reuseIdentifier\n{\n    NSString * re$ult = [self reuseIdentifier__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "rightCalloutAccessoryView()": "- (UIView *) rightCalloutAccessoryView\n{\n    UIView * re$ult = [self rightCalloutAccessoryView__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "setAnnotation(crossmobile.ios.mapkit.MKAnnotation)": "- (void) setAnnotation:(id<MKAnnotation>) annotation\n{\n    [self setAnnotation___crossmobile_ios_mapkit_MKAnnotation:(annotation ? annotation : JAVA_NULL)];\n}\n\n",
    "setCalloutOffset(crossmobile.ios.coregraphics.CGPoint)": "- (void) setCalloutOffset:(CGPoint) calloutOffset\n{\n    crossmobile_ios_coregraphics_CGPoint* calloutOffset$conv = [[crossmobile_ios_coregraphics_CGPoint alloc] initWithCGPoint:calloutOffset];\n    [self setCalloutOffset___crossmobile_ios_coregraphics_CGPoint:calloutOffset$conv];\n    [calloutOffset$conv release];\n}\n\n",
    "setCanShowCallout(boolean)": "- (void) setCanShowCallout:(BOOL) canShowCallout\n{\n    [self setCanShowCallout___boolean:canShowCallout];\n}\n\n",
    "setCenterOffset(crossmobile.ios.coregraphics.CGPoint)": "- (void) setCenterOffset:(CGPoint) centerOffset\n{\n    crossmobile_ios_coregraphics_CGPoint* centerOffset$conv = [[crossmobile_ios_coregraphics_CGPoint alloc] initWithCGPoint:centerOffset];\n    [self setCenterOffset___crossmobile_ios_coregraphics_CGPoint:centerOffset$conv];\n    [centerOffset$conv release];\n}\n\n",
    "setDragState(int)": "- (void) setDragState:(MKAnnotationViewDragState) dragState\n{\n    [self setDragState___int:dragState];\n}\n\n",
    "setDragState(int,boolean)": "- (void) setDragState:(MKAnnotationViewDragState) newDragState animated:(BOOL) animated\n{\n    [self setDragState___int_boolean:newDragState :animated];\n}\n\n",
    "setDraggable(boolean)": "- (void) setDraggable:(BOOL) draggable\n{\n    [self setDraggable___boolean:draggable];\n}\n\n",
    "setEnabled(boolean)": "- (void) setEnabled:(BOOL) enabled\n{\n    [self setEnabled___boolean:enabled];\n}\n\n",
    "setHighlighted(boolean)": "- (void) setHighlighted:(BOOL) highlighted\n{\n    [self setHighlighted___boolean:highlighted];\n}\n\n",
    "setImage(crossmobile.ios.uikit.UIImage)": "- (void) setImage:(UIImage *) image\n{\n    [self setImage___crossmobile_ios_uikit_UIImage:(image ? image : JAVA_NULL)];\n}\n\n",
    "setLeftCalloutAccessoryView(crossmobile.ios.uikit.UIView)": "- (void) setLeftCalloutAccessoryView:(UIView *) leftCalloutAccessoryView\n{\n    [self setLeftCalloutAccessoryView___crossmobile_ios_uikit_UIView:(leftCalloutAccessoryView ? leftCalloutAccessoryView : JAVA_NULL)];\n}\n\n",
    "setRightCalloutAccessoryView(crossmobile.ios.uikit.UIView)": "- (void) setRightCalloutAccessoryView:(UIView *) rightCalloutAccessoryView\n{\n    [self setRightCalloutAccessoryView___crossmobile_ios_uikit_UIView:(rightCalloutAccessoryView ? rightCalloutAccessoryView : JAVA_NULL)];\n}\n\n",
    "setSelected(boolean)": "- (void) setSelected:(BOOL) selected\n{\n    [self setSelected___boolean:selected];\n}\n\n",
    "setSelected(boolean,boolean)": "- (void) setSelected:(BOOL) selected animated:(BOOL) animated\n{\n    [self setSelected___boolean_boolean:selected :animated];\n}\n\n"
  },
  "crossmobile.ios.mapkit.MKMapView": {
    "addAnnotation(crossmobile.ios.mapkit.MKAnnotation)": "- (void) addAnnotation:(id<MKAnnotation>) annotation\n{\n    [self addAnnotation___crossmobile_ios_mapkit_MKAnnotation:(annotation ? annotation : JAVA_NULL)];\n}\n\n",
    "addAnnotations(java.util.List)": "- (void) addAnnotations:(NSArray<id<MKAnnotation>> *) annotations\n{\n    [self addAnnotations___java_util_List:(annotations ? annotations : JAVA_NULL)];\n}\n\n",
    "addOverlay(crossmobile.ios.mapkit.MKOverlay)": "- (void) addOverlay:(id<MKOverlay>) overlay\n{\n    [self addOverlay___crossmobile_ios_mapkit_MKOverlay:(overlay ? overlay : JAVA_NULL)];\n}\n\n",
    "addOverlays(java.util.List)": "- (void) addOverlays:(NSArray<id<MKOverlay>> *) overlays\n{\n    [self addOverlays___java_util_List:(overlays ? overlays : JAVA_NULL)];\n}\n\n",
    "annotationVisibleRect()": "- (CGRect) annotationVisibleRect\n{\n    crossmobile_ios_coregraphics_CGRect* re$ult = [self annotationVisibleRect__];\n    CGRect re$ult$conv = [re$ult getCGRect];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n",
    "annotations()": "- (NSArray<id<MKAnnotation>> *) annotations\n{\n    NSArray<id<MKAnnotation>> * re$ult = [self annotations__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "annotationsInMapRect(crossmobile.ios.mapkit.MKMapRect)": "- (NSSet<id<MKAnnotation>> *) annotationsInMapRect:(MKMapRect) mapRect\n{\n    crossmobile_ios_mapkit_MKMapRect* mapRect$conv = [[crossmobile_ios_mapkit_MKMapRect alloc] initWithMKMapRect:mapRect];\n    NSSet<id<MKAnnotation>> * re$ult = [self annotationsInMapRect___crossmobile_ios_mapkit_MKMapRect:mapRect$conv];\n    [mapRect$conv release];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "centerCoordinate()": "- (CLLocationCoordinate2D) centerCoordinate\n{\n    crossmobile_ios_corelocation_CLLocationCoordinate2D* re$ult = [self centerCoordinate__];\n    CLLocationCoordinate2D re$ult$conv = [re$ult getCLLocationCoordinate2D];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n",
    "convertCoordinate(crossmobile.ios.corelocation.CLLocationCoordinate2D,crossmobile.ios.uikit.UIView)": "- (CGPoint) convertCoordinate:(CLLocationCoordinate2D) coordinate toPointToView:(UIView *) view\n{\n    crossmobile_ios_corelocation_CLLocationCoordinate2D* coordinate$conv = [[crossmobile_ios_corelocation_CLLocationCoordinate2D alloc] initWithCLLocationCoordinate2D:coordinate];\n    crossmobile_ios_coregraphics_CGPoint* re$ult = [self convertCoordinate___crossmobile_ios_corelocation_CLLocationCoordinate2D_crossmobile_ios_uikit_UIView:coordinate$conv :(view ? view : JAVA_NULL)];\n    CGPoint re$ult$conv = [re$ult getCGPoint];\n    [re$ult release];\n    [coordinate$conv release];\n    return re$ult$conv;\n}\n\n",
    "convertPoint(crossmobile.ios.coregraphics.CGPoint,crossmobile.ios.uikit.UIView)": "- (CLLocationCoordinate2D) convertPoint:(CGPoint) point toCoordinateFromView:(UIView *) view\n{\n    crossmobile_ios_coregraphics_CGPoint* point$conv = [[crossmobile_ios_coregraphics_CGPoint alloc] initWithCGPoint:point];\n    crossmobile_ios_corelocation_CLLocationCoordinate2D* re$ult = [self convertPoint___crossmobile_ios_coregraphics_CGPoint_crossmobile_ios_uikit_UIView:point$conv :(view ? view : JAVA_NULL)];\n    CLLocationCoordinate2D re$ult$conv = [re$ult getCLLocationCoordinate2D];\n    [re$ult release];\n    [point$conv release];\n    return re$ult$conv;\n}\n\n",
    "convertRect(crossmobile.ios.coregraphics.CGRect,crossmobile.ios.uikit.UIView)": "- (MKCoordinateRegion) convertRect:(CGRect) rect toRegionFromView:(UIView *) view\n{\n    crossmobile_ios_coregraphics_CGRect* rect$conv = [[crossmobile_ios_coregraphics_CGRect alloc] initWithCGRect:rect];\n    crossmobile_ios_mapkit_MKCoordinateRegion* re$ult = [self convertRect___crossmobile_ios_coregraphics_CGRect_crossmobile_ios_uikit_UIView:rect$conv :(view ? view : JAVA_NULL)];\n    MKCoordinateRegion re$ult$conv = [re$ult getMKCoordinateRegion];\n    [re$ult release];\n    [rect$conv release];\n    return re$ult$conv;\n}\n\n",
    "convertRegion(crossmobile.ios.mapkit.MKCoordinateRegion,crossmobile.ios.uikit.UIView)": "- (CGRect) convertRegion:(MKCoordinateRegion) region toRectToView:(UIView *) view\n{\n    crossmobile_ios_mapkit_MKCoordinateRegion* region$conv = [[crossmobile_ios_mapkit_MKCoordinateRegion alloc] initWithMKCoordinateRegion:region];\n    crossmobile_ios_coregraphics_CGRect* re$ult = [self convertRegion___crossmobile_ios_mapkit_MKCoordinateRegion_crossmobile_ios_uikit_UIView:region$conv :(view ? view : JAVA_NULL)];\n    CGRect re$ult$conv = [re$ult getCGRect];\n    [re$ult release];\n    [region$conv release];\n    return re$ult$conv;\n}\n\n",
    "delegate()": "- (id<MKMapViewDelegate>) delegate\n{\n    id<MKMapViewDelegate> re$ult = [self delegate__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "dequeueReusableAnnotationViewWithIdentifier(java.lang.String)": "- (MKAnnotationView *) dequeueReusableAnnotationViewWithIdentifier:(NSString *) identifier\n{\n    MKAnnotationView * re$ult = [self dequeueReusableAnnotationViewWithIdentifier___java_lang_String:(identifier ? identifier : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "deselectAnnotation(crossmobile.ios.mapkit.MKAnnotation,boolean)": "- (void) deselectAnnotation:(id<MKAnnotation>) annotation animated:(BOOL) animated\n{\n    [self deselectAnnotation___crossmobile_ios_mapkit_MKAnnotation_boolean:(annotation ? annotation : JAVA_NULL) :animated];\n}\n\n",
    "exchangeOverlayAtIndex(int,int)": "- (void) exchangeOverlayAtIndex:(NSUInteger) index1 withOverlayAtIndex:(NSUInteger) index2\n{\n    [self exchangeOverlayAtIndex___int_int:index1 :index2];\n}\n\n",
    "insertOverlay(crossmobile.ios.mapkit.MKOverlay,int)": "- (void) insertOverlay:(id<MKOverlay>) overlay atIndex:(NSUInteger) index\n{\n    [self insertOverlay___crossmobile_ios_mapkit_MKOverlay_int:(overlay ? overlay : JAVA_NULL) :index];\n}\n\n",
    "insertOverlayAboveOverlay(crossmobile.ios.mapkit.MKOverlay,crossmobile.ios.mapkit.MKOverlay)": "- (void) insertOverlay:(id<MKOverlay>) overlay aboveOverlay:(id<MKOverlay>) sibling\n{\n    [self insertOverlayAboveOverlay___crossmobile_ios_mapkit_MKOverlay_crossmobile_ios_mapkit_MKOverlay:(overlay ? overlay : JAVA_NULL) :(sibling ? sibling : JAVA_NULL)];\n}\n\n",
    "insertOverlayBelowOverlay(crossmobile.ios.mapkit.MKOverlay,crossmobile.ios.mapkit.MKOverlay)": "- (void) insertOverlay:(id<MKOverlay>) overlay belowOverlay:(id<MKOverlay>) sibling\n{\n    [self insertOverlayBelowOverlay___crossmobile_ios_mapkit_MKOverlay_crossmobile_ios_mapkit_MKOverlay:(overlay ? overlay : JAVA_NULL) :(sibling ? sibling : JAVA_NULL)];\n}\n\n",
    "isScrollEnabled()": "- (BOOL) isScrollEnabled\n{\n    return [self isScrollEnabled__];\n}\n\n",
    "isUserLocationVisible()": "- (BOOL) isUserLocationVisible\n{\n    return [self isUserLocationVisible__];\n}\n\n",
    "isZoomEnabled()": "- (BOOL) isZoomEnabled\n{\n    return [self isZoomEnabled__];\n}\n\n",
    "mapRectThatFits(crossmobile.ios.mapkit.MKMapRect)": "- (MKMapRect) mapRectThatFits:(MKMapRect) mapRect\n{\n    crossmobile_ios_mapkit_MKMapRect* mapRect$conv = [[crossmobile_ios_mapkit_MKMapRect alloc] initWithMKMapRect:mapRect];\n    crossmobile_ios_mapkit_MKMapRect* re$ult = [self mapRectThatFits___crossmobile_ios_mapkit_MKMapRect:mapRect$conv];\n    MKMapRect re$ult$conv = [re$ult getMKMapRect];\n    [re$ult release];\n    [mapRect$conv release];\n    return re$ult$conv;\n}\n\n",
    "mapRectThatFits(crossmobile.ios.mapkit.MKMapRect,crossmobile.ios.uikit.UIEdgeInsets)": "- (MKMapRect) mapRectThatFits:(MKMapRect) mapRect edgePadding:(UIEdgeInsets) insets\n{\n    crossmobile_ios_mapkit_MKMapRect* mapRect$conv = [[crossmobile_ios_mapkit_MKMapRect alloc] initWithMKMapRect:mapRect];\n    crossmobile_ios_uikit_UIEdgeInsets* insets$conv = [[crossmobile_ios_uikit_UIEdgeInsets alloc] initWithUIEdgeInsets:insets];\n    crossmobile_ios_mapkit_MKMapRect* re$ult = [self mapRectThatFits___crossmobile_ios_mapkit_MKMapRect_crossmobile_ios_uikit_UIEdgeInsets:mapRect$conv :insets$conv];\n    MKMapRect re$ult$conv = [re$ult getMKMapRect];\n    [re$ult release];\n    [mapRect$conv release];\n    [insets$conv release];\n    return re$ult$conv;\n}\n\n",
    "mapType()": "- (MKMapType) mapType\n{\n    return [self mapType__];\n}\n\n",
    "overlays()": "- (NSArray<id<MKOverlay>> *) overlays\n{\n    NSArray<id<MKOverlay>> * re$ult = [self overlays__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "region()": "- (MKCoordinateRegion) region\n{\n    crossmobile_ios_mapkit_MKCoordinateRegion* re$ult = [self region__];\n    MKCoordinateRegion re$ult$conv = [re$ult getMKCoordinateRegion];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n",
    "regionThatFits(crossmobile.ios.mapkit.MKCoordinateRegion)": "- (MKCoordinateRegion) regionThatFits:(MKCoordinateRegion) region\n{\n    crossmobile_ios_mapkit_MKCoordinateRegion* region$conv = [[crossmobile_ios_mapkit_MKCoordinateRegion alloc] initWithMKCoordinateRegion:region];\n    crossmobile_ios_mapkit_MKCoordinateRegion* re$ult = [self regionThatFits___crossmobile_ios_mapkit_MKCoordinateRegion:region$conv];\n    MKCoordinateRegion re$ult$conv = [re$ult getMKCoordinateRegion];\n    [re$ult release];\n    [region$conv release];\n    return re$ult$conv;\n}\n\n",
    "removeAnnotation(crossmobile.ios.mapkit.MKAnnotation)": "- (void) removeAnnotation:(id<MKAnnotation>) annotation\n{\n    [self removeAnnotation___crossmobile_ios_mapkit_MKAnnotation:(annotation ? annotation : JAVA_NULL)];\n}\n\n",
    "removeAnnotations(java.util.List)": "- (void) removeAnnotations:(NSArray<id<MKAnnotation>> *) annotations\n{\n    [self removeAnnotations___java_util_List:(annotations ? annotations : JAVA_NULL)];\n}\n\n",
    "removeOverlay(crossmobile.ios.mapkit.MKOverlay)": "- (void) removeOverlay:(id<MKOverlay>) overlay\n{\n    [self removeOverlay___crossmobile_ios_mapkit_MKOverlay:(overlay ? overlay : JAVA_NULL)];\n}\n\n",
    "removeOverlays(java.util.List)": "- (void) removeOverlays:(NSArray<id<MKOverlay>> *) overlays\n{\n    [self removeOverlays___java_util_List:(overlays ? overlays : JAVA_NULL)];\n}\n\n",
    "selectAnnotation(crossmobile.ios.mapkit.MKAnnotation,boolean)": "- (void) selectAnnotation:(id<MKAnnotation>) annotation animated:(BOOL) animated\n{\n    [self selectAnnotation___crossmobile_ios_mapkit_MKAnnotation_boolean:(annotation ? annotation : JAVA_NULL) :animated];\n}\n\n",
    "selectedAnnotations()": "- (NSArray<id<MKAnnotation>> *) selectedAnnotations\n{\n    NSArray<id<MKAnnotation>> * re$ult = [self selectedAnnotations__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "setCenterCoordinate(crossmobile.ios.corelocation.CLLocationCoordinate2D)": "- (void) setCenterCoordinate:(CLLocationCoordinate2D) centerCoordinate\n{\n    crossmobile_ios_corelocation_CLLocationCoordinate2D* centerCoordinate$conv = [[crossmobile_ios_corelocation_CLLocationCoordinate2D alloc] initWithCLLocationCoordinate2D:centerCoordinate];\n    [self setCenterCoordinate___crossmobile_ios_corelocation_CLLocationCoordinate2D:centerCoordinate$conv];\n    [centerCoordinate$conv release];\n}\n\n",
    "setCenterCoordinate(crossmobile.ios.corelocation.CLLocationCoordinate2D,boolean)": "- (void) setCenterCoordinate:(CLLocationCoordinate2D) coordinate animated:(BOOL) animated\n{\n    crossmobile_ios_corelocation_CLLocationCoordinate2D* coordinate$conv = [[crossmobile_ios_corelocation_CLLocationCoordinate2D alloc] initWithCLLocationCoordinate2D:coordinate];\n    [self setCenterCoordinate___crossmobile_ios_corelocation_CLLocationCoordinate2D_boolean:coordinate$conv :animated];\n    [coordinate$conv release];\n}\n\n",
    "setDelegate(crossmobile.ios.mapkit.MKMapViewDelegate)": "- (void) setDelegate:(id<MKMapViewDelegate>) delegate\n{\n    [self setDelegate___crossmobile_ios_mapkit_MKMapViewDelegate:(delegate ? delegate : JAVA_NULL)];\n}\n\n",
    "setMapType(int)": "- (void) setMapType:(MKMapType) mapType\n{\n    [self setMapType___int:mapType];\n}\n\n",
    "setRegion(crossmobile.ios.mapkit.MKCoordinateRegion)": "- (void) setRegion:(MKCoordinateRegion) region\n{\n    crossmobile_ios_mapkit_MKCoordinateRegion* region$conv = [[crossmobile_ios_mapkit_MKCoordinateRegion alloc] initWithMKCoordinateRegion:region];\n    [self setRegion___crossmobile_ios_mapkit_MKCoordinateRegion:region$conv];\n    [region$conv release];\n}\n\n",
    "setRegion(crossmobile.ios.mapkit.MKCoordinateRegion,boolean)": "- (void) setRegion:(MKCoordinateRegion) region animated:(BOOL) animated\n{\n    crossmobile_ios_mapkit_MKCoordinateRegion* region$conv = [[crossmobile_ios_mapkit_MKCoordinateRegion alloc] initWithMKCoordinateRegion:region];\n    [self setRegion___crossmobile_ios_mapkit_MKCoordinateRegion_boolean:region$conv :animated];\n    [region$conv release];\n}\n\n",
    "setScrollEnabled(boolean)": "- (void) setScrollEnabled:(BOOL) scrollEnabled\n{\n    [self setScrollEnabled___boolean:scrollEnabled];\n}\n\n",
    "setSelectedAnnotations(java.util.List)": "- (void) setSelectedAnnotations:(NSArray<id<MKAnnotation>> *) selectedAnnotations\n{\n    [self setSelectedAnnotations___java_util_List:(selectedAnnotations ? selectedAnnotations : JAVA_NULL)];\n}\n\n",
    "setShowsUserLocation(boolean)": "- (void) setShowsUserLocation:(BOOL) showsUserLocation\n{\n    [self setShowsUserLocation___boolean:showsUserLocation];\n}\n\n",
    "setVisibleMapRect(crossmobile.ios.mapkit.MKMapRect)": "- (void) setVisibleMapRect:(MKMapRect) visibleMapRect\n{\n    crossmobile_ios_mapkit_MKMapRect* visibleMapRect$conv = [[crossmobile_ios_mapkit_MKMapRect alloc] initWithMKMapRect:visibleMapRect];\n    [self setVisibleMapRect___crossmobile_ios_mapkit_MKMapRect:visibleMapRect$conv];\n    [visibleMapRect$conv release];\n}\n\n",
    "setVisibleMapRect(crossmobile.ios.mapkit.MKMapRect,boolean)": "- (void) setVisibleMapRect:(MKMapRect) mapRect animated:(BOOL) animate\n{\n    crossmobile_ios_mapkit_MKMapRect* mapRect$conv = [[crossmobile_ios_mapkit_MKMapRect alloc] initWithMKMapRect:mapRect];\n    [self setVisibleMapRect___crossmobile_ios_mapkit_MKMapRect_boolean:mapRect$conv :animate];\n    [mapRect$conv release];\n}\n\n",
    "setVisibleMapRect(crossmobile.ios.mapkit.MKMapRect,crossmobile.ios.uikit.UIEdgeInsets,boolean)": "- (void) setVisibleMapRect:(MKMapRect) mapRect edgePadding:(UIEdgeInsets) insets animated:(BOOL) animate\n{\n    crossmobile_ios_mapkit_MKMapRect* mapRect$conv = [[crossmobile_ios_mapkit_MKMapRect alloc] initWithMKMapRect:mapRect];\n    crossmobile_ios_uikit_UIEdgeInsets* insets$conv = [[crossmobile_ios_uikit_UIEdgeInsets alloc] initWithUIEdgeInsets:insets];\n    [self setVisibleMapRect___crossmobile_ios_mapkit_MKMapRect_crossmobile_ios_uikit_UIEdgeInsets_boolean:mapRect$conv :insets$conv :animate];\n    [mapRect$conv release];\n    [insets$conv release];\n}\n\n",
    "setZoomEnabled(boolean)": "- (void) setZoomEnabled:(BOOL) zoomEnabled\n{\n    [self setZoomEnabled___boolean:zoomEnabled];\n}\n\n",
    "showsUserLocation()": "- (BOOL) showsUserLocation\n{\n    return [self showsUserLocation__];\n}\n\n",
    "userLocation()": "- (MKUserLocation *) userLocation\n{\n    MKUserLocation * re$ult = [self userLocation__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "viewForAnnotation(crossmobile.ios.mapkit.MKAnnotation)": "- (MKAnnotationView *) viewForAnnotation:(id<MKAnnotation>) annotation\n{\n    MKAnnotationView * re$ult = [self viewForAnnotation___crossmobile_ios_mapkit_MKAnnotation:(annotation ? annotation : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "viewForOverlay(crossmobile.ios.mapkit.MKOverlay)": "- (MKOverlayView *) viewForOverlay:(id<MKOverlay>) overlay\n{\n    MKOverlayView * re$ult = [self viewForOverlay___crossmobile_ios_mapkit_MKOverlay:(overlay ? overlay : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "visibleMapRect()": "- (MKMapRect) visibleMapRect\n{\n    crossmobile_ios_mapkit_MKMapRect* re$ult = [self visibleMapRect__];\n    MKMapRect re$ult$conv = [re$ult getMKMapRect];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n"
  },
  "crossmobile.ios.mapkit.MKMapViewDelegate": {
    "annotationViewCalloutAccessoryControlTapped(crossmobile.ios.mapkit.MKMapView,crossmobile.ios.mapkit.MKAnnotationView,crossmobile.ios.uikit.UIControl)": "- (void) mapView:(MKMapView *) mapView annotationView:(MKAnnotationView *) view calloutAccessoryControlTapped:(UIControl *) control\n{\n    [self annotationViewCalloutAccessoryControlTapped___crossmobile_ios_mapkit_MKMapView_crossmobile_ios_mapkit_MKAnnotationView_crossmobile_ios_uikit_UIControl:(mapView ? mapView : JAVA_NULL) :(view ? view : JAVA_NULL) :(control ? control : JAVA_NULL)];\n}\n\n",
    "annotationViewDidChangeDragState(crossmobile.ios.mapkit.MKMapView,crossmobile.ios.mapkit.MKAnnotationView,int,int)": "- (void) mapView:(MKMapView *) mapView annotationView:(MKAnnotationView *) view didChangeDragState:(MKAnnotationViewDragState) newState fromOldState:(MKAnnotationViewDragState) oldState\n{\n    [self annotationViewDidChangeDragState___crossmobile_ios_mapkit_MKMapView_crossmobile_ios_mapkit_MKAnnotationView_int_int:(mapView ? mapView : JAVA_NULL) :(view ? view : JAVA_NULL) :newState :oldState];\n}\n\n",
    "didAddAnnotationViews(crossmobile.ios.mapkit.MKMapView,java.util.List)": "- (void) mapView:(MKMapView *) mapView didAddAnnotationViews:(NSArray<MKAnnotationView *> *) views\n{\n    [self didAddAnnotationViews___crossmobile_ios_mapkit_MKMapView_java_util_List:(mapView ? mapView : JAVA_NULL) :(views ? views : JAVA_NULL)];\n}\n\n",
    "didAddOverlayViews(crossmobile.ios.mapkit.MKMapView,java.util.List)": "- (void) mapView:(MKMapView *) mapView didAddOverlayViews:(NSArray *) overlayViews\n{\n    [self didAddOverlayViews___crossmobile_ios_mapkit_MKMapView_java_util_List:(mapView ? mapView : JAVA_NULL) :(overlayViews ? overlayViews : JAVA_NULL)];\n}\n\n",
    "didDeselectAnnotationView(crossmobile.ios.mapkit.MKMapView,crossmobile.ios.mapkit.MKAnnotationView)": "- (void) mapView:(MKMapView *) mapView didDeselectAnnotationView:(MKAnnotationView *) view\n{\n    [self didDeselectAnnotationView___crossmobile_ios_mapkit_MKMapView_crossmobile_ios_mapkit_MKAnnotationView:(mapView ? mapView : JAVA_NULL) :(view ? view : JAVA_NULL)];\n}\n\n",
    "didFailLoadingMap(crossmobile.ios.mapkit.MKMapView,crossmobile.ios.foundation.NSError)": "- (void) mapViewDidFailLoadingMap:(MKMapView *) mapView withError:(NSError *) error\n{\n    [self didFailLoadingMap___crossmobile_ios_mapkit_MKMapView_crossmobile_ios_foundation_NSError:(mapView ? mapView : JAVA_NULL) :(error ? error : JAVA_NULL)];\n}\n\n",
    "didFailToLocateUserWithError(crossmobile.ios.mapkit.MKMapView,crossmobile.ios.foundation.NSError)": "- (void) mapView:(MKMapView *) mapView didFailToLocateUserWithError:(NSError *) error\n{\n    [self didFailToLocateUserWithError___crossmobile_ios_mapkit_MKMapView_crossmobile_ios_foundation_NSError:(mapView ? mapView : JAVA_NULL) :(error ? error : JAVA_NULL)];\n}\n\n",
    "didFinishLoadingMap(crossmobile.ios.mapkit.MKMapView)": "- (void) mapViewDidFinishLoadingMap:(MKMapView *) mapView\n{\n    [self didFinishLoadingMap___crossmobile_ios_mapkit_MKMapView:(mapView ? mapView : JAVA_NULL)];\n}\n\n",
    "didSelectAnnotationView(crossmobile.ios.mapkit.MKMapView,crossmobile.ios.mapkit.MKAnnotationView)": "- (void) mapView:(MKMapView *) mapView didSelectAnnotationView:(MKAnnotationView *) view\n{\n    [self didSelectAnnotationView___crossmobile_ios_mapkit_MKMapView_crossmobile_ios_mapkit_MKAnnotationView:(mapView ? mapView : JAVA_NULL) :(view ? view : JAVA_NULL)];\n}\n\n",
    "didStopLocatingUser(crossmobile.ios.mapkit.MKMapView)": "- (void) mapViewDidStopLocatingUser:(MKMapView *) mapView\n{\n    [self didStopLocatingUser___crossmobile_ios_mapkit_MKMapView:(mapView ? mapView : JAVA_NULL)];\n}\n\n",
    "didUpdateUserLocation(crossmobile.ios.mapkit.MKMapView,crossmobile.ios.mapkit.MKUserLocation)": "- (void) mapView:(MKMapView *) mapView didUpdateUserLocation:(MKUserLocation *) userLocation\n{\n    [self didUpdateUserLocation___crossmobile_ios_mapkit_MKMapView_crossmobile_ios_mapkit_MKUserLocation:(mapView ? mapView : JAVA_NULL) :(userLocation ? userLocation : JAVA_NULL)];\n}\n\n",
    "regionDidChangeAnimated(crossmobile.ios.mapkit.MKMapView,boolean)": "- (void) mapView:(MKMapView *) mapView regionDidChangeAnimated:(BOOL) animated\n{\n    [self regionDidChangeAnimated___crossmobile_ios_mapkit_MKMapView_boolean:(mapView ? mapView : JAVA_NULL) :animated];\n}\n\n",
    "regionWillChangeAnimated(crossmobile.ios.mapkit.MKMapView,boolean)": "- (void) mapView:(MKMapView *) mapView regionWillChangeAnimated:(BOOL) animated\n{\n    [self regionWillChangeAnimated___crossmobile_ios_mapkit_MKMapView_boolean:(mapView ? mapView : JAVA_NULL) :animated];\n}\n\n",
    "viewForAnnotation(crossmobile.ios.mapkit.MKMapView,crossmobile.ios.mapkit.MKAnnotation)": "- (MKAnnotationView *) mapView:(MKMapView *) mapView viewForAnnotation:(id<MKAnnotation>) annotation\n{\n    MKAnnotationView * re$ult = [self viewForAnnotation___crossmobile_ios_mapkit_MKMapView_crossmobile_ios_mapkit_MKAnnotation:(mapView ? mapView : JAVA_NULL) :(annotation ? annotation : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "viewForOverlay(crossmobile.ios.mapkit.MKMapView,crossmobile.ios.mapkit.MKOverlay)": "- (MKOverlayView *) mapView:(MKMapView *) mapView viewForOverlay:(id<MKOverlay>) overlay\n{\n    MKOverlayView * re$ult = [self viewForOverlay___crossmobile_ios_mapkit_MKMapView_crossmobile_ios_mapkit_MKOverlay:(mapView ? mapView : JAVA_NULL) :(overlay ? overlay : JAVA_NULL)];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "willStartLoadingMap(crossmobile.ios.mapkit.MKMapView)": "- (void) mapViewWillStartLoadingMap:(MKMapView *) mapView\n{\n    [self willStartLoadingMap___crossmobile_ios_mapkit_MKMapView:(mapView ? mapView : JAVA_NULL)];\n}\n\n",
    "willStartLocatingUser(crossmobile.ios.mapkit.MKMapView)": "- (void) mapViewWillStartLocatingUser:(MKMapView *) mapView\n{\n    [self willStartLocatingUser___crossmobile_ios_mapkit_MKMapView:(mapView ? mapView : JAVA_NULL)];\n}\n\n"
  },
  "crossmobile.ios.mapkit.MKOverlay": {
    "boundingMapRect()": "- (MKMapRect) boundingMapRect\n{\n    crossmobile_ios_mapkit_MKMapRect* re$ult = [self boundingMapRect__];\n    MKMapRect re$ult$conv = [re$ult getMKMapRect];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n",
    "canReplaceMapContent()": "- (BOOL) canReplaceMapContent\n{\n    return [self canReplaceMapContent__];\n}\n\n",
    "intersectsMapRect(crossmobile.ios.mapkit.MKMapRect)": "- (BOOL) intersectsMapRect:(MKMapRect) mapRect\n{\n    crossmobile_ios_mapkit_MKMapRect* mapRect$conv = [[crossmobile_ios_mapkit_MKMapRect alloc] initWithMKMapRect:mapRect];\n    BOOL re$ult = [self intersectsMapRect___crossmobile_ios_mapkit_MKMapRect:mapRect$conv];\n    [mapRect$conv release];\n    return re$ult;\n}\n\n"
  },
  "crossmobile.ios.mapkit.MKOverlayView": {
    "canDrawMapRect(crossmobile.ios.mapkit.MKMapRect,double)": "- (BOOL) canDrawMapRect:(MKMapRect) mapRect zoomScale:(MKZoomScale) zoomScale\n{\n    crossmobile_ios_mapkit_MKMapRect* mapRect$conv = [[crossmobile_ios_mapkit_MKMapRect alloc] initWithMKMapRect:mapRect];\n    BOOL re$ult = [self canDrawMapRect___crossmobile_ios_mapkit_MKMapRect_double:mapRect$conv :zoomScale];\n    [mapRect$conv release];\n    return re$ult;\n}\n\n",
    "drawMapRect(crossmobile.ios.mapkit.MKMapRect,double,crossmobile.ios.coregraphics.CGContext)": "- (void) drawMapRect:(MKMapRect) mapRect zoomScale:(MKZoomScale) zoomScale inContext:(CGContextRef) context\n{\n    crossmobile_ios_mapkit_MKMapRect* mapRect$conv = [[crossmobile_ios_mapkit_MKMapRect alloc] initWithMKMapRect:mapRect];\n    crossmobile_ios_coregraphics_CGContext* context$conv = [[crossmobile_ios_coregraphics_CGContext alloc] initWithCGContext:context];\n    [self drawMapRect___crossmobile_ios_mapkit_MKMapRect_double_crossmobile_ios_coregraphics_CGContext:mapRect$conv :zoomScale :context$conv];\n    [mapRect$conv release];\n    [context$conv release];\n}\n\n",
    "mapPointForPoint(crossmobile.ios.coregraphics.CGPoint)": "- (MKMapPoint) mapPointForPoint:(CGPoint) point\n{\n    crossmobile_ios_coregraphics_CGPoint* point$conv = [[crossmobile_ios_coregraphics_CGPoint alloc] initWithCGPoint:point];\n    crossmobile_ios_mapkit_MKMapPoint* re$ult = [self mapPointForPoint___crossmobile_ios_coregraphics_CGPoint:point$conv];\n    MKMapPoint re$ult$conv = [re$ult getMKMapPoint];\n    [re$ult release];\n    [point$conv release];\n    return re$ult$conv;\n}\n\n",
    "mapRectForRect(crossmobile.ios.coregraphics.CGRect)": "- (MKMapRect) mapRectForRect:(CGRect) rect\n{\n    crossmobile_ios_coregraphics_CGRect* rect$conv = [[crossmobile_ios_coregraphics_CGRect alloc] initWithCGRect:rect];\n    crossmobile_ios_mapkit_MKMapRect* re$ult = [self mapRectForRect___crossmobile_ios_coregraphics_CGRect:rect$conv];\n    MKMapRect re$ult$conv = [re$ult getMKMapRect];\n    [re$ult release];\n    [rect$conv release];\n    return re$ult$conv;\n}\n\n",
    "overlay()": "- (id<MKOverlay>) overlay\n{\n    id<MKOverlay> re$ult = [self overlay__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "pointForMapPoint(crossmobile.ios.mapkit.MKMapPoint)": "- (CGPoint) pointForMapPoint:(MKMapPoint) mapPoint\n{\n    crossmobile_ios_mapkit_MKMapPoint* mapPoint$conv = [[crossmobile_ios_mapkit_MKMapPoint alloc] initWithMKMapPoint:mapPoint];\n    crossmobile_ios_coregraphics_CGPoint* re$ult = [self pointForMapPoint___crossmobile_ios_mapkit_MKMapPoint:mapPoint$conv];\n    CGPoint re$ult$conv = [re$ult getCGPoint];\n    [re$ult release];\n    [mapPoint$conv release];\n    return re$ult$conv;\n}\n\n",
    "rectForMapRect(crossmobile.ios.mapkit.MKMapRect)": "- (CGRect) rectForMapRect:(MKMapRect) mapRect\n{\n    crossmobile_ios_mapkit_MKMapRect* mapRect$conv = [[crossmobile_ios_mapkit_MKMapRect alloc] initWithMKMapRect:mapRect];\n    crossmobile_ios_coregraphics_CGRect* re$ult = [self rectForMapRect___crossmobile_ios_mapkit_MKMapRect:mapRect$conv];\n    CGRect re$ult$conv = [re$ult getCGRect];\n    [re$ult release];\n    [mapRect$conv release];\n    return re$ult$conv;\n}\n\n",
    "setNeedsDisplayInMapRect(crossmobile.ios.mapkit.MKMapRect)": "- (void) setNeedsDisplayInMapRect:(MKMapRect) mapRect\n{\n    crossmobile_ios_mapkit_MKMapRect* mapRect$conv = [[crossmobile_ios_mapkit_MKMapRect alloc] initWithMKMapRect:mapRect];\n    [self setNeedsDisplayInMapRect___crossmobile_ios_mapkit_MKMapRect:mapRect$conv];\n    [mapRect$conv release];\n}\n\n",
    "setNeedsDisplayInMapRect(crossmobile.ios.mapkit.MKMapRect,double)": "- (void) setNeedsDisplayInMapRect:(MKMapRect) mapRect zoomScale:(MKZoomScale) zoomScale\n{\n    crossmobile_ios_mapkit_MKMapRect* mapRect$conv = [[crossmobile_ios_mapkit_MKMapRect alloc] initWithMKMapRect:mapRect];\n    [self setNeedsDisplayInMapRect___crossmobile_ios_mapkit_MKMapRect_double:mapRect$conv :zoomScale];\n    [mapRect$conv release];\n}\n\n"
  },
  "crossmobile.ios.mapkit.MKPinAnnotationView": {
    "animatesDrop()": "- (BOOL) animatesDrop\n{\n    return [self animatesDrop__];\n}\n\n",
    "pinColor()": "- (MKPinAnnotationColor) pinColor\n{\n    return [self pinColor__];\n}\n\n",
    "setAnimatesDrop(boolean)": "- (void) setAnimatesDrop:(BOOL) animatesDrop\n{\n    [self setAnimatesDrop___boolean:animatesDrop];\n}\n\n",
    "setPinColor(int)": "- (void) setPinColor:(MKPinAnnotationColor) pinColor\n{\n    [self setPinColor___int:pinColor];\n}\n\n"
  },
  "crossmobile.ios.mapkit.MKPlacemark": {
    "countryCode()": "- (NSString *) countryCode\n{\n    NSString * re$ult = [self countryCode__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n"
  },
  "crossmobile.ios.mapkit.MKReverseGeocoder": {
    "cancel()": "- (void) cancel\n{\n    [self cancel__];\n}\n\n",
    "coordinate()": "- (CLLocationCoordinate2D) coordinate\n{\n    crossmobile_ios_corelocation_CLLocationCoordinate2D* re$ult = [self coordinate__];\n    CLLocationCoordinate2D re$ult$conv = [re$ult getCLLocationCoordinate2D];\n    [re$ult release];\n    return re$ult$conv;\n}\n\n",
    "delegate()": "- (id<MKReverseGeocoderDelegate>) delegate\n{\n    id<MKReverseGeocoderDelegate> re$ult = [self delegate__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "isQuerying()": "- (BOOL) isQuerying\n{\n    return [self isQuerying__];\n}\n\n",
    "placemark()": "- (MKPlacemark *) placemark\n{\n    MKPlacemark * re$ult = [self placemark__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "setDelegate(crossmobile.ios.mapkit.MKReverseGeocoderDelegate)": "- (void) setDelegate:(id<MKReverseGeocoderDelegate>) delegate\n{\n    [self setDelegate___crossmobile_ios_mapkit_MKReverseGeocoderDelegate:(delegate ? delegate : JAVA_NULL)];\n}\n\n",
    "start()": "- (void) start\n{\n    [self start__];\n}\n\n"
  },
  "crossmobile.ios.mapkit.MKReverseGeocoderDelegate": {
    "didFailWithError(crossmobile.ios.mapkit.MKReverseGeocoder,crossmobile.ios.foundation.NSError)": "- (void) reverseGeocoder:(MKReverseGeocoder *) geocoder didFailWithError:(NSError *) error\n{\n    [self didFailWithError___crossmobile_ios_mapkit_MKReverseGeocoder_crossmobile_ios_foundation_NSError:(geocoder ? geocoder : JAVA_NULL) :(error ? error : JAVA_NULL)];\n}\n\n",
    "didFindPlacemark(crossmobile.ios.mapkit.MKReverseGeocoder,crossmobile.ios.mapkit.MKPlacemark)": "- (void) reverseGeocoder:(MKReverseGeocoder *) geocoder didFindPlacemark:(MKPlacemark *) placemark\n{\n    [self didFindPlacemark___crossmobile_ios_mapkit_MKReverseGeocoder_crossmobile_ios_mapkit_MKPlacemark:(geocoder ? geocoder : JAVA_NULL) :(placemark ? placemark : JAVA_NULL)];\n}\n\n"
  },
  "crossmobile.ios.mapkit.MKUserLocation": {
    "isUpdating()": "- (BOOL) isUpdating\n{\n    return [self isUpdating__];\n}\n\n",
    "location()": "- (CLLocation *) location\n{\n    CLLocation * re$ult = [self location__];\n    return [(re$ult == JAVA_NULL ? nil : re$ult) autorelease];\n}\n\n",
    "setSubtitle(java.lang.String)": "- (void) setSubtitle:(NSString *) subtitle\n{\n    [self setSubtitle___java_lang_String:(subtitle ? subtitle : JAVA_NULL)];\n}\n\n",
    "setTitle(java.lang.String)": "- (void) setTitle:(NSString *) title\n{\n    [self setTitle___java_lang_String:(title ? title : JAVA_NULL)];\n}\n\n"
  }
}